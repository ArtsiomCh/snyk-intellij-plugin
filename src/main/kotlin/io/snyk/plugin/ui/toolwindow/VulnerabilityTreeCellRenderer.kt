package io.snyk.plugin.ui.toolwindow

import com.intellij.icons.AllIcons
import com.intellij.ui.ColoredTreeCellRenderer
import com.intellij.util.ui.UIUtil
import io.snyk.plugin.cli.Vulnerability
import io.snyk.plugin.ui.Icons
import javax.swing.JTree
import javax.swing.tree.DefaultMutableTreeNode

class VulnerabilityTreeCellRenderer : ColoredTreeCellRenderer() {
    override fun customizeCellRenderer(
        tree: JTree,
        value: Any,
        selected: Boolean,
        expanded: Boolean,
        leaf: Boolean,
        row: Int,
        hasFocus: Boolean) {

        if (value is VulnerabilityTreeNode) {
            if (value.userObject is Vulnerability) {
                val vulnerability = value.userObject as Vulnerability

                val severityIcon = when (vulnerability.severity) {
                    "high" -> Icons.HIGH_SEVERITY
                    "medium" -> Icons.MEDIUM_SEVERITY
                    "low" -> Icons.LOW_SEVERITY
                    else -> Icons.VULNERABILITY_24
                }

                icon = severityIcon
                font = UIUtil.getTreeFont()

                append(vulnerability.title)
            }
        } else if (value is TargetFileTreeNode) {
            val nodeText = value.userObject.toString()

            icon = when (nodeText.toLowerCase()) {
                "pom.xml" -> Icons.MAVEN
                "build.gradle", "build.gradle.kts"-> Icons.GRADLE
                "package.json", "package-lock.json"-> Icons.NPM
                "requirements.txt"-> Icons.PYTHON
                else -> AllIcons.FileTypes.Text
            }

            font = UIUtil.getTreeFont()

            append(nodeText)
        } else if (value is DefaultMutableTreeNode) {
            icon = Icons.VULNERABILITY_16
            font = UIUtil.getTreeFont()

            append(value.userObject.toString())
        }
    }
}
