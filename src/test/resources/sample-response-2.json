{
  "ok": false,
  "vulnerabilities": [
    {
      "title": "Arbitrary Code Execution",
      "credit": [
        "Unknown"
      ],
      "language": "java",
      "packageManager": "maven",
      "moduleName": "commons-collections:commons-collections",
      "packageName": "commons-collections:commons-collections",
      "id": "SNYK-JAVA-COMMONSCOLLECTIONS-30078",
      "mavenModuleName": {
        "groupId": "commons-collections",
        "artifactId": "commons-collections"
      },
      "description": "## Overview\n[`commons-collections:commons-collections`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22commons-collections%22)\nApache commons-collections library permitted code execution when deserializing objects involving a specially constructed chain of classes. A remote attacker could use this flaw to execute arbitrary code with the permissions of the application using the commons-collections library.\n\n# Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution. \n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n- Apache Blog\n \nThe vulnerability, also know as _Mad Gadget_ \n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\n- Google \n\n\n## References\n- [breenmachine Blog](http://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/)\n",
      "semver": {
        "vulnerable": "[3,3.2.2)",
        "unaffected": ""
      },
      "identifiers": {
        "CWE": [
          "CWE-502"
        ],
        "CVE": [
          "CVE-2015-7501"
        ]
      },
      "cvssScore": 7.3,
      "CVSSv2": "CVSS:2.0/AV:N/AC:L/Au:N/C:C/I:C/A:C",
      "severity": "high",
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
      "creationTime": "2016-12-25T16:51:56.000Z",
      "modificationTime": "2016-12-25T16:51:56.000Z",
      "publicationTime": "2015-11-06T16:51:56.000Z",
      "disclosureTime": "2015-11-06T16:51:56.000Z",
      "from": [
        "io.github.snyk:todolist-web-common@1.0-SNAPSHOT",
        "io.github.snyk:todolist-core@1.0-SNAPSHOT",
        "commons-collections:commons-collections@3.2.1"
      ],
      "upgradePath": [
        false,
        false,
        "commons-collections:commons-collections@3.2.2"
      ],
      "version": "3.2.1",
      "name": "commons-collections:commons-collections",
      "isUpgradable": false,
      "isPatchable": false
    },
    {
      "title": "XML External Entity (XXE) Injection",
      "credit": [
        "David Jorm"
      ],
      "moduleName": "javax.servlet:jstl",
      "packageName": "javax.servlet:jstl",
      "mavenModuleName": {
        "groupId": "javax.servlet",
        "artifactId": "jstl"
      },
      "packageManager": "maven",
      "language": "java",
      "id": "SNYK-JAVA-JAVAXSERVLET-30449",
      "description": "## Overview\n[`javax.servlet:jstl`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22jstl%22)\n\nAffected versions of this packages allowed the processing of untrusted XML documents to utilize external entity references, which could access resources on the host system and, potentially, allowing arbitrary code execution.\n\n# Details\nAn _XML External Entity_ attack is a type of attack against an application that parses XML input. This attack occurs when XML input containing a reference to an external entity is processed by a weakly configured XML parser. This attack may lead to the disclosure of confidential data, denial of service, server side request forgery, port scanning from the perspective of the machine where the parser is located, and other system impacts. \n\nYou can read more about XML External Entity attacks [on our blog](https://snyk.io/blog/nokogiri-xxe-vulnerabilities/).\n\n## Remediation\nUpgrade to a version `1.3` or above. \n\n## References\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-0254)\n- [Redhat Security](https://access.redhat.com/security/cve/CVE-2015-0254)\n",
      "semver": {
        "vulnerable": "[,1.2]",
        "unaffected": ""
      },
      "identifiers": {
        "CWE": [
          "CWE-611"
        ],
        "CVE": [
          "CVE-2015-0254"
        ]
      },
      "severity": "high",
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:H/A:L",
      "creationTime": "2017-02-22T07:28:19.341Z",
      "modificationTime": "2017-02-22T07:28:19.341Z",
      "publicationTime": "2015-02-27T16:13:27.000Z",
      "disclosureTime": "2015-02-27T16:13:27.000Z",
      "cvssScore": 7.6,
      "from": [
        "io.github.snyk:todolist-web-common@1.0-SNAPSHOT",
        "javax.servlet:jstl@1.2"
      ],
      "upgradePath": [],
      "version": "1.2",
      "name": "javax.servlet:jstl",
      "isUpgradable": false,
      "isPatchable": false
    },
    {
      "title": "JSM bypass via ReflectionHelper",
      "credit": [
        "Unknown"
      ],
      "language": "java",
      "packageManager": "maven",
      "moduleName": "org.hibernate:hibernate-validator",
      "packageName": "org.hibernate:hibernate-validator",
      "id": "SNYK-JAVA-ORGHIBERNATE-30098",
      "mavenModuleName": {
        "groupId": "org.hibernate",
        "artifactId": "hibernate-validator"
      },
      "description": "## Overview\n[`org.hibernate:hibernate-validator`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22hibernate-validator%22)\nReflectionHelper (`org.hibernate.validator.util.ReflectionHelper`) in Hibernate Validator 4.1.0 before 4.2.1, 4.3.x before 4.3.2, and 5.x before 5.1.2 allows attackers to bypass Java Security Manager (JSM) restrictions and execute restricted reflection calls via a crafted application.\n\n## References\n\n- [Redhat Bugzilla](https://bugzilla.redhat.com/CVE-2014-3558)\n- [Jira Issue](https://hibernate.atlassian.net/browse/HV-912)\n",
      "semver": {
        "vulnerable": "[4.1-alpha, 4.2.1), [4.3-alpha, 4.3.2.Final), [5, 5.1.2.Final)",
        "unaffected": ""
      },
      "identifiers": {
        "CWE": [
          "CWE-592"
        ],
        "CVE": [
          "CVE-2014-3558"
        ]
      },
      "cvssScore": 5.3,
      "severity": "medium",
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
      "CVSSv2": "CVSS:2.0/AV:N/AC:L/AU:N/C:N/I:P/A:N",
      "creationTime": "2016-12-25T16:51:53.000Z",
      "modificationTime": "2016-12-25T16:51:53.000Z",
      "publicationTime": "2014-07-17T16:51:53.000Z",
      "disclosureTime": "2014-07-17T16:51:53.000Z",
      "from": [
        "io.github.snyk:todolist-web-common@1.0-SNAPSHOT",
        "org.hibernate:hibernate-validator@4.3.1.Final"
      ],
      "upgradePath": [
        false,
        "org.hibernate:hibernate-validator@4.3.2.Final"
      ],
      "version": "4.3.1.Final",
      "name": "org.hibernate:hibernate-validator",
      "isUpgradable": true,
      "isPatchable": false
    },
    {
      "title": "Directory Traversal",
      "credit": [
        "Takeshi Terada"
      ],
      "moduleName": "org.springframework:spring-core",
      "packageName": "org.springframework:spring-core",
      "mavenModuleName": {
        "groupId": "org.springframework",
        "artifactId": "spring-core"
      },
      "packageManager": "maven",
      "language": "java",
      "id": "SNYK-JAVA-ORGSPRINGFRAMEWORK-31325",
      "description": "## Overview\n[`org.springframework:spring-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22spring-core%22) provides everything you need beyond the Java language to create enterprise applications in a wide range of scenarios and architectures.\n\nAffected versions of this package are vulnerable to Directory traversal attack. It allows remote attackers to read arbitrary files via a crafted URL.\n\n## Details\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with “dot-dot-slash (../)” sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```\n\n\n## Remediation\nUpgrade `org.springframework:spring-core` to version 3.2.9, 4.0.5 or higher.\n\n## References\n- [GitHub Commit](https://github.com/spring-projects/spring-framework/commit/e3e71ba92a8b82dadf474eda76cd2741f65a77a8)\n- [Pivotal Security](https://pivotal.io/security/cve-2014-3578)\n- [Jira Issue](https://jira.spring.io/browse/SPR-12354)\n- [JVNDB](http://jvndb.jvn.jp/en/contents/2014/JVNDB-2014-000054.html)\n- [Redhat Bugzilla](https://bugzilla.redhat.com/show_bug.cgi?id=1131882)\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-3578)\n",
      "semver": {
        "vulnerable": "[3,3.2.9), [4,4.0.5)",
        "unaffected": ""
      },
      "identifiers": {
        "CWE": [
          "CWE-22"
        ],
        "CVE": [
          "CVE-2014-3578"
        ]
      },
      "severity": "medium",
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
      "creationTime": "2017-02-22T07:28:31.465Z",
      "modificationTime": "2017-05-24T07:28:31.465Z",
      "publicationTime": "2014-09-05T17:16:58.000Z",
      "disclosureTime": "2014-09-05T17:16:58.000Z",
      "cvssScore": 5.3,
      "from": [
        "io.github.snyk:todolist-web-common@1.0-SNAPSHOT",
        "io.github.snyk:todolist-core@1.0-SNAPSHOT",
        "org.springframework:spring-orm@3.2.6.RELEASE",
        "org.springframework:spring-core@3.2.6.RELEASE"
      ],
      "upgradePath": [
        false,
        false,
        "org.springframework:spring-orm@3.2.9.RELEASE",
        "org.springframework:spring-core@3.2.9.RELEASE"
      ],
      "version": "3.2.6.RELEASE",
      "name": "org.springframework:spring-core",
      "isUpgradable": false,
      "isPatchable": false
    },
    {
      "title": "Directory Traversal",
      "credit": [
        "Takeshi Terada"
      ],
      "moduleName": "org.springframework:spring-core",
      "packageName": "org.springframework:spring-core",
      "mavenModuleName": {
        "groupId": "org.springframework",
        "artifactId": "spring-core"
      },
      "packageManager": "maven",
      "language": "java",
      "id": "SNYK-JAVA-ORGSPRINGFRAMEWORK-31325",
      "description": "## Overview\n[`org.springframework:spring-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22spring-core%22) provides everything you need beyond the Java language to create enterprise applications in a wide range of scenarios and architectures.\n\nAffected versions of this package are vulnerable to Directory traversal attack. It allows remote attackers to read arbitrary files via a crafted URL.\n\n## Details\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with “dot-dot-slash (../)” sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```\n\n\n## Remediation\nUpgrade `org.springframework:spring-core` to version 3.2.9, 4.0.5 or higher.\n\n## References\n- [GitHub Commit](https://github.com/spring-projects/spring-framework/commit/e3e71ba92a8b82dadf474eda76cd2741f65a77a8)\n- [Pivotal Security](https://pivotal.io/security/cve-2014-3578)\n- [Jira Issue](https://jira.spring.io/browse/SPR-12354)\n- [JVNDB](http://jvndb.jvn.jp/en/contents/2014/JVNDB-2014-000054.html)\n- [Redhat Bugzilla](https://bugzilla.redhat.com/show_bug.cgi?id=1131882)\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-3578)\n",
      "semver": {
        "vulnerable": "[3,3.2.9), [4,4.0.5)",
        "unaffected": ""
      },
      "identifiers": {
        "CWE": [
          "CWE-22"
        ],
        "CVE": [
          "CVE-2014-3578"
        ]
      },
      "severity": "medium",
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
      "creationTime": "2017-02-22T07:28:31.465Z",
      "modificationTime": "2017-05-24T07:28:31.465Z",
      "publicationTime": "2014-09-05T17:16:58.000Z",
      "disclosureTime": "2014-09-05T17:16:58.000Z",
      "cvssScore": 5.3,
      "from": [
        "io.github.snyk:todolist-web-common@1.0-SNAPSHOT",
        "io.github.snyk:todolist-core@1.0-SNAPSHOT",
        "org.springframework:spring-aspects@3.2.6.RELEASE",
        "org.springframework:spring-context-support@3.2.6.RELEASE",
        "org.springframework:spring-core@3.2.6.RELEASE"
      ],
      "upgradePath": [
        false,
        false,
        "org.springframework:spring-aspects@3.2.7.RELEASE"
      ],
      "version": "3.2.6.RELEASE",
      "name": "org.springframework:spring-core",
      "isUpgradable": false,
      "isPatchable": false
    },
    {
      "title": "Directory Traversal",
      "credit": [
        "Takeshi Terada"
      ],
      "moduleName": "org.springframework:spring-core",
      "packageName": "org.springframework:spring-core",
      "mavenModuleName": {
        "groupId": "org.springframework",
        "artifactId": "spring-core"
      },
      "packageManager": "maven",
      "language": "java",
      "id": "SNYK-JAVA-ORGSPRINGFRAMEWORK-31325",
      "description": "## Overview\n[`org.springframework:spring-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22spring-core%22) provides everything you need beyond the Java language to create enterprise applications in a wide range of scenarios and architectures.\n\nAffected versions of this package are vulnerable to Directory traversal attack. It allows remote attackers to read arbitrary files via a crafted URL.\n\n## Details\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with “dot-dot-slash (../)” sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```\n\n\n## Remediation\nUpgrade `org.springframework:spring-core` to version 3.2.9, 4.0.5 or higher.\n\n## References\n- [GitHub Commit](https://github.com/spring-projects/spring-framework/commit/e3e71ba92a8b82dadf474eda76cd2741f65a77a8)\n- [Pivotal Security](https://pivotal.io/security/cve-2014-3578)\n- [Jira Issue](https://jira.spring.io/browse/SPR-12354)\n- [JVNDB](http://jvndb.jvn.jp/en/contents/2014/JVNDB-2014-000054.html)\n- [Redhat Bugzilla](https://bugzilla.redhat.com/show_bug.cgi?id=1131882)\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-3578)\n",
      "semver": {
        "vulnerable": "[3,3.2.9), [4,4.0.5)",
        "unaffected": ""
      },
      "identifiers": {
        "CWE": [
          "CWE-22"
        ],
        "CVE": [
          "CVE-2014-3578"
        ]
      },
      "severity": "medium",
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
      "creationTime": "2017-02-22T07:28:31.465Z",
      "modificationTime": "2017-05-24T07:28:31.465Z",
      "publicationTime": "2014-09-05T17:16:58.000Z",
      "disclosureTime": "2014-09-05T17:16:58.000Z",
      "cvssScore": 5.3,
      "from": [
        "io.github.snyk:todolist-web-common@1.0-SNAPSHOT",
        "io.github.snyk:todolist-core@1.0-SNAPSHOT",
        "org.springframework:spring-orm@3.2.6.RELEASE",
        "org.springframework:spring-beans@3.2.6.RELEASE",
        "org.springframework:spring-core@3.2.6.RELEASE"
      ],
      "upgradePath": [
        false,
        false,
        "org.springframework:spring-orm@3.2.9.RELEASE",
        "org.springframework:spring-beans@3.2.9.RELEASE",
        "org.springframework:spring-core@3.2.9.RELEASE"
      ],
      "version": "3.2.6.RELEASE",
      "name": "org.springframework:spring-core",
      "isUpgradable": false,
      "isPatchable": false
    },
    {
      "title": "Directory Traversal",
      "credit": [
        "Takeshi Terada"
      ],
      "moduleName": "org.springframework:spring-core",
      "packageName": "org.springframework:spring-core",
      "mavenModuleName": {
        "groupId": "org.springframework",
        "artifactId": "spring-core"
      },
      "packageManager": "maven",
      "language": "java",
      "id": "SNYK-JAVA-ORGSPRINGFRAMEWORK-31325",
      "description": "## Overview\n[`org.springframework:spring-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22spring-core%22) provides everything you need beyond the Java language to create enterprise applications in a wide range of scenarios and architectures.\n\nAffected versions of this package are vulnerable to Directory traversal attack. It allows remote attackers to read arbitrary files via a crafted URL.\n\n## Details\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with “dot-dot-slash (../)” sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```\n\n\n## Remediation\nUpgrade `org.springframework:spring-core` to version 3.2.9, 4.0.5 or higher.\n\n## References\n- [GitHub Commit](https://github.com/spring-projects/spring-framework/commit/e3e71ba92a8b82dadf474eda76cd2741f65a77a8)\n- [Pivotal Security](https://pivotal.io/security/cve-2014-3578)\n- [Jira Issue](https://jira.spring.io/browse/SPR-12354)\n- [JVNDB](http://jvndb.jvn.jp/en/contents/2014/JVNDB-2014-000054.html)\n- [Redhat Bugzilla](https://bugzilla.redhat.com/show_bug.cgi?id=1131882)\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-3578)\n",
      "semver": {
        "vulnerable": "[3,3.2.9), [4,4.0.5)",
        "unaffected": ""
      },
      "identifiers": {
        "CWE": [
          "CWE-22"
        ],
        "CVE": [
          "CVE-2014-3578"
        ]
      },
      "severity": "medium",
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
      "creationTime": "2017-02-22T07:28:31.465Z",
      "modificationTime": "2017-05-24T07:28:31.465Z",
      "publicationTime": "2014-09-05T17:16:58.000Z",
      "disclosureTime": "2014-09-05T17:16:58.000Z",
      "cvssScore": 5.3,
      "from": [
        "io.github.snyk:todolist-web-common@1.0-SNAPSHOT",
        "io.github.snyk:todolist-core@1.0-SNAPSHOT",
        "org.springframework:spring-orm@3.2.6.RELEASE",
        "org.springframework:spring-jdbc@3.2.6.RELEASE",
        "org.springframework:spring-core@3.2.6.RELEASE"
      ],
      "upgradePath": [
        false,
        false,
        "org.springframework:spring-orm@3.2.9.RELEASE",
        "org.springframework:spring-jdbc@3.2.9.RELEASE",
        "org.springframework:spring-core@3.2.9.RELEASE"
      ],
      "version": "3.2.6.RELEASE",
      "name": "org.springframework:spring-core",
      "isUpgradable": false,
      "isPatchable": false
    },
    {
      "title": "Directory Traversal",
      "credit": [
        "Takeshi Terada"
      ],
      "moduleName": "org.springframework:spring-core",
      "packageName": "org.springframework:spring-core",
      "mavenModuleName": {
        "groupId": "org.springframework",
        "artifactId": "spring-core"
      },
      "packageManager": "maven",
      "language": "java",
      "id": "SNYK-JAVA-ORGSPRINGFRAMEWORK-31325",
      "description": "## Overview\n[`org.springframework:spring-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22spring-core%22) provides everything you need beyond the Java language to create enterprise applications in a wide range of scenarios and architectures.\n\nAffected versions of this package are vulnerable to Directory traversal attack. It allows remote attackers to read arbitrary files via a crafted URL.\n\n## Details\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with “dot-dot-slash (../)” sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```\n\n\n## Remediation\nUpgrade `org.springframework:spring-core` to version 3.2.9, 4.0.5 or higher.\n\n## References\n- [GitHub Commit](https://github.com/spring-projects/spring-framework/commit/e3e71ba92a8b82dadf474eda76cd2741f65a77a8)\n- [Pivotal Security](https://pivotal.io/security/cve-2014-3578)\n- [Jira Issue](https://jira.spring.io/browse/SPR-12354)\n- [JVNDB](http://jvndb.jvn.jp/en/contents/2014/JVNDB-2014-000054.html)\n- [Redhat Bugzilla](https://bugzilla.redhat.com/show_bug.cgi?id=1131882)\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-3578)\n",
      "semver": {
        "vulnerable": "[3,3.2.9), [4,4.0.5)",
        "unaffected": ""
      },
      "identifiers": {
        "CWE": [
          "CWE-22"
        ],
        "CVE": [
          "CVE-2014-3578"
        ]
      },
      "severity": "medium",
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
      "creationTime": "2017-02-22T07:28:31.465Z",
      "modificationTime": "2017-05-24T07:28:31.465Z",
      "publicationTime": "2014-09-05T17:16:58.000Z",
      "disclosureTime": "2014-09-05T17:16:58.000Z",
      "cvssScore": 5.3,
      "from": [
        "io.github.snyk:todolist-web-common@1.0-SNAPSHOT",
        "io.github.snyk:todolist-core@1.0-SNAPSHOT",
        "org.springframework:spring-orm@3.2.6.RELEASE",
        "org.springframework:spring-tx@3.2.6.RELEASE",
        "org.springframework:spring-core@3.2.6.RELEASE"
      ],
      "upgradePath": [
        false,
        false,
        "org.springframework:spring-orm@3.2.9.RELEASE",
        "org.springframework:spring-tx@3.2.9.RELEASE",
        "org.springframework:spring-core@3.2.9.RELEASE"
      ],
      "version": "3.2.6.RELEASE",
      "name": "org.springframework:spring-core",
      "isUpgradable": false,
      "isPatchable": false
    },
    {
      "title": "Directory Traversal",
      "credit": [
        "Takeshi Terada"
      ],
      "moduleName": "org.springframework:spring-core",
      "packageName": "org.springframework:spring-core",
      "mavenModuleName": {
        "groupId": "org.springframework",
        "artifactId": "spring-core"
      },
      "packageManager": "maven",
      "language": "java",
      "id": "SNYK-JAVA-ORGSPRINGFRAMEWORK-31325",
      "description": "## Overview\n[`org.springframework:spring-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22spring-core%22) provides everything you need beyond the Java language to create enterprise applications in a wide range of scenarios and architectures.\n\nAffected versions of this package are vulnerable to Directory traversal attack. It allows remote attackers to read arbitrary files via a crafted URL.\n\n## Details\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with “dot-dot-slash (../)” sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```\n\n\n## Remediation\nUpgrade `org.springframework:spring-core` to version 3.2.9, 4.0.5 or higher.\n\n## References\n- [GitHub Commit](https://github.com/spring-projects/spring-framework/commit/e3e71ba92a8b82dadf474eda76cd2741f65a77a8)\n- [Pivotal Security](https://pivotal.io/security/cve-2014-3578)\n- [Jira Issue](https://jira.spring.io/browse/SPR-12354)\n- [JVNDB](http://jvndb.jvn.jp/en/contents/2014/JVNDB-2014-000054.html)\n- [Redhat Bugzilla](https://bugzilla.redhat.com/show_bug.cgi?id=1131882)\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-3578)\n",
      "semver": {
        "vulnerable": "[3,3.2.9), [4,4.0.5)",
        "unaffected": ""
      },
      "identifiers": {
        "CWE": [
          "CWE-22"
        ],
        "CVE": [
          "CVE-2014-3578"
        ]
      },
      "severity": "medium",
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
      "creationTime": "2017-02-22T07:28:31.465Z",
      "modificationTime": "2017-05-24T07:28:31.465Z",
      "publicationTime": "2014-09-05T17:16:58.000Z",
      "disclosureTime": "2014-09-05T17:16:58.000Z",
      "cvssScore": 5.3,
      "from": [
        "io.github.snyk:todolist-web-common@1.0-SNAPSHOT",
        "io.github.snyk:todolist-core@1.0-SNAPSHOT",
        "org.springframework:spring-aspects@3.2.6.RELEASE",
        "org.springframework:spring-context-support@3.2.6.RELEASE",
        "org.springframework:spring-context@3.2.6.RELEASE",
        "org.springframework:spring-core@3.2.6.RELEASE"
      ],
      "upgradePath": [
        false,
        false,
        "org.springframework:spring-aspects@3.2.7.RELEASE"
      ],
      "version": "3.2.6.RELEASE",
      "name": "org.springframework:spring-core",
      "isUpgradable": false,
      "isPatchable": false
    },
    {
      "title": "Directory Traversal",
      "credit": [
        "Takeshi Terada"
      ],
      "moduleName": "org.springframework:spring-core",
      "packageName": "org.springframework:spring-core",
      "mavenModuleName": {
        "groupId": "org.springframework",
        "artifactId": "spring-core"
      },
      "packageManager": "maven",
      "language": "java",
      "id": "SNYK-JAVA-ORGSPRINGFRAMEWORK-31325",
      "description": "## Overview\n[`org.springframework:spring-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22spring-core%22) provides everything you need beyond the Java language to create enterprise applications in a wide range of scenarios and architectures.\n\nAffected versions of this package are vulnerable to Directory traversal attack. It allows remote attackers to read arbitrary files via a crafted URL.\n\n## Details\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with “dot-dot-slash (../)” sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```\n\n\n## Remediation\nUpgrade `org.springframework:spring-core` to version 3.2.9, 4.0.5 or higher.\n\n## References\n- [GitHub Commit](https://github.com/spring-projects/spring-framework/commit/e3e71ba92a8b82dadf474eda76cd2741f65a77a8)\n- [Pivotal Security](https://pivotal.io/security/cve-2014-3578)\n- [Jira Issue](https://jira.spring.io/browse/SPR-12354)\n- [JVNDB](http://jvndb.jvn.jp/en/contents/2014/JVNDB-2014-000054.html)\n- [Redhat Bugzilla](https://bugzilla.redhat.com/show_bug.cgi?id=1131882)\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-3578)\n",
      "semver": {
        "vulnerable": "[3,3.2.9), [4,4.0.5)",
        "unaffected": ""
      },
      "identifiers": {
        "CWE": [
          "CWE-22"
        ],
        "CVE": [
          "CVE-2014-3578"
        ]
      },
      "severity": "medium",
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
      "creationTime": "2017-02-22T07:28:31.465Z",
      "modificationTime": "2017-05-24T07:28:31.465Z",
      "publicationTime": "2014-09-05T17:16:58.000Z",
      "disclosureTime": "2014-09-05T17:16:58.000Z",
      "cvssScore": 5.3,
      "from": [
        "io.github.snyk:todolist-web-common@1.0-SNAPSHOT",
        "io.github.snyk:todolist-core@1.0-SNAPSHOT",
        "org.springframework:spring-aspects@3.2.6.RELEASE",
        "org.springframework:spring-context-support@3.2.6.RELEASE",
        "org.springframework:spring-context@3.2.6.RELEASE",
        "org.springframework:spring-aop@3.2.6.RELEASE",
        "org.springframework:spring-core@3.2.6.RELEASE"
      ],
      "upgradePath": [
        false,
        false,
        "org.springframework:spring-aspects@3.2.7.RELEASE"
      ],
      "version": "3.2.6.RELEASE",
      "name": "org.springframework:spring-core",
      "isUpgradable": false,
      "isPatchable": false
    },
    {
      "title": "Directory Traversal",
      "credit": [
        "Takeshi Terada"
      ],
      "moduleName": "org.springframework:spring-core",
      "packageName": "org.springframework:spring-core",
      "mavenModuleName": {
        "groupId": "org.springframework",
        "artifactId": "spring-core"
      },
      "packageManager": "maven",
      "language": "java",
      "id": "SNYK-JAVA-ORGSPRINGFRAMEWORK-31325",
      "description": "## Overview\n[`org.springframework:spring-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22spring-core%22) provides everything you need beyond the Java language to create enterprise applications in a wide range of scenarios and architectures.\n\nAffected versions of this package are vulnerable to Directory traversal attack. It allows remote attackers to read arbitrary files via a crafted URL.\n\n## Details\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with “dot-dot-slash (../)” sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```\n\n\n## Remediation\nUpgrade `org.springframework:spring-core` to version 3.2.9, 4.0.5 or higher.\n\n## References\n- [GitHub Commit](https://github.com/spring-projects/spring-framework/commit/e3e71ba92a8b82dadf474eda76cd2741f65a77a8)\n- [Pivotal Security](https://pivotal.io/security/cve-2014-3578)\n- [Jira Issue](https://jira.spring.io/browse/SPR-12354)\n- [JVNDB](http://jvndb.jvn.jp/en/contents/2014/JVNDB-2014-000054.html)\n- [Redhat Bugzilla](https://bugzilla.redhat.com/show_bug.cgi?id=1131882)\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-3578)\n",
      "semver": {
        "vulnerable": "[3,3.2.9), [4,4.0.5)",
        "unaffected": ""
      },
      "identifiers": {
        "CWE": [
          "CWE-22"
        ],
        "CVE": [
          "CVE-2014-3578"
        ]
      },
      "severity": "medium",
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
      "creationTime": "2017-02-22T07:28:31.465Z",
      "modificationTime": "2017-05-24T07:28:31.465Z",
      "publicationTime": "2014-09-05T17:16:58.000Z",
      "disclosureTime": "2014-09-05T17:16:58.000Z",
      "cvssScore": 5.3,
      "from": [
        "io.github.snyk:todolist-web-common@1.0-SNAPSHOT",
        "io.github.snyk:todolist-core@1.0-SNAPSHOT",
        "org.springframework:spring-aspects@3.2.6.RELEASE",
        "org.springframework:spring-context-support@3.2.6.RELEASE",
        "org.springframework:spring-context@3.2.6.RELEASE",
        "org.springframework:spring-expression@3.2.6.RELEASE",
        "org.springframework:spring-core@3.2.6.RELEASE"
      ],
      "upgradePath": [
        false,
        false,
        "org.springframework:spring-aspects@3.2.7.RELEASE"
      ],
      "version": "3.2.6.RELEASE",
      "name": "org.springframework:spring-core",
      "isUpgradable": false,
      "isPatchable": false
    }
  ],
  "dependencyCount": 38,
  "org": "kevinwright",
  "licensesPolicy": null,
  "isPrivate": true,
  "packageManager": "maven",
  "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.12.0\nignore: {}\npatch: {}\n",
  "ignoreSettings": null,
  "summary": "11 vulnerable dependency paths"
}
