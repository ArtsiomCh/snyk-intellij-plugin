[
  {
    "vulnerabilities": [
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2020-03-01T08:57:39.302078Z",
        "credit": [
          "Alikhan Uzakov"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n\n[com.googlecode.gwtupload:gwtupload-samples](https://search.maven.org/artifact/com.googlecode.gwtupload/gwtupload-samples) is a library for uploading files to web servers, showing a progress bar with real information about the process.\n\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS)\nvia a crafted filename.\n\n## Details\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\r\n\r\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \r\n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\n\nThere is no fixed version for `com.googlecode.gwtupload:gwtupload-samples`.\n\n\n## References\n\n- [GitHub Issue](https://github.com/manolo/gwtupload/issues/32)\n",
        "disclosureTime": "2020-02-28T17:41:07Z",
        "exploit": "Not Defined",
        "fixedIn": [],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-COMGOOGLECODEGWTUPLOAD-559059",
        "identifiers": {
          "CVE": [
            "CVE-2020-9447"
          ],
          "CWE": [
            "CWE-79"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "gwtupload-samples",
          "groupId": "com.googlecode.gwtupload"
        },
        "modificationTime": "2020-03-01T15:26:37.729738Z",
        "moduleName": "com.googlecode.gwtupload:gwtupload-samples",
        "packageManager": "maven",
        "packageName": "com.googlecode.gwtupload:gwtupload-samples",
        "patches": [],
        "publicationTime": "2020-02-28T17:41:07Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/manolo/gwtupload/issues/32"
          }
        ],
        "semver": {
          "vulnerable": [
            "[0,]"
          ]
        },
        "severity": "medium",
        "title": "Cross-site Scripting (XSS)",
        "from": [
          "gradle-simple@0.0.0",
          "com.googlecode.gwtupload:gwtupload-samples@0.6.6"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "io.argonaut:argonaut_2.11",
        "version": "6.1"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2020-03-01T08:57:39.302078Z",
        "credit": [
          "Alikhan Uzakov"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n\n[com.googlecode.gwtupload:gwtupload-samples](https://search.maven.org/artifact/com.googlecode.gwtupload/gwtupload-samples) is a library for uploading files to web servers, showing a progress bar with real information about the process.\n\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS)\nvia a crafted filename.\n\n## Details\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\r\n\r\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \r\n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\n\nThere is no fixed version for `com.googlecode.gwtupload:gwtupload-samples`.\n\n\n## References\n\n- [GitHub Issue](https://github.com/manolo/gwtupload/issues/32)\n",
        "disclosureTime": "2020-02-28T17:41:07Z",
        "exploit": "Not Defined",
        "fixedIn": [],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-COMGOOGLECODEGWTUPLOAD-559059",
        "identifiers": {
          "CVE": [
            "CVE-2020-9447"
          ],
          "CWE": [
            "CWE-79"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "gwtupload-samples",
          "groupId": "com.googlecode.gwtupload"
        },
        "modificationTime": "2020-03-01T15:26:37.729738Z",
        "moduleName": "com.googlecode.gwtupload:gwtupload-samples",
        "packageManager": "maven",
        "packageName": "com.googlecode.gwtupload:gwtupload-samples",
        "patches": [],
        "publicationTime": "2020-02-28T17:41:07Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/manolo/gwtupload/issues/32"
          }
        ],
        "semver": {
          "vulnerable": [
            "[0,]"
          ]
        },
        "severity": "medium",
        "title": "Cross-site Scripting (XSS)",
        "from": [
          "gradle-simple@0.0.0",
          "com.googlecode.gwtupload:gwtupload-samples@0.6.6"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "axis:axis",
        "version": "1.0"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2020-03-01T08:57:39.302078Z",
        "credit": [
          "Alikhan Uzakov"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n\n[com.googlecode.gwtupload:gwtupload-samples](https://search.maven.org/artifact/com.googlecode.gwtupload/gwtupload-samples) is a library for uploading files to web servers, showing a progress bar with real information about the process.\n\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS)\nvia a crafted filename.\n\n## Details\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\r\n\r\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \r\n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\n\nThere is no fixed version for `com.googlecode.gwtupload:gwtupload-samples`.\n\n\n## References\n\n- [GitHub Issue](https://github.com/manolo/gwtupload/issues/32)\n",
        "disclosureTime": "2020-02-28T17:41:07Z",
        "exploit": "Not Defined",
        "fixedIn": [],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-COMGOOGLECODEGWTUPLOAD-559059",
        "identifiers": {
          "CVE": [
            "CVE-2020-9447"
          ],
          "CWE": [
            "CWE-79"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "gwtupload-samples",
          "groupId": "com.googlecode.gwtupload"
        },
        "modificationTime": "2020-03-01T15:26:37.729738Z",
        "moduleName": "com.googlecode.gwtupload:gwtupload-samples",
        "packageManager": "maven",
        "packageName": "com.googlecode.gwtupload:gwtupload-samples",
        "patches": [],
        "publicationTime": "2020-02-28T17:41:07Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/manolo/gwtupload/issues/32"
          }
        ],
        "semver": {
          "vulnerable": [
            "[0,]"
          ]
        },
        "severity": "medium",
        "title": "Cross-site Scripting (XSS)",
        "from": [
          "gradle-simple@0.0.0",
          "com.googlecode.gwtupload:gwtupload-samples@0.6.6"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "org.cryptacular:cryptacular",
        "version": "1.2.4"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2020-03-01T08:57:39.302078Z",
        "credit": [
          "Alikhan Uzakov"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n\n[com.googlecode.gwtupload:gwtupload-samples](https://search.maven.org/artifact/com.googlecode.gwtupload/gwtupload-samples) is a library for uploading files to web servers, showing a progress bar with real information about the process.\n\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS)\nvia a crafted filename.\n\n## Details\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\r\n\r\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \r\n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\n\nThere is no fixed version for `com.googlecode.gwtupload:gwtupload-samples`.\n\n\n## References\n\n- [GitHub Issue](https://github.com/manolo/gwtupload/issues/32)\n",
        "disclosureTime": "2020-02-28T17:41:07Z",
        "exploit": "Not Defined",
        "fixedIn": [],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-COMGOOGLECODEGWTUPLOAD-559059",
        "identifiers": {
          "CVE": [
            "CVE-2020-9447"
          ],
          "CWE": [
            "CWE-79"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "gwtupload-samples",
          "groupId": "com.googlecode.gwtupload"
        },
        "modificationTime": "2020-03-01T15:26:37.729738Z",
        "moduleName": "com.googlecode.gwtupload:gwtupload-samples",
        "packageManager": "maven",
        "packageName": "com.googlecode.gwtupload:gwtupload-samples",
        "patches": [],
        "publicationTime": "2020-02-28T17:41:07Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/manolo/gwtupload/issues/32"
          }
        ],
        "semver": {
          "vulnerable": [
            "[0,]"
          ]
        },
        "severity": "medium",
        "title": "Cross-site Scripting (XSS)",
        "from": [
          "gradle-simple@0.0.0",
          "com.googlecode.gwtupload:gwtupload-samples@0.6.6"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "io.netty:netty-all",
        "version": "4.1.44.Final"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2020-03-01T08:57:39.302078Z",
        "credit": [
          "Alikhan Uzakov"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n\n[com.googlecode.gwtupload:gwtupload-samples](https://search.maven.org/artifact/com.googlecode.gwtupload/gwtupload-samples) is a library for uploading files to web servers, showing a progress bar with real information about the process.\n\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS)\nvia a crafted filename.\n\n## Details\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\r\n\r\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \r\n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\n\nThere is no fixed version for `com.googlecode.gwtupload:gwtupload-samples`.\n\n\n## References\n\n- [GitHub Issue](https://github.com/manolo/gwtupload/issues/32)\n",
        "disclosureTime": "2020-02-28T17:41:07Z",
        "exploit": "Not Defined",
        "fixedIn": [],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-COMGOOGLECODEGWTUPLOAD-559059",
        "identifiers": {
          "CVE": [
            "CVE-2020-9447"
          ],
          "CWE": [
            "CWE-79"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "gwtupload-samples",
          "groupId": "com.googlecode.gwtupload"
        },
        "modificationTime": "2020-03-01T15:26:37.729738Z",
        "moduleName": "com.googlecode.gwtupload:gwtupload-samples",
        "packageManager": "maven",
        "packageName": "com.googlecode.gwtupload:gwtupload-samples",
        "patches": [],
        "publicationTime": "2020-02-28T17:41:07Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/manolo/gwtupload/issues/32"
          }
        ],
        "semver": {
          "vulnerable": [
            "[0,]"
          ]
        },
        "severity": "medium",
        "title": "Cross-site Scripting (XSS)",
        "from": [
          "gradle-simple@0.0.0",
          "com.googlecode.gwtupload:gwtupload-samples@0.6.6"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "com.itextpdf:sign",
        "version": "7.1.5"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2020-03-01T08:57:39.302078Z",
        "credit": [
          "Alikhan Uzakov"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n\n[com.googlecode.gwtupload:gwtupload-samples](https://search.maven.org/artifact/com.googlecode.gwtupload/gwtupload-samples) is a library for uploading files to web servers, showing a progress bar with real information about the process.\n\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS)\nvia a crafted filename.\n\n## Details\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\r\n\r\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \r\n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\n\nThere is no fixed version for `com.googlecode.gwtupload:gwtupload-samples`.\n\n\n## References\n\n- [GitHub Issue](https://github.com/manolo/gwtupload/issues/32)\n",
        "disclosureTime": "2020-02-28T17:41:07Z",
        "exploit": "Not Defined",
        "fixedIn": [],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-COMGOOGLECODEGWTUPLOAD-559059",
        "identifiers": {
          "CVE": [
            "CVE-2020-9447"
          ],
          "CWE": [
            "CWE-79"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "gwtupload-samples",
          "groupId": "com.googlecode.gwtupload"
        },
        "modificationTime": "2020-03-01T15:26:37.729738Z",
        "moduleName": "com.googlecode.gwtupload:gwtupload-samples",
        "packageManager": "maven",
        "packageName": "com.googlecode.gwtupload:gwtupload-samples",
        "patches": [],
        "publicationTime": "2020-02-28T17:41:07Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/manolo/gwtupload/issues/32"
          }
        ],
        "semver": {
          "vulnerable": [
            "[0,]"
          ]
        },
        "severity": "medium",
        "title": "Cross-site Scripting (XSS)",
        "from": [
          "gradle-simple@0.0.0",
          "com.googlecode.gwtupload:gwtupload-samples@0.6.6"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "org.apache.geode:geode-core",
        "version": "1.10.0"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2020-03-01T08:57:39.302078Z",
        "credit": [
          "Alikhan Uzakov"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n\n[com.googlecode.gwtupload:gwtupload-samples](https://search.maven.org/artifact/com.googlecode.gwtupload/gwtupload-samples) is a library for uploading files to web servers, showing a progress bar with real information about the process.\n\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS)\nvia a crafted filename.\n\n## Details\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\r\n\r\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \r\n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\n\nThere is no fixed version for `com.googlecode.gwtupload:gwtupload-samples`.\n\n\n## References\n\n- [GitHub Issue](https://github.com/manolo/gwtupload/issues/32)\n",
        "disclosureTime": "2020-02-28T17:41:07Z",
        "exploit": "Not Defined",
        "fixedIn": [],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-COMGOOGLECODEGWTUPLOAD-559059",
        "identifiers": {
          "CVE": [
            "CVE-2020-9447"
          ],
          "CWE": [
            "CWE-79"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "gwtupload-samples",
          "groupId": "com.googlecode.gwtupload"
        },
        "modificationTime": "2020-03-01T15:26:37.729738Z",
        "moduleName": "com.googlecode.gwtupload:gwtupload-samples",
        "packageManager": "maven",
        "packageName": "com.googlecode.gwtupload:gwtupload-samples",
        "patches": [],
        "publicationTime": "2020-02-28T17:41:07Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/manolo/gwtupload/issues/32"
          }
        ],
        "semver": {
          "vulnerable": [
            "[0,]"
          ]
        },
        "severity": "medium",
        "title": "Cross-site Scripting (XSS)",
        "from": [
          "gradle-simple@0.0.0",
          "com.googlecode.gwtupload:gwtupload-samples@0.6.6"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "com.googlecode.gwtupload:gwtupload-samples",
        "version": "0.6.6"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:H/E:U/RL:O/RC:R",
        "alternativeIds": [],
        "creationTime": "2020-01-09T16:27:43.027661Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n\n[com.itextpdf:kernel](https://itextpdf.com/en/products/itext-7/itext-7-community) is a software developer toolkit that allows users to integrate PDF functionalities within their applications, processes or products.\n\n\nAffected versions of this package are vulnerable to Denial of Service (DoS)\nthrough decompression bombs from a passed pdf stream.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## Remediation\n\nUpgrade `com.itextpdf:kernel` to version 7.1.7 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/itext/itext7/commit/696df736f8c4c6385dae5c4eff22163d5eca29b6)\n\n- [GitHub Commit](https://github.com/itext/itext7-dotnet/commit/a7eb0f0338c5bdcd056cf95a9b7f2eda496c17e8)\n\n- [GitHub Commit](https://github.com/itext/itextsharp/commit/533b325e39a759173105a45ab913e4274035a338)\n",
        "disclosureTime": "2019-06-11T16:22:34Z",
        "exploit": "Unproven",
        "fixedIn": [
          "7.1.7"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-COMITEXTPDF-541282",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-189"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "kernel",
          "groupId": "com.itextpdf"
        },
        "modificationTime": "2020-01-09T18:06:21.877034Z",
        "moduleName": "com.itextpdf:kernel",
        "packageManager": "maven",
        "packageName": "com.itextpdf:kernel",
        "patches": [],
        "publicationTime": "2020-01-09T16:14:15Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/itext/itext7/commit/696df736f8c4c6385dae5c4eff22163d5eca29b6"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/itext/itext7-dotnet/commit/a7eb0f0338c5bdcd056cf95a9b7f2eda496c17e8"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/itext/itextsharp/commit/533b325e39a759173105a45ab913e4274035a338"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,7.1.7)"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "gradle-simple@0.0.0",
          "com.itextpdf:sign@7.1.5",
          "com.itextpdf:kernel@7.1.5"
        ],
        "upgradePath": [
          false,
          "com.itextpdf:sign@7.1.7",
          "com.itextpdf:kernel@7.1.7"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "com.itextpdf:kernel",
        "version": "7.1.5"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:H/E:U/RL:O/RC:R",
        "alternativeIds": [],
        "creationTime": "2020-01-09T16:27:43.027661Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n\n[com.itextpdf:kernel](https://itextpdf.com/en/products/itext-7/itext-7-community) is a software developer toolkit that allows users to integrate PDF functionalities within their applications, processes or products.\n\n\nAffected versions of this package are vulnerable to Denial of Service (DoS)\nthrough decompression bombs from a passed pdf stream.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## Remediation\n\nUpgrade `com.itextpdf:kernel` to version 7.1.7 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/itext/itext7/commit/696df736f8c4c6385dae5c4eff22163d5eca29b6)\n\n- [GitHub Commit](https://github.com/itext/itext7-dotnet/commit/a7eb0f0338c5bdcd056cf95a9b7f2eda496c17e8)\n\n- [GitHub Commit](https://github.com/itext/itextsharp/commit/533b325e39a759173105a45ab913e4274035a338)\n",
        "disclosureTime": "2019-06-11T16:22:34Z",
        "exploit": "Unproven",
        "fixedIn": [
          "7.1.7"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-COMITEXTPDF-541282",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-189"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "kernel",
          "groupId": "com.itextpdf"
        },
        "modificationTime": "2020-01-09T18:06:21.877034Z",
        "moduleName": "com.itextpdf:kernel",
        "packageManager": "maven",
        "packageName": "com.itextpdf:kernel",
        "patches": [],
        "publicationTime": "2020-01-09T16:14:15Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/itext/itext7/commit/696df736f8c4c6385dae5c4eff22163d5eca29b6"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/itext/itext7-dotnet/commit/a7eb0f0338c5bdcd056cf95a9b7f2eda496c17e8"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/itext/itextsharp/commit/533b325e39a759173105a45ab913e4274035a338"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,7.1.7)"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "gradle-simple@0.0.0",
          "com.itextpdf:sign@7.1.5",
          "com.itextpdf:layout@7.1.5",
          "com.itextpdf:kernel@7.1.5"
        ],
        "upgradePath": [
          false,
          "com.itextpdf:sign@7.1.7",
          "com.itextpdf:layout@7.1.7",
          "com.itextpdf:kernel@7.1.7"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "com.itextpdf:kernel",
        "version": "7.1.5"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:H/E:U/RL:O/RC:R",
        "alternativeIds": [],
        "creationTime": "2020-01-09T16:27:43.027661Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n\n[com.itextpdf:kernel](https://itextpdf.com/en/products/itext-7/itext-7-community) is a software developer toolkit that allows users to integrate PDF functionalities within their applications, processes or products.\n\n\nAffected versions of this package are vulnerable to Denial of Service (DoS)\nthrough decompression bombs from a passed pdf stream.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## Remediation\n\nUpgrade `com.itextpdf:kernel` to version 7.1.7 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/itext/itext7/commit/696df736f8c4c6385dae5c4eff22163d5eca29b6)\n\n- [GitHub Commit](https://github.com/itext/itext7-dotnet/commit/a7eb0f0338c5bdcd056cf95a9b7f2eda496c17e8)\n\n- [GitHub Commit](https://github.com/itext/itextsharp/commit/533b325e39a759173105a45ab913e4274035a338)\n",
        "disclosureTime": "2019-06-11T16:22:34Z",
        "exploit": "Unproven",
        "fixedIn": [
          "7.1.7"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-COMITEXTPDF-541282",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-189"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "kernel",
          "groupId": "com.itextpdf"
        },
        "modificationTime": "2020-01-09T18:06:21.877034Z",
        "moduleName": "com.itextpdf:kernel",
        "packageManager": "maven",
        "packageName": "com.itextpdf:kernel",
        "patches": [],
        "publicationTime": "2020-01-09T16:14:15Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/itext/itext7/commit/696df736f8c4c6385dae5c4eff22163d5eca29b6"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/itext/itext7-dotnet/commit/a7eb0f0338c5bdcd056cf95a9b7f2eda496c17e8"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/itext/itextsharp/commit/533b325e39a759173105a45ab913e4274035a338"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,7.1.7)"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "gradle-simple@0.0.0",
          "com.itextpdf:sign@7.1.5",
          "com.itextpdf:forms@7.1.5",
          "com.itextpdf:kernel@7.1.5"
        ],
        "upgradePath": [
          false,
          "com.itextpdf:sign@7.1.7",
          "com.itextpdf:forms@7.1.7",
          "com.itextpdf:kernel@7.1.7"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "com.itextpdf:kernel",
        "version": "7.1.5"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:H/E:U/RL:O/RC:R",
        "alternativeIds": [],
        "creationTime": "2020-01-09T16:27:43.027661Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n\n[com.itextpdf:kernel](https://itextpdf.com/en/products/itext-7/itext-7-community) is a software developer toolkit that allows users to integrate PDF functionalities within their applications, processes or products.\n\n\nAffected versions of this package are vulnerable to Denial of Service (DoS)\nthrough decompression bombs from a passed pdf stream.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## Remediation\n\nUpgrade `com.itextpdf:kernel` to version 7.1.7 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/itext/itext7/commit/696df736f8c4c6385dae5c4eff22163d5eca29b6)\n\n- [GitHub Commit](https://github.com/itext/itext7-dotnet/commit/a7eb0f0338c5bdcd056cf95a9b7f2eda496c17e8)\n\n- [GitHub Commit](https://github.com/itext/itextsharp/commit/533b325e39a759173105a45ab913e4274035a338)\n",
        "disclosureTime": "2019-06-11T16:22:34Z",
        "exploit": "Unproven",
        "fixedIn": [
          "7.1.7"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-COMITEXTPDF-541282",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-189"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "kernel",
          "groupId": "com.itextpdf"
        },
        "modificationTime": "2020-01-09T18:06:21.877034Z",
        "moduleName": "com.itextpdf:kernel",
        "packageManager": "maven",
        "packageName": "com.itextpdf:kernel",
        "patches": [],
        "publicationTime": "2020-01-09T16:14:15Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/itext/itext7/commit/696df736f8c4c6385dae5c4eff22163d5eca29b6"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/itext/itext7-dotnet/commit/a7eb0f0338c5bdcd056cf95a9b7f2eda496c17e8"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/itext/itextsharp/commit/533b325e39a759173105a45ab913e4274035a338"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,7.1.7)"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "gradle-simple@0.0.0",
          "com.itextpdf:sign@7.1.5",
          "com.itextpdf:pdfa@7.1.5",
          "com.itextpdf:kernel@7.1.5"
        ],
        "upgradePath": [
          false,
          "com.itextpdf:sign@7.1.7",
          "com.itextpdf:pdfa@7.1.7",
          "com.itextpdf:kernel@7.1.7"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "com.itextpdf:kernel",
        "version": "7.1.5"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:H/E:U/RL:O/RC:R",
        "alternativeIds": [],
        "creationTime": "2020-01-09T16:27:43.027661Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n\n[com.itextpdf:kernel](https://itextpdf.com/en/products/itext-7/itext-7-community) is a software developer toolkit that allows users to integrate PDF functionalities within their applications, processes or products.\n\n\nAffected versions of this package are vulnerable to Denial of Service (DoS)\nthrough decompression bombs from a passed pdf stream.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## Remediation\n\nUpgrade `com.itextpdf:kernel` to version 7.1.7 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/itext/itext7/commit/696df736f8c4c6385dae5c4eff22163d5eca29b6)\n\n- [GitHub Commit](https://github.com/itext/itext7-dotnet/commit/a7eb0f0338c5bdcd056cf95a9b7f2eda496c17e8)\n\n- [GitHub Commit](https://github.com/itext/itextsharp/commit/533b325e39a759173105a45ab913e4274035a338)\n",
        "disclosureTime": "2019-06-11T16:22:34Z",
        "exploit": "Unproven",
        "fixedIn": [
          "7.1.7"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-COMITEXTPDF-541282",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-189"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "kernel",
          "groupId": "com.itextpdf"
        },
        "modificationTime": "2020-01-09T18:06:21.877034Z",
        "moduleName": "com.itextpdf:kernel",
        "packageManager": "maven",
        "packageName": "com.itextpdf:kernel",
        "patches": [],
        "publicationTime": "2020-01-09T16:14:15Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/itext/itext7/commit/696df736f8c4c6385dae5c4eff22163d5eca29b6"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/itext/itext7-dotnet/commit/a7eb0f0338c5bdcd056cf95a9b7f2eda496c17e8"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/itext/itextsharp/commit/533b325e39a759173105a45ab913e4274035a338"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,7.1.7)"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "gradle-simple@0.0.0",
          "com.itextpdf:sign@7.1.5",
          "com.itextpdf:forms@7.1.5",
          "com.itextpdf:layout@7.1.5",
          "com.itextpdf:kernel@7.1.5"
        ],
        "upgradePath": [
          false,
          "com.itextpdf:sign@7.1.7",
          "com.itextpdf:forms@7.1.7",
          "com.itextpdf:layout@7.1.7",
          "com.itextpdf:kernel@7.1.7"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "com.itextpdf:kernel",
        "version": "7.1.5"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:H",
        "alternativeIds": [],
        "creationTime": "2019-08-21T16:11:11.406094Z",
        "credit": [
          "Rob Tompkins"
        ],
        "cvssScore": 7,
        "description": "## Overview\n\n[commons-beanutils:commons-beanutils](https://mvnrepository.com/artifact/commons-beanutils/commons-beanutils) is a provides an easy-to-use but flexible wrapper around reflection and introspection.\n\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\nIn Apache Commons Beanutils 1.9.2, a special `BeanIntrospector` class was added which allows suppressing the ability for an attacker to access the `classloader` via the `class` property available on all Java objects. This was not enabled by default and was therefore an incomplete fix for [CVE-2014-0114](https://snyk.io/vuln/SNYK-JAVA-COMMONSBEANUTILS-30077).\n\n## Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\n\n\n## Remediation\n\nUpgrade `commons-beanutils:commons-beanutils` to version 1.9.4 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/apache/commons-beanutils/commit/62e82ad92cf4818709d6044aaf257b73d42659a4)\n\n- [Mail Archives (Apache.org)](http://mail-archives.apache.org/mod_mbox/www-announce/201908.mbox/%3cC628798F-315D-4428-8CB1-4ED1ECC958E4@apache.org%3e)\n",
        "disclosureTime": "2019-08-20T22:18:37Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "1.9.4"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-COMMONSBEANUTILS-460111",
        "identifiers": {
          "CVE": [
            "CVE-2019-10086"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "commons-beanutils",
          "groupId": "commons-beanutils"
        },
        "modificationTime": "2019-08-21T16:11:31.495703Z",
        "moduleName": "commons-beanutils:commons-beanutils",
        "packageManager": "maven",
        "packageName": "commons-beanutils:commons-beanutils",
        "patches": [],
        "publicationTime": "2019-08-20T22:18:37Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/apache/commons-beanutils/commit/62e82ad92cf4818709d6044aaf257b73d42659a4"
          },
          {
            "title": "Mail Archives (Apache.org)",
            "url": "http://mail-archives.apache.org/mod_mbox/www-announce/201908.mbox/%3cC628798F-315D-4428-8CB1-4ED1ECC958E4@apache.org%3e"
          }
        ],
        "semver": {
          "vulnerable": [
            "[1.9.2,1.9.4)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "gradle-simple@0.0.0",
          "org.apache.geode:geode-core@1.10.0",
          "commons-validator:commons-validator@1.6",
          "commons-beanutils:commons-beanutils@1.9.3"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "commons-beanutils:commons-beanutils",
        "version": "1.9.3"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:H",
        "alternativeIds": [],
        "creationTime": "2019-08-21T16:11:11.406094Z",
        "credit": [
          "Rob Tompkins"
        ],
        "cvssScore": 7,
        "description": "## Overview\n\n[commons-beanutils:commons-beanutils](https://mvnrepository.com/artifact/commons-beanutils/commons-beanutils) is a provides an easy-to-use but flexible wrapper around reflection and introspection.\n\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\nIn Apache Commons Beanutils 1.9.2, a special `BeanIntrospector` class was added which allows suppressing the ability for an attacker to access the `classloader` via the `class` property available on all Java objects. This was not enabled by default and was therefore an incomplete fix for [CVE-2014-0114](https://snyk.io/vuln/SNYK-JAVA-COMMONSBEANUTILS-30077).\n\n## Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\n\n\n## Remediation\n\nUpgrade `commons-beanutils:commons-beanutils` to version 1.9.4 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/apache/commons-beanutils/commit/62e82ad92cf4818709d6044aaf257b73d42659a4)\n\n- [Mail Archives (Apache.org)](http://mail-archives.apache.org/mod_mbox/www-announce/201908.mbox/%3cC628798F-315D-4428-8CB1-4ED1ECC958E4@apache.org%3e)\n",
        "disclosureTime": "2019-08-20T22:18:37Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "1.9.4"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-COMMONSBEANUTILS-460111",
        "identifiers": {
          "CVE": [
            "CVE-2019-10086"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "commons-beanutils",
          "groupId": "commons-beanutils"
        },
        "modificationTime": "2019-08-21T16:11:31.495703Z",
        "moduleName": "commons-beanutils:commons-beanutils",
        "packageManager": "maven",
        "packageName": "commons-beanutils:commons-beanutils",
        "patches": [],
        "publicationTime": "2019-08-20T22:18:37Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/apache/commons-beanutils/commit/62e82ad92cf4818709d6044aaf257b73d42659a4"
          },
          {
            "title": "Mail Archives (Apache.org)",
            "url": "http://mail-archives.apache.org/mod_mbox/www-announce/201908.mbox/%3cC628798F-315D-4428-8CB1-4ED1ECC958E4@apache.org%3e"
          }
        ],
        "semver": {
          "vulnerable": [
            "[1.9.2,1.9.4)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "gradle-simple@0.0.0",
          "org.apache.geode:geode-core@1.10.0",
          "org.apache.shiro:shiro-core@1.4.0",
          "org.apache.shiro:shiro-config-ogdl@1.4.0",
          "commons-beanutils:commons-beanutils@1.9.3"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "commons-beanutils:commons-beanutils",
        "version": "1.9.3"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:L",
        "alternativeIds": [],
        "creationTime": "2016-12-25T16:51:47Z",
        "credit": [
          "Karl Dyszynski",
          "Hugo Vazquez Carames"
        ],
        "cvssScore": 4.4,
        "description": "## Overview\n\n[commons-fileupload:commons-fileupload](https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload) is a component that provides a simple yet flexible means of adding support for multipart file upload functionality to servlets and web applications.\n\n\nAffected versions of this package are vulnerable to Time of Check Time of Use (TOCTOU)\nif the attacker has write access to the /tmp directory.\r\n\r\n## Details\r\nCommons FileUpload provides file upload capability for Servlets and web applications. During the upload process, FileUpload may (depending on configuration) save the uploaded file temporarily on disk. By default this will be in the system wide tmp directory. Because the temporary files have predictable file names and are stored in a publicly writeable location they are vulnerable to a TOCTOU attack.\r\n\r\nA successful attack requires that the attacker has write access to the tmp directory. The attack can be prevented by setting the repository to a non-publicly writeable location. The documentation for FileUpload does not highlight the potential security implications of not setting a repository, nor do the provided examples set a repository. This may have caused users to use FileUpload in an insecure manner.\n\n## Remediation\n\nUpgrade `commons-fileupload:commons-fileupload` to version 1.3 or higher.\n\n\n## References\n\n- [Commons-user Mailing List](http://mail-archives.apache.org/mod_mbox/commons-user/201303.mbox/%3C51371C31.8020805@apache.org%3E)\n\n- [Github ChangeLog](https://github.com/apache/commons-fileupload/blob/b1498c9877d751f8bc4635a6f252ebdfcba28518/src/changes/changes.xml#L114)\n\n- [GitHub Commit](https://github.com/apache/commons-fileupload/commit/7d9e956627a3803c1fc5734e2b18113a033e6f60)\n\n- [Redhat Bugzilla](https://bugzilla.redhat.com/CVE-2013-0248)\n",
        "disclosureTime": "2013-03-15T20:55:00Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "1.3"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-COMMONSFILEUPLOAD-30079",
        "identifiers": {
          "CVE": [
            "CVE-2013-0248"
          ],
          "CWE": [
            "CWE-264"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "commons-fileupload",
          "groupId": "commons-fileupload"
        },
        "modificationTime": "2019-10-28T11:45:58.032128Z",
        "moduleName": "commons-fileupload:commons-fileupload",
        "packageManager": "maven",
        "packageName": "commons-fileupload:commons-fileupload",
        "patches": [],
        "publicationTime": "2015-05-06T16:51:47Z",
        "references": [
          {
            "title": "Commons-user Mailing List",
            "url": "http://mail-archives.apache.org/mod_mbox/commons-user/201303.mbox/%3C51371C31.8020805@apache.org%3E"
          },
          {
            "title": "Github ChangeLog",
            "url": "https://github.com/apache/commons-fileupload/blob/b1498c9877d751f8bc4635a6f252ebdfcba28518/src/changes/changes.xml%23L114"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/apache/commons-fileupload/commit/7d9e956627a3803c1fc5734e2b18113a033e6f60"
          },
          {
            "title": "Redhat Bugzilla",
            "url": "https://bugzilla.redhat.com/CVE-2013-0248"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,1.3)"
          ]
        },
        "severity": "medium",
        "title": "Time of Check Time of Use (TOCTOU)",
        "from": [
          "gradle-simple@0.0.0",
          "com.googlecode.gwtupload:gwtupload-samples@0.6.6",
          "commons-fileupload:commons-fileupload@1.2.1"
        ],
        "upgradePath": [
          false,
          "com.googlecode.gwtupload:gwtupload-samples@0.6.6"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "commons-fileupload:commons-fileupload",
        "version": "1.2.1"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
        "alternativeIds": [],
        "creationTime": "2016-12-25T16:51:48Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n[`commons-fileupload:commons-fileupload`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22commons-fileupload%22)\nAffected versions of this package are vulnerable to Arbitrary File Write.\n\n## Details\nThe DiskFileItem class in Apache Commons FileUpload, as used in Red Hat JBoss BRMS 5.3.1; JBoss Portal 4.3 CP07, 5.2.2, and 6.0.0; and Red Hat JBoss Web Server 1.0.2 allows remote attackers to write to arbitrary files via a NULL byte in a file name in a serialized instance.\n\n## References\n- [Redhat Security Advisory](https://access.redhat.com/security/cve/CVE-2013-2186)\n- [Redhat Bugzilla](https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2013-2186)\n",
        "disclosureTime": "2013-06-16T16:51:48Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "1.3.1"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-COMMONSFILEUPLOAD-30080",
        "identifiers": {
          "CVE": [
            "CVE-2013-2186"
          ],
          "CWE": [
            "CWE-20"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "commons-fileupload",
          "groupId": "commons-fileupload"
        },
        "modificationTime": "2019-06-02T07:36:40.934521Z",
        "moduleName": "commons-fileupload:commons-fileupload",
        "packageManager": "maven",
        "packageName": "commons-fileupload:commons-fileupload",
        "patches": [],
        "publicationTime": "2013-06-16T16:51:48Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/apache/commons-fileupload/commit/163a6061fbc077d4b6e4787d26857c2baba495d1"
          },
          {
            "title": "RedHat Bugzilla Bug",
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2013-2186"
          },
          {
            "title": "RedHat CVE Database",
            "url": "https://access.redhat.com/security/cve/CVE-2013-2186"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,1.3.1)"
          ]
        },
        "severity": "high",
        "title": "Arbitrary File Write",
        "from": [
          "gradle-simple@0.0.0",
          "com.googlecode.gwtupload:gwtupload-samples@0.6.6",
          "commons-fileupload:commons-fileupload@1.2.1"
        ],
        "upgradePath": [
          false,
          "com.googlecode.gwtupload:gwtupload-samples@0.6.6"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "commons-fileupload:commons-fileupload",
        "version": "1.2.1"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
        "alternativeIds": [],
        "creationTime": "2016-12-25T16:51:51Z",
        "credit": [
          "Mark Thomas"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n[`commons-fileupload:commons-fileupload`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22commons-fileupload%22)\nAffected versions of this package are vulnerable to Denial of Service (DoS) attacks. An attacker may send a specially crafted `Content-Type` header that bypasses a loop's intended exit conditions, causing an infinite loop and high CPU consumption.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## References\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0050)\n- [Github ChangeLog](https://github.com/apache/commons-fileupload/blob/master/src/changes/changes.xml#L90)\n- [Oren Hafif Blog](http://blog.spiderlabs.com/2014/02/cve-2014-0050-exploit-with-boundaries-loops-without-boundaries.html)\n- [Apache-SVN](http://svn.apache.org/viewvc?view=revision&revision=1565143)\n- [Apache Mailing list archives](http://mail-archives.apache.org/mod_mbox/www-announce/201402.mbox/%3C52F373FC.9030907@apache.org%3E)\n- [Issue documentation](http://struts.apache.org/docs/s2-020.html)\n",
        "disclosureTime": "2014-02-11T16:51:51Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "1.3.1"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-COMMONSFILEUPLOAD-30081",
        "identifiers": {
          "CVE": [
            "CVE-2014-0050"
          ],
          "CWE": [
            "CWE-264"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "commons-fileupload",
          "groupId": "commons-fileupload"
        },
        "modificationTime": "2019-06-02T07:36:41.637272Z",
        "moduleName": "commons-fileupload:commons-fileupload",
        "packageManager": "maven",
        "packageName": "commons-fileupload:commons-fileupload",
        "patches": [],
        "publicationTime": "2014-02-11T16:51:51Z",
        "references": [
          {
            "title": "Apache Mailing list archives",
            "url": "http://mail-archives.apache.org/mod_mbox/www-announce/201402.mbox/%3C52F373FC.9030907@apache.org%3E"
          },
          {
            "title": "Apache-SVN",
            "url": "http://svn.apache.org/viewvc?view=revision&revision=1565143"
          },
          {
            "title": "Exploit DB",
            "url": "https://www.exploit-db.com/exploits/31615"
          },
          {
            "title": "Github ChangeLog",
            "url": "https://github.com/apache/commons-fileupload/blob/master/src/changes/changes.xml%23L90"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/apache/commons-fileupload/commit/c61ff05b3241cb14d989b67209e57aa71540417a"
          },
          {
            "title": "Issue documentation",
            "url": "http://struts.apache.org/docs/s2-020.html"
          },
          {
            "title": "NVD",
            "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0050"
          },
          {
            "title": "Oren Hafif Blog",
            "url": "http://blog.spiderlabs.com/2014/02/cve-2014-0050-exploit-with-boundaries-loops-without-boundaries.html"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,1.3.1)"
          ]
        },
        "severity": "high",
        "title": "Denial of Service (DoS)",
        "from": [
          "gradle-simple@0.0.0",
          "com.googlecode.gwtupload:gwtupload-samples@0.6.6",
          "commons-fileupload:commons-fileupload@1.2.1"
        ],
        "upgradePath": [
          false,
          "com.googlecode.gwtupload:gwtupload-samples@0.6.6"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "commons-fileupload:commons-fileupload",
        "version": "1.2.1"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2017-02-22T07:28:18.753000Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\n[`commons-fileupload:commons-fileupload`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22commons-fileupload%22)\nThe Apache Commons FileUpload library contains a Java Object that, upon deserialization, can be manipulated to write or copy files in arbitrary locations. If integrated with [`ysoserial`](https://github.com/frohoff/ysoserial), it is possible to upload and execute binaries in a single deserialization call.\n\n# Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n- Apache Blog\n\n## Remediation\nUpgrade `commons-fileupload` to version 1.3.3 or higher.\n\n\n## References\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-1000031)\n- [Tenable Security](http://www.tenable.com/security/research/tra-2016-12)\n- [Github ChangeLog](https://github.com/apache/commons-fileupload/blob/master/src/changes/changes.xml#L65)\n- [Github Commit](https://github.com/apache/commons-fileupload/commit/388e824518697c2c8f9f83fd964621d9c2f8fc4c)\n",
        "disclosureTime": "2016-10-25T14:29:00Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "1.3.3"
        ],
        "functions": [
          {
            "functionId": {
              "className": "DiskFileItem",
              "filePath": "org/apache/commons/fileupload/disk/DiskFileItem.java",
              "functionName": "readObject"
            },
            "version": [
              "[1.1,1.3.3)"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "className": "org.apache.commons.fileupload.disk.DiskFileItem",
              "functionName": "readObject"
            },
            "version": [
              "[1.1,1.3.3)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMMONSFILEUPLOAD-30401",
        "identifiers": {
          "CVE": [
            "CVE-2016-1000031"
          ],
          "CWE": [
            "CWE-284"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "commons-fileupload",
          "groupId": "commons-fileupload"
        },
        "modificationTime": "2019-06-02T07:36:59.369724Z",
        "moduleName": "commons-fileupload:commons-fileupload",
        "packageManager": "maven",
        "packageName": "commons-fileupload:commons-fileupload",
        "patches": [],
        "publicationTime": "2016-10-26T03:04:11.895000Z",
        "references": [
          {
            "title": "Github ChangeLog",
            "url": "https://github.com/apache/commons-fileupload/blob/master/src/changes/changes.xml%23L65"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/apache/commons-fileupload/commit/388e824518697c2c8f9f83fd964621d9c2f8fc4c"
          },
          {
            "title": "NVD",
            "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-1000031"
          },
          {
            "title": "Tenable Security",
            "url": "http://www.tenable.com/security/research/tra-2016-12"
          }
        ],
        "semver": {
          "vulnerable": [
            "[1.1,1.3.3)"
          ]
        },
        "severity": "high",
        "title": "Arbitrary Code Execution",
        "from": [
          "gradle-simple@0.0.0",
          "com.googlecode.gwtupload:gwtupload-samples@0.6.6",
          "commons-fileupload:commons-fileupload@1.2.1"
        ],
        "upgradePath": [
          false,
          "com.googlecode.gwtupload:gwtupload-samples@0.6.6"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "commons-fileupload:commons-fileupload",
        "version": "1.2.1"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N",
        "alternativeIds": [],
        "creationTime": "2017-10-01T08:05:48.497000Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n[`commons-fileupload:commons-fileupload`](https://commons.apache.org/proper/commons-fileupload/) provides a simple yet flexible means of adding support for multipart file upload functionality to servlets and web applications.\n\nAffected versions of the package are vulnerable to Information Disclosure because the `InputStream` is not closed on exception.\n\n## Remediation\nUpgrade `commons-fileupload` to version 1.3.2 or higher.\n\n## References\n- [Github ChangeLog](https://github.com/apache/commons-fileupload/blob/master/src/changes/changes.xml#L56)\n- [Github Commit](https://github.com/apache/commons-fileupload/commit/5b4881d7f75f439326f54fa554a9ca7de6d60814)\n",
        "disclosureTime": "2014-02-17T22:00:00Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "1.3.2"
        ],
        "functions": [
          {
            "functionId": {
              "className": "FileUploadBase$FileItemIteratorImpl",
              "filePath": "org/apache/commons/fileupload/FileUploadBase$FileItemIteratorImpl.java",
              "functionName": "<init>"
            },
            "version": [
              "[1.2.0 ,1.3.2)"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "className": "org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl",
              "functionName": "<init>"
            },
            "version": [
              "[1.2.0 ,1.3.2)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMMONSFILEUPLOAD-31540",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-200"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "commons-fileupload",
          "groupId": "commons-fileupload"
        },
        "modificationTime": "2019-03-20T14:28:31.441873Z",
        "moduleName": "commons-fileupload:commons-fileupload",
        "packageManager": "maven",
        "packageName": "commons-fileupload:commons-fileupload",
        "patches": [],
        "publicationTime": "2017-02-17T08:05:48.497000Z",
        "references": [
          {
            "title": "Github ChangeLog",
            "url": "https://github.com/apache/commons-fileupload/blob/master/src/changes/changes.xml%23L56"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/apache/commons-fileupload/commit/5b4881d7f75f439326f54fa554a9ca7de6d60814"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,1.3.2)"
          ]
        },
        "severity": "medium",
        "title": "Information Exposure",
        "from": [
          "gradle-simple@0.0.0",
          "com.googlecode.gwtupload:gwtupload-samples@0.6.6",
          "commons-fileupload:commons-fileupload@1.2.1"
        ],
        "upgradePath": [
          false,
          "com.googlecode.gwtupload:gwtupload-samples@0.6.6"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "commons-fileupload:commons-fileupload",
        "version": "1.2.1"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:L",
        "alternativeIds": [],
        "creationTime": "2016-12-25T16:51:47Z",
        "credit": [
          "Karl Dyszynski",
          "Hugo Vazquez Carames"
        ],
        "cvssScore": 4.4,
        "description": "## Overview\n\n[commons-fileupload:commons-fileupload](https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload) is a component that provides a simple yet flexible means of adding support for multipart file upload functionality to servlets and web applications.\n\n\nAffected versions of this package are vulnerable to Time of Check Time of Use (TOCTOU)\nif the attacker has write access to the /tmp directory.\r\n\r\n## Details\r\nCommons FileUpload provides file upload capability for Servlets and web applications. During the upload process, FileUpload may (depending on configuration) save the uploaded file temporarily on disk. By default this will be in the system wide tmp directory. Because the temporary files have predictable file names and are stored in a publicly writeable location they are vulnerable to a TOCTOU attack.\r\n\r\nA successful attack requires that the attacker has write access to the tmp directory. The attack can be prevented by setting the repository to a non-publicly writeable location. The documentation for FileUpload does not highlight the potential security implications of not setting a repository, nor do the provided examples set a repository. This may have caused users to use FileUpload in an insecure manner.\n\n## Remediation\n\nUpgrade `commons-fileupload:commons-fileupload` to version 1.3 or higher.\n\n\n## References\n\n- [Commons-user Mailing List](http://mail-archives.apache.org/mod_mbox/commons-user/201303.mbox/%3C51371C31.8020805@apache.org%3E)\n\n- [Github ChangeLog](https://github.com/apache/commons-fileupload/blob/b1498c9877d751f8bc4635a6f252ebdfcba28518/src/changes/changes.xml#L114)\n\n- [GitHub Commit](https://github.com/apache/commons-fileupload/commit/7d9e956627a3803c1fc5734e2b18113a033e6f60)\n\n- [Redhat Bugzilla](https://bugzilla.redhat.com/CVE-2013-0248)\n",
        "disclosureTime": "2013-03-15T20:55:00Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "1.3"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-COMMONSFILEUPLOAD-30079",
        "identifiers": {
          "CVE": [
            "CVE-2013-0248"
          ],
          "CWE": [
            "CWE-264"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "commons-fileupload",
          "groupId": "commons-fileupload"
        },
        "modificationTime": "2019-10-28T11:45:58.032128Z",
        "moduleName": "commons-fileupload:commons-fileupload",
        "packageManager": "maven",
        "packageName": "commons-fileupload:commons-fileupload",
        "patches": [],
        "publicationTime": "2015-05-06T16:51:47Z",
        "references": [
          {
            "title": "Commons-user Mailing List",
            "url": "http://mail-archives.apache.org/mod_mbox/commons-user/201303.mbox/%3C51371C31.8020805@apache.org%3E"
          },
          {
            "title": "Github ChangeLog",
            "url": "https://github.com/apache/commons-fileupload/blob/b1498c9877d751f8bc4635a6f252ebdfcba28518/src/changes/changes.xml%23L114"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/apache/commons-fileupload/commit/7d9e956627a3803c1fc5734e2b18113a033e6f60"
          },
          {
            "title": "Redhat Bugzilla",
            "url": "https://bugzilla.redhat.com/CVE-2013-0248"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,1.3)"
          ]
        },
        "severity": "medium",
        "title": "Time of Check Time of Use (TOCTOU)",
        "from": [
          "gradle-simple@0.0.0",
          "com.googlecode.gwtupload:gwtupload-samples@0.6.6",
          "com.googlecode.gwtupload:gwtupload@0.6.6",
          "commons-fileupload:commons-fileupload@1.2.1"
        ],
        "upgradePath": [
          false,
          "com.googlecode.gwtupload:gwtupload-samples@1.0.1",
          "com.googlecode.gwtupload:gwtupload@1.0.1",
          "commons-fileupload:commons-fileupload@1.3.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "commons-fileupload:commons-fileupload",
        "version": "1.2.1"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
        "alternativeIds": [],
        "creationTime": "2016-12-25T16:51:48Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n[`commons-fileupload:commons-fileupload`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22commons-fileupload%22)\nAffected versions of this package are vulnerable to Arbitrary File Write.\n\n## Details\nThe DiskFileItem class in Apache Commons FileUpload, as used in Red Hat JBoss BRMS 5.3.1; JBoss Portal 4.3 CP07, 5.2.2, and 6.0.0; and Red Hat JBoss Web Server 1.0.2 allows remote attackers to write to arbitrary files via a NULL byte in a file name in a serialized instance.\n\n## References\n- [Redhat Security Advisory](https://access.redhat.com/security/cve/CVE-2013-2186)\n- [Redhat Bugzilla](https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2013-2186)\n",
        "disclosureTime": "2013-06-16T16:51:48Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "1.3.1"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-COMMONSFILEUPLOAD-30080",
        "identifiers": {
          "CVE": [
            "CVE-2013-2186"
          ],
          "CWE": [
            "CWE-20"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "commons-fileupload",
          "groupId": "commons-fileupload"
        },
        "modificationTime": "2019-06-02T07:36:40.934521Z",
        "moduleName": "commons-fileupload:commons-fileupload",
        "packageManager": "maven",
        "packageName": "commons-fileupload:commons-fileupload",
        "patches": [],
        "publicationTime": "2013-06-16T16:51:48Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/apache/commons-fileupload/commit/163a6061fbc077d4b6e4787d26857c2baba495d1"
          },
          {
            "title": "RedHat Bugzilla Bug",
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2013-2186"
          },
          {
            "title": "RedHat CVE Database",
            "url": "https://access.redhat.com/security/cve/CVE-2013-2186"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,1.3.1)"
          ]
        },
        "severity": "high",
        "title": "Arbitrary File Write",
        "from": [
          "gradle-simple@0.0.0",
          "com.googlecode.gwtupload:gwtupload-samples@0.6.6",
          "com.googlecode.gwtupload:gwtupload@0.6.6",
          "commons-fileupload:commons-fileupload@1.2.1"
        ],
        "upgradePath": [
          false,
          "com.googlecode.gwtupload:gwtupload-samples@1.0.1",
          "com.googlecode.gwtupload:gwtupload@1.0.1",
          "commons-fileupload:commons-fileupload@1.3.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "commons-fileupload:commons-fileupload",
        "version": "1.2.1"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
        "alternativeIds": [],
        "creationTime": "2016-12-25T16:51:51Z",
        "credit": [
          "Mark Thomas"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n[`commons-fileupload:commons-fileupload`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22commons-fileupload%22)\nAffected versions of this package are vulnerable to Denial of Service (DoS) attacks. An attacker may send a specially crafted `Content-Type` header that bypasses a loop's intended exit conditions, causing an infinite loop and high CPU consumption.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## References\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0050)\n- [Github ChangeLog](https://github.com/apache/commons-fileupload/blob/master/src/changes/changes.xml#L90)\n- [Oren Hafif Blog](http://blog.spiderlabs.com/2014/02/cve-2014-0050-exploit-with-boundaries-loops-without-boundaries.html)\n- [Apache-SVN](http://svn.apache.org/viewvc?view=revision&revision=1565143)\n- [Apache Mailing list archives](http://mail-archives.apache.org/mod_mbox/www-announce/201402.mbox/%3C52F373FC.9030907@apache.org%3E)\n- [Issue documentation](http://struts.apache.org/docs/s2-020.html)\n",
        "disclosureTime": "2014-02-11T16:51:51Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "1.3.1"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-COMMONSFILEUPLOAD-30081",
        "identifiers": {
          "CVE": [
            "CVE-2014-0050"
          ],
          "CWE": [
            "CWE-264"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "commons-fileupload",
          "groupId": "commons-fileupload"
        },
        "modificationTime": "2019-06-02T07:36:41.637272Z",
        "moduleName": "commons-fileupload:commons-fileupload",
        "packageManager": "maven",
        "packageName": "commons-fileupload:commons-fileupload",
        "patches": [],
        "publicationTime": "2014-02-11T16:51:51Z",
        "references": [
          {
            "title": "Apache Mailing list archives",
            "url": "http://mail-archives.apache.org/mod_mbox/www-announce/201402.mbox/%3C52F373FC.9030907@apache.org%3E"
          },
          {
            "title": "Apache-SVN",
            "url": "http://svn.apache.org/viewvc?view=revision&revision=1565143"
          },
          {
            "title": "Exploit DB",
            "url": "https://www.exploit-db.com/exploits/31615"
          },
          {
            "title": "Github ChangeLog",
            "url": "https://github.com/apache/commons-fileupload/blob/master/src/changes/changes.xml%23L90"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/apache/commons-fileupload/commit/c61ff05b3241cb14d989b67209e57aa71540417a"
          },
          {
            "title": "Issue documentation",
            "url": "http://struts.apache.org/docs/s2-020.html"
          },
          {
            "title": "NVD",
            "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0050"
          },
          {
            "title": "Oren Hafif Blog",
            "url": "http://blog.spiderlabs.com/2014/02/cve-2014-0050-exploit-with-boundaries-loops-without-boundaries.html"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,1.3.1)"
          ]
        },
        "severity": "high",
        "title": "Denial of Service (DoS)",
        "from": [
          "gradle-simple@0.0.0",
          "com.googlecode.gwtupload:gwtupload-samples@0.6.6",
          "com.googlecode.gwtupload:gwtupload@0.6.6",
          "commons-fileupload:commons-fileupload@1.2.1"
        ],
        "upgradePath": [
          false,
          "com.googlecode.gwtupload:gwtupload-samples@1.0.1",
          "com.googlecode.gwtupload:gwtupload@1.0.1",
          "commons-fileupload:commons-fileupload@1.3.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "commons-fileupload:commons-fileupload",
        "version": "1.2.1"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2017-02-22T07:28:18.753000Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\n[`commons-fileupload:commons-fileupload`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22commons-fileupload%22)\nThe Apache Commons FileUpload library contains a Java Object that, upon deserialization, can be manipulated to write or copy files in arbitrary locations. If integrated with [`ysoserial`](https://github.com/frohoff/ysoserial), it is possible to upload and execute binaries in a single deserialization call.\n\n# Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n- Apache Blog\n\n## Remediation\nUpgrade `commons-fileupload` to version 1.3.3 or higher.\n\n\n## References\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-1000031)\n- [Tenable Security](http://www.tenable.com/security/research/tra-2016-12)\n- [Github ChangeLog](https://github.com/apache/commons-fileupload/blob/master/src/changes/changes.xml#L65)\n- [Github Commit](https://github.com/apache/commons-fileupload/commit/388e824518697c2c8f9f83fd964621d9c2f8fc4c)\n",
        "disclosureTime": "2016-10-25T14:29:00Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "1.3.3"
        ],
        "functions": [
          {
            "functionId": {
              "className": "DiskFileItem",
              "filePath": "org/apache/commons/fileupload/disk/DiskFileItem.java",
              "functionName": "readObject"
            },
            "version": [
              "[1.1,1.3.3)"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "className": "org.apache.commons.fileupload.disk.DiskFileItem",
              "functionName": "readObject"
            },
            "version": [
              "[1.1,1.3.3)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMMONSFILEUPLOAD-30401",
        "identifiers": {
          "CVE": [
            "CVE-2016-1000031"
          ],
          "CWE": [
            "CWE-284"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "commons-fileupload",
          "groupId": "commons-fileupload"
        },
        "modificationTime": "2019-06-02T07:36:59.369724Z",
        "moduleName": "commons-fileupload:commons-fileupload",
        "packageManager": "maven",
        "packageName": "commons-fileupload:commons-fileupload",
        "patches": [],
        "publicationTime": "2016-10-26T03:04:11.895000Z",
        "references": [
          {
            "title": "Github ChangeLog",
            "url": "https://github.com/apache/commons-fileupload/blob/master/src/changes/changes.xml%23L65"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/apache/commons-fileupload/commit/388e824518697c2c8f9f83fd964621d9c2f8fc4c"
          },
          {
            "title": "NVD",
            "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-1000031"
          },
          {
            "title": "Tenable Security",
            "url": "http://www.tenable.com/security/research/tra-2016-12"
          }
        ],
        "semver": {
          "vulnerable": [
            "[1.1,1.3.3)"
          ]
        },
        "severity": "high",
        "title": "Arbitrary Code Execution",
        "from": [
          "gradle-simple@0.0.0",
          "com.googlecode.gwtupload:gwtupload-samples@0.6.6",
          "com.googlecode.gwtupload:gwtupload@0.6.6",
          "commons-fileupload:commons-fileupload@1.2.1"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "commons-fileupload:commons-fileupload",
        "version": "1.2.1"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N",
        "alternativeIds": [],
        "creationTime": "2017-10-01T08:05:48.497000Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n[`commons-fileupload:commons-fileupload`](https://commons.apache.org/proper/commons-fileupload/) provides a simple yet flexible means of adding support for multipart file upload functionality to servlets and web applications.\n\nAffected versions of the package are vulnerable to Information Disclosure because the `InputStream` is not closed on exception.\n\n## Remediation\nUpgrade `commons-fileupload` to version 1.3.2 or higher.\n\n## References\n- [Github ChangeLog](https://github.com/apache/commons-fileupload/blob/master/src/changes/changes.xml#L56)\n- [Github Commit](https://github.com/apache/commons-fileupload/commit/5b4881d7f75f439326f54fa554a9ca7de6d60814)\n",
        "disclosureTime": "2014-02-17T22:00:00Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "1.3.2"
        ],
        "functions": [
          {
            "functionId": {
              "className": "FileUploadBase$FileItemIteratorImpl",
              "filePath": "org/apache/commons/fileupload/FileUploadBase$FileItemIteratorImpl.java",
              "functionName": "<init>"
            },
            "version": [
              "[1.2.0 ,1.3.2)"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "className": "org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl",
              "functionName": "<init>"
            },
            "version": [
              "[1.2.0 ,1.3.2)"
            ]
          }
        ],
        "id": "SNYK-JAVA-COMMONSFILEUPLOAD-31540",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-200"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "commons-fileupload",
          "groupId": "commons-fileupload"
        },
        "modificationTime": "2019-03-20T14:28:31.441873Z",
        "moduleName": "commons-fileupload:commons-fileupload",
        "packageManager": "maven",
        "packageName": "commons-fileupload:commons-fileupload",
        "patches": [],
        "publicationTime": "2017-02-17T08:05:48.497000Z",
        "references": [
          {
            "title": "Github ChangeLog",
            "url": "https://github.com/apache/commons-fileupload/blob/master/src/changes/changes.xml%23L56"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/apache/commons-fileupload/commit/5b4881d7f75f439326f54fa554a9ca7de6d60814"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,1.3.2)"
          ]
        },
        "severity": "medium",
        "title": "Information Exposure",
        "from": [
          "gradle-simple@0.0.0",
          "com.googlecode.gwtupload:gwtupload-samples@0.6.6",
          "com.googlecode.gwtupload:gwtupload@0.6.6",
          "commons-fileupload:commons-fileupload@1.2.1"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "commons-fileupload:commons-fileupload",
        "version": "1.2.1"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2020-03-15T12:43:32.698718Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[org.apache.commons:commons-configuration2](https://mvnrepository.com/artifact/org.apache.commons/commons-configuration2/2.0) is a group of tools to assist in the reading of configuration/preferences files in various formats.\n\n\nAffected versions of this package are vulnerable to Remote Code Execution (RCE).\nIt uses a third-party library to parse YAML files (`org.yaml:snakeyaml`) which by default allows the instantiation of classes if the YAML includes special statements. Apache Commons Configuration did not change the default settings of this library. Therefore if a YAML file was loaded from an untrusted source, it could therefore load and execute code out of the control of the host application.\n\n## Remediation\n\nUpgrade `org.apache.commons:commons-configuration2` to version 2.7 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/apache/commons-configuration/commit/add7375cf37fd316d4838c6c56b054fc293b4641)\n",
        "disclosureTime": "2020-03-13T16:31:48Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "2.7"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-ORGAPACHECOMMONS-560326",
        "identifiers": {
          "CVE": [
            "CVE-2020-1953"
          ],
          "CWE": [
            "CWE-94"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "commons-configuration2",
          "groupId": "org.apache.commons"
        },
        "modificationTime": "2020-03-15T15:43:45.271601Z",
        "moduleName": "org.apache.commons:commons-configuration2",
        "packageManager": "maven",
        "packageName": "org.apache.commons:commons-configuration2",
        "patches": [],
        "publicationTime": "2020-03-15T15:43:45.538586Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/apache/commons-configuration/commit/add7375cf37fd316d4838c6c56b054fc293b4641"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.2, 2.7)"
          ]
        },
        "severity": "high",
        "title": "Remote Code Execution (RCE)",
        "from": [
          "gradle-simple@0.0.0",
          "org.apache.commons:commons-configuration2@2.2"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "org.apache.commons:commons-configuration2",
        "version": "2.2"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [],
        "creationTime": "2017-02-22T07:28:22.393000Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\r\n[`org.apache.poi:poi`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22poi%22)\r\nAffected versions of the package are vulnerable to Denial of Service (DoS). The calculation of `dataSize` in Ole10Native's initialization is faulty, causing the code to allocate a large buffer and resulting in Out-Of-Memory.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\r\n\r\n## References\r\n- [Jira Issue](https://issues.apache.org/jira/browse/TIKA-2115)\r\n- [GitHub Commit](https://github.com/apache/poi/commit/7f9f8e9afa8160ef401ec8b3416d36428e928e2f)",
        "disclosureTime": "2016-10-14T08:26:05Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "3.16-beta1"
        ],
        "functions": [
          {
            "functionId": {
              "className": "Ole10Native",
              "filePath": "org/apache/poi/poifs/filesystem/Ole10Native.java",
              "functionName": "createFromEmbeddedOleObject"
            },
            "version": [
              "[3.7.0 ,3.16-beta1)"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "className": "org.apache.poi.poifs.filesystem.Ole10Native",
              "functionName": "createFromEmbeddedOleObject"
            },
            "version": [
              "[3.7.0 ,3.16-beta1)"
            ]
          }
        ],
        "id": "SNYK-JAVA-ORGAPACHEPOI-30698",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "poi",
          "groupId": "org.apache.poi"
        },
        "modificationTime": "2019-03-26T14:38:20.556964Z",
        "moduleName": "org.apache.poi:poi",
        "packageManager": "maven",
        "packageName": "org.apache.poi:poi",
        "patches": [],
        "publicationTime": "2016-11-18T08:26:05Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/apache/poi/commit/7f9f8e9afa8160ef401ec8b3416d36428e928e2f"
          },
          {
            "title": "Jira Issue",
            "url": "https://issues.apache.org/jira/browse/TIKA-2115"
          }
        ],
        "semver": {
          "vulnerable": [
            "[3.7 ,3.16-beta1)"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "gradle-simple@0.0.0",
          "org.apache.poi:poi-ooxml@3.15",
          "org.apache.poi:poi@3.15"
        ],
        "upgradePath": [
          false,
          "org.apache.poi:poi-ooxml@3.16",
          "org.apache.poi:poi@3.16"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "org.apache.poi:poi",
        "version": "3.15"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2018-01-30T12:37:22.638000Z",
        "credit": [
          "Tim Allison"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[org.apache.poi:poi](https://mvnrepository.com/artifact/org.apache.poi/poi) is a java library for reading and writing Microsoft Office binary and OOXML file formats.\n\n\nAffected versions of this package are vulnerable to Denial of Service (DoS)\nin two possible scenarios:\r\n* Infinite Loops while parsing crafted WMF, EMF, MSG and macros.\r\n* Out of Memory Exceptions while parsing crafted DOC, PPT and XLS.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## Remediation\n\nUpgrade `org.apache.poi:poi` to version 3.17 or higher.\n\n\n## References\n\n- [Apache Security Advisory](https://lists.apache.org/thread.html/453d9af5dbabaccd9afb58d27279a9dbfe8e35f4e5ea1645ddd6960b@%3Cdev.poi.apache.org%3E)\n\n- [GitHub Commit](https://github.com/apache/poi/commit/a07ed9e86474da98f204efadfd5b9327009a0d21)\n\n- [GitHub Commit](https://github.com/apache/poi/commit/c7db66a30dfb6cbbd5812ff3ae4c90ed2d9b9a27)\n\n- [GitHub Commit](https://github.com/apache/poi/commit/cd6236c74b55763a27e3e9b5f269c28bc9c98419)\n\n- [GitHub Commit](https://github.com/apache/poi/commit/df3910135fd9c442b4e746e4b156362fd2e8d755)\n",
        "disclosureTime": "2018-01-26T12:37:22Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "3.17"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-ORGAPACHEPOI-32049",
        "identifiers": {
          "CVE": [
            "CVE-2017-12626"
          ],
          "CWE": [
            "CWE-835"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "poi",
          "groupId": "org.apache.poi"
        },
        "modificationTime": "2019-09-09T13:57:13.444576Z",
        "moduleName": "org.apache.poi:poi",
        "packageManager": "maven",
        "packageName": "org.apache.poi:poi",
        "patches": [],
        "publicationTime": "2018-01-31T15:47:55Z",
        "references": [
          {
            "title": "Apache Security Advisory",
            "url": "https://lists.apache.org/thread.html/453d9af5dbabaccd9afb58d27279a9dbfe8e35f4e5ea1645ddd6960b@%3Cdev.poi.apache.org%3E"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/apache/poi/commit/a07ed9e86474da98f204efadfd5b9327009a0d21"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/apache/poi/commit/c7db66a30dfb6cbbd5812ff3ae4c90ed2d9b9a27"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/apache/poi/commit/cd6236c74b55763a27e3e9b5f269c28bc9c98419"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/apache/poi/commit/df3910135fd9c442b4e746e4b156362fd2e8d755"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,3.17)"
          ]
        },
        "severity": "high",
        "title": "Denial of Service (DoS)",
        "from": [
          "gradle-simple@0.0.0",
          "org.apache.poi:poi-ooxml@3.15",
          "org.apache.poi:poi@3.15"
        ],
        "upgradePath": [
          false,
          "org.apache.poi:poi-ooxml@3.17",
          "org.apache.poi:poi@3.17"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "org.apache.poi:poi",
        "version": "3.15"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:U/C:H/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2020-02-13T15:29:29.491788Z",
        "credit": [
          "Artem Smotrakov from SAP"
        ],
        "cvssScore": 5,
        "description": "## Overview\n\n[org.apache.poi:poi-ooxml](https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml) is a Java API To Access Microsoft Format Files.\n\n\nAffected versions of this package are vulnerable to XML External Entity (XXE) Injection.\nWhen using the tool `XSSFExportToXml` to convert user-provided Microsoft Excel documents, a specially crafted document can allow an attacker to read files from the local filesystem or from internal network resources via XML External Entity (XXE) Processing.\n\n## Details\nXXE Injection is a type of attack against an application that parses XML input.\r\nXML is a markup language that defines a set of rules for encoding documents in a format that is both human-readable and machine-readable. By default, many XML processors allow specification of an external entity, a URI that is dereferenced and evaluated during XML processing. When an XML document is being parsed, the parser can make a request and include the content at the specified URI inside of the XML document.\r\n\r\nAttacks can include disclosing local files, which may contain sensitive data such as passwords or private user data, using file: schemes or relative paths in the system identifier.\r\n\r\nFor example, below is a sample XML document, containing an XML element- username.\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\r\n   <username>John</username>\r\n</xml>\r\n```\r\n\r\nAn external XML entity - `xxe`, is defined using a system identifier and present within a DOCTYPE header. These entities can access local or remote content. For example the below code contains an external XML entity that would fetch the content of  `/etc/passwd` and display it to the user rendered by `username`.\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\r\n<!DOCTYPE foo [\r\n   <!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]>\r\n   <username>&xxe;</username>\r\n</xml>\r\n```\r\n\r\nOther XXE Injection attacks can access local resources that may not stop returning data, possibly impacting application availability and leading to Denial of Service.\n\n## Remediation\n\nUpgrade `org.apache.poi:poi-ooxml` to version 4.1.0 or higher.\n\n\n## References\n\n- [Apache Security Advisory](https://lists.apache.org/thread.html/13a54b6a03369cfb418a699180ffb83bd727320b6ddfec198b9b728e@%3Cannounce.apache.org%3E)\n\n- [GitHub Commit](https://github.com/apache/poi/commit/2b8200f7d701ea6ff9638f629f0bd81d2e48410c)\n\n- [GitHub Comparison](https://github.com/apache/poi/compare/REL_4_0_1...REL_4_1_0)\n",
        "disclosureTime": "2020-02-13T00:00:00Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "4.1.0"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-ORGAPACHEPOI-548686",
        "identifiers": {
          "CVE": [
            "CVE-2019-12415"
          ],
          "CWE": [
            "CWE-611"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "poi-ooxml",
          "groupId": "org.apache.poi"
        },
        "modificationTime": "2020-02-13T17:10:24.860466Z",
        "moduleName": "org.apache.poi:poi-ooxml",
        "packageManager": "maven",
        "packageName": "org.apache.poi:poi-ooxml",
        "patches": [],
        "publicationTime": "2020-02-13T15:30:02Z",
        "references": [
          {
            "title": "Apache Security Advisory",
            "url": "https://lists.apache.org/thread.html/13a54b6a03369cfb418a699180ffb83bd727320b6ddfec198b9b728e@%3Cannounce.apache.org%3E"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/apache/poi/commit/2b8200f7d701ea6ff9638f629f0bd81d2e48410c"
          },
          {
            "title": "GitHub Comparison",
            "url": "https://github.com/apache/poi/compare/REL_4_0_1...REL_4_1_0"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,4.1.0)"
          ]
        },
        "severity": "medium",
        "title": "XML External Entity (XXE) Injection",
        "from": [
          "gradle-simple@0.0.0",
          "org.apache.poi:poi-ooxml@3.15"
        ],
        "upgradePath": [
          false,
          "org.apache.poi:poi-ooxml@4.1.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "org.apache.poi:poi-ooxml",
        "version": "3.15"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2019-11-19T15:37:05.511963Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\n\n[org.apache.shiro:shiro-crypto-cipher](https://shiro.apache.org/index.html) is a cipher component for Apache Shiro security framework.\n\n\nAffected versions of this package are vulnerable to Cryptographic Issues.\nWhen using the default \"remember me\" configuration, cookies are susceptible to a padding attack.\n\n## Remediation\n\nUpgrade `org.apache.shiro:shiro-crypto-cipher` to version 1.4.2 or higher.\n\n\n## References\n\n- [Apache Security Advisory](https://lists.apache.org/thread.html/c9db14cfebfb8e74205884ed2bf2e2b30790ce24b7dde9191c82572c@%3Cdev.shiro.apache.org%3E)\n\n- [GitHub Commit](https://github.com/apache/shiro/commit/a8018783373ff5e5210225069c9919e071597d5e)\n\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=1774726)\n",
        "disclosureTime": "2019-11-18T00:03:46Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "1.4.2"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-ORGAPACHESHIRO-534886",
        "identifiers": {
          "CVE": [
            "CVE-2019-12422"
          ],
          "CWE": [
            "CWE-310"
          ],
          "GHSA": [
            "GHSA-r679-m633-g7wc"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "shiro-crypto-cipher",
          "groupId": "org.apache.shiro"
        },
        "modificationTime": "2019-12-02T14:45:35.720383Z",
        "moduleName": "org.apache.shiro:shiro-crypto-cipher",
        "packageManager": "maven",
        "packageName": "org.apache.shiro:shiro-crypto-cipher",
        "patches": [],
        "publicationTime": "2019-11-19T00:03:46Z",
        "references": [
          {
            "title": "Apache Security Advisory",
            "url": "https://lists.apache.org/thread.html/c9db14cfebfb8e74205884ed2bf2e2b30790ce24b7dde9191c82572c@%3Cdev.shiro.apache.org%3E"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/apache/shiro/commit/a8018783373ff5e5210225069c9919e071597d5e"
          },
          {
            "title": "RedHat Bugzilla Bug",
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1774726"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,1.4.2)"
          ]
        },
        "severity": "low",
        "title": "Cryptographic Issues",
        "from": [
          "gradle-simple@0.0.0",
          "org.apache.geode:geode-core@1.10.0",
          "org.apache.shiro:shiro-core@1.4.0",
          "org.apache.shiro:shiro-crypto-cipher@1.4.0"
        ],
        "upgradePath": [
          false,
          "org.apache.geode:geode-core@1.10.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "org.apache.shiro:shiro-crypto-cipher",
        "version": "1.4.0"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2019-12-20T15:26:08.265027Z",
        "credit": [
          "William Marlow (IBM)"
        ],
        "cvssScore": 3.1,
        "description": "## Overview\n\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\n\nAffected versions of this package are vulnerable to Session Fixation.\nWhen using FORM authentication there was a narrow window where an attacker could perform a session fixation attack. The window was considered too narrow for an exploit to be practical but, erring on the side of caution, this issue has been treated as a security vulnerability.\n\n## Remediation\n\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 9.0.30, 8.5.50, 7.0.99 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/apache/tomcat/commit/e19a202)\n\n- [Tomcat Security Advisory 7](https://tomcat.apache.org/security-7.html)\n\n- [Tomcat Security Advisory 8](https://tomcat.apache.org/security-8.html)\n\n- [Tomcat Security Advisory 9](https://tomcat.apache.org/security-9.html)\n",
        "disclosureTime": "2019-12-18T15:13:41Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "9.0.30",
          "8.5.50",
          "7.0.99"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-538488",
        "identifiers": {
          "CVE": [
            "CVE-2019-17563"
          ],
          "CWE": [
            "CWE-384"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "tomcat-embed-core",
          "groupId": "org.apache.tomcat.embed"
        },
        "modificationTime": "2019-12-20T18:07:37.644224Z",
        "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
        "packageManager": "maven",
        "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
        "patches": [],
        "publicationTime": "2019-12-20T15:13:36Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/apache/tomcat/commit/e19a202"
          },
          {
            "title": "Tomcat Security Advisory 7",
            "url": "https://tomcat.apache.org/security-7.html"
          },
          {
            "title": "Tomcat Security Advisory 8",
            "url": "https://tomcat.apache.org/security-8.html"
          },
          {
            "title": "Tomcat Security Advisory 9",
            "url": "https://tomcat.apache.org/security-9.html"
          }
        ],
        "semver": {
          "vulnerable": [
            "[9.0.0.M1, 9.0.30)",
            "[8.5.0,8.5.50)",
            "[,7.0.99)"
          ]
        },
        "severity": "low",
        "title": "Session Fixation",
        "from": [
          "gradle-simple@0.0.0",
          "org.springframework.cloud:spring-cloud-config-server@2.2.0.RELEASE",
          "org.springframework.boot:spring-boot-starter-web@2.2.1.RELEASE",
          "org.springframework.boot:spring-boot-starter-tomcat@2.2.1.RELEASE",
          "org.apache.tomcat.embed:tomcat-embed-core@9.0.27"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "org.apache.tomcat.embed:tomcat-embed-core",
        "version": "9.0.27"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-12-20T15:35:05.758130Z",
        "credit": [
          "An Trinh of Viettel Cyber Security"
        ],
        "cvssScore": 7.8,
        "description": "## Overview\n\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\n\nAffected versions of this package are vulnerable to Privilege Escalation.\nWhen Tomcat is configured with the JMX Remote Lifecycle Listener, a local attacker without access to the Tomcat process or configuration files is able to manipulate the RMI registry to perform a man-in-the-middle attack to capture user names and passwords used to access the JMX interface. The attacker can then use these credentials to access the JMX interface and gain complete control over the Tomcat instance.\n\n## Remediation\n\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 9.0.29, 8.5.49, 7.0.99 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/apache/tomcat/commit/a91d7db)\n\n- [Tomcat Security Advisory 7](https://tomcat.apache.org/security-7.html)\n\n- [Tomcat Security Advisory 8](https://tomcat.apache.org/security-8.html)\n\n- [Tomcat Security Advisory 9](https://tomcat.apache.org/security-9.html)\n",
        "disclosureTime": "2019-12-18T15:31:00Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "9.0.29",
          "8.5.49",
          "7.0.99"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-538490",
        "identifiers": {
          "CVE": [
            "CVE-2019-12418"
          ],
          "CWE": [
            "CWE-264"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "tomcat-embed-core",
          "groupId": "org.apache.tomcat.embed"
        },
        "modificationTime": "2019-12-20T18:07:41.313426Z",
        "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
        "packageManager": "maven",
        "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
        "patches": [],
        "publicationTime": "2019-12-20T15:30:58Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/apache/tomcat/commit/a91d7db"
          },
          {
            "title": "Tomcat Security Advisory 7",
            "url": "https://tomcat.apache.org/security-7.html"
          },
          {
            "title": "Tomcat Security Advisory 8",
            "url": "https://tomcat.apache.org/security-8.html"
          },
          {
            "title": "Tomcat Security Advisory 9",
            "url": "https://tomcat.apache.org/security-9.html"
          }
        ],
        "semver": {
          "vulnerable": [
            "[9.0.0.M1, 9.0.29)",
            "[8.5.0, 8.5.49)",
            "[,7.0.99)"
          ]
        },
        "severity": "high",
        "title": "Privilege Escalation",
        "from": [
          "gradle-simple@0.0.0",
          "org.springframework.cloud:spring-cloud-config-server@2.2.0.RELEASE",
          "org.springframework.boot:spring-boot-starter-web@2.2.1.RELEASE",
          "org.springframework.boot:spring-boot-starter-tomcat@2.2.1.RELEASE",
          "org.apache.tomcat.embed:tomcat-embed-core@9.0.27"
        ],
        "upgradePath": [
          false,
          "org.springframework.cloud:spring-cloud-config-server@2.2.1.RELEASE",
          "org.springframework.boot:spring-boot-starter-web@2.2.2.RELEASE",
          "org.springframework.boot:spring-boot-starter-tomcat@2.2.2.RELEASE",
          "org.apache.tomcat.embed:tomcat-embed-core@9.0.29"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "org.apache.tomcat.embed:tomcat-embed-core",
        "version": "9.0.27"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2019-12-20T15:26:08.265027Z",
        "credit": [
          "William Marlow (IBM)"
        ],
        "cvssScore": 3.1,
        "description": "## Overview\n\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\n\nAffected versions of this package are vulnerable to Session Fixation.\nWhen using FORM authentication there was a narrow window where an attacker could perform a session fixation attack. The window was considered too narrow for an exploit to be practical but, erring on the side of caution, this issue has been treated as a security vulnerability.\n\n## Remediation\n\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 9.0.30, 8.5.50, 7.0.99 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/apache/tomcat/commit/e19a202)\n\n- [Tomcat Security Advisory 7](https://tomcat.apache.org/security-7.html)\n\n- [Tomcat Security Advisory 8](https://tomcat.apache.org/security-8.html)\n\n- [Tomcat Security Advisory 9](https://tomcat.apache.org/security-9.html)\n",
        "disclosureTime": "2019-12-18T15:13:41Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "9.0.30",
          "8.5.50",
          "7.0.99"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-538488",
        "identifiers": {
          "CVE": [
            "CVE-2019-17563"
          ],
          "CWE": [
            "CWE-384"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "tomcat-embed-core",
          "groupId": "org.apache.tomcat.embed"
        },
        "modificationTime": "2019-12-20T18:07:37.644224Z",
        "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
        "packageManager": "maven",
        "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
        "patches": [],
        "publicationTime": "2019-12-20T15:13:36Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/apache/tomcat/commit/e19a202"
          },
          {
            "title": "Tomcat Security Advisory 7",
            "url": "https://tomcat.apache.org/security-7.html"
          },
          {
            "title": "Tomcat Security Advisory 8",
            "url": "https://tomcat.apache.org/security-8.html"
          },
          {
            "title": "Tomcat Security Advisory 9",
            "url": "https://tomcat.apache.org/security-9.html"
          }
        ],
        "semver": {
          "vulnerable": [
            "[9.0.0.M1, 9.0.30)",
            "[8.5.0,8.5.50)",
            "[,7.0.99)"
          ]
        },
        "severity": "low",
        "title": "Session Fixation",
        "from": [
          "gradle-simple@0.0.0",
          "org.springframework.cloud:spring-cloud-config-server@2.2.0.RELEASE",
          "org.springframework.boot:spring-boot-starter-web@2.2.1.RELEASE",
          "org.springframework.boot:spring-boot-starter-tomcat@2.2.1.RELEASE",
          "org.apache.tomcat.embed:tomcat-embed-websocket@9.0.27",
          "org.apache.tomcat.embed:tomcat-embed-core@9.0.27"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "org.apache.tomcat.embed:tomcat-embed-core",
        "version": "9.0.27"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-12-20T15:35:05.758130Z",
        "credit": [
          "An Trinh of Viettel Cyber Security"
        ],
        "cvssScore": 7.8,
        "description": "## Overview\n\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\n\nAffected versions of this package are vulnerable to Privilege Escalation.\nWhen Tomcat is configured with the JMX Remote Lifecycle Listener, a local attacker without access to the Tomcat process or configuration files is able to manipulate the RMI registry to perform a man-in-the-middle attack to capture user names and passwords used to access the JMX interface. The attacker can then use these credentials to access the JMX interface and gain complete control over the Tomcat instance.\n\n## Remediation\n\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 9.0.29, 8.5.49, 7.0.99 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/apache/tomcat/commit/a91d7db)\n\n- [Tomcat Security Advisory 7](https://tomcat.apache.org/security-7.html)\n\n- [Tomcat Security Advisory 8](https://tomcat.apache.org/security-8.html)\n\n- [Tomcat Security Advisory 9](https://tomcat.apache.org/security-9.html)\n",
        "disclosureTime": "2019-12-18T15:31:00Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "9.0.29",
          "8.5.49",
          "7.0.99"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-538490",
        "identifiers": {
          "CVE": [
            "CVE-2019-12418"
          ],
          "CWE": [
            "CWE-264"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "tomcat-embed-core",
          "groupId": "org.apache.tomcat.embed"
        },
        "modificationTime": "2019-12-20T18:07:41.313426Z",
        "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
        "packageManager": "maven",
        "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
        "patches": [],
        "publicationTime": "2019-12-20T15:30:58Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/apache/tomcat/commit/a91d7db"
          },
          {
            "title": "Tomcat Security Advisory 7",
            "url": "https://tomcat.apache.org/security-7.html"
          },
          {
            "title": "Tomcat Security Advisory 8",
            "url": "https://tomcat.apache.org/security-8.html"
          },
          {
            "title": "Tomcat Security Advisory 9",
            "url": "https://tomcat.apache.org/security-9.html"
          }
        ],
        "semver": {
          "vulnerable": [
            "[9.0.0.M1, 9.0.29)",
            "[8.5.0, 8.5.49)",
            "[,7.0.99)"
          ]
        },
        "severity": "high",
        "title": "Privilege Escalation",
        "from": [
          "gradle-simple@0.0.0",
          "org.springframework.cloud:spring-cloud-config-server@2.2.0.RELEASE",
          "org.springframework.boot:spring-boot-starter-web@2.2.1.RELEASE",
          "org.springframework.boot:spring-boot-starter-tomcat@2.2.1.RELEASE",
          "org.apache.tomcat.embed:tomcat-embed-websocket@9.0.27",
          "org.apache.tomcat.embed:tomcat-embed-core@9.0.27"
        ],
        "upgradePath": [
          false,
          "org.springframework.cloud:spring-cloud-config-server@2.2.1.RELEASE",
          "org.springframework.boot:spring-boot-starter-web@2.2.2.RELEASE",
          "org.springframework.boot:spring-boot-starter-tomcat@2.2.2.RELEASE",
          "org.apache.tomcat.embed:tomcat-embed-websocket@9.0.29",
          "org.apache.tomcat.embed:tomcat-embed-core@9.0.29"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "org.apache.tomcat.embed:tomcat-embed-core",
        "version": "9.0.27"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2017-02-22T07:28:27.408000Z",
        "credit": [
          "0ang3el"
        ],
        "cvssScore": 7.8,
        "description": "## Overview\n[`org.apache.xmlrpc:xmlrpc`](https://ws.apache.org/xmlrpc/) is a Java implementation of XML-RPC, a popular protocol that uses XML over HTTP to implement remote procedure calls.\n\nAffected versions of the package are vulnerable to Server Side Request Forgery (SSRF). Sending an XML with a `DOCTYPE` declaration that loads an external DTD, a malicious user can send a GET request to the host on behalf of a vulnerable `xml-rpc` endpoint.\n\n## References\n- [OSS Security](http://seclists.org/oss-sec/2016/q3/48)\n- [0ang3el Blog](https://0ang3el.blogspot.co.il/2016/07/beware-of-ws-xmlrpc-library-in-your.html)\n",
        "disclosureTime": "2016-07-13T03:34:55.265000Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "3.1.4"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-ORGAPACHEXMLRPC-31032",
        "identifiers": {
          "CVE": [
            "CVE-2016-5002"
          ],
          "CWE": [
            "CWE-918"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "xmlrpc",
          "groupId": "org.apache.xmlrpc"
        },
        "modificationTime": "2020-01-20T09:40:34.708611Z",
        "moduleName": "org.apache.xmlrpc:xmlrpc",
        "packageManager": "maven",
        "packageName": "org.apache.xmlrpc:xmlrpc",
        "patches": [],
        "publicationTime": "2016-07-13T03:34:55.265000Z",
        "references": [
          {
            "title": "0ang3el Blog",
            "url": "https://0ang3el.blogspot.co.il/2016/07/beware-of-ws-xmlrpc-library-in-your.html"
          },
          {
            "title": "Oss-Sec Mailing List",
            "url": "http://seclists.org/oss-sec/2016/q3/48"
          }
        ],
        "semver": {
          "vulnerable": [
            "[3.0,3.1.4)"
          ]
        },
        "severity": "high",
        "title": "Server-side Request Forgery (SSRF)",
        "from": [
          "gradle-simple@0.0.0",
          "org.apache.xmlrpc:xmlrpc@3.1"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "org.apache.xmlrpc:xmlrpc",
        "version": "3.1"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2017-02-22T07:28:27.421000Z",
        "credit": [
          "0ang3el"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\n[`org.apache.xmlrpc:xmlrpc`](https://ws.apache.org/xmlrpc/) is a Java implementation of XML-RPC, a popular protocol that uses XML over HTTP to implement remote procedure calls.\n\nAffected versions of the package are vulnerable to Deserialization of Untrusted Data. By default `ws-xmlrpc` supports `java.io.Serializable` data types through `<ex:serializable>` element. An attacker can leverage this to call a method and pass a serialized Java object in that element. `ws-xmlrpc` will deserialize the malicious object without validation.\n\n## Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n- Apache Blog\n\nThe vulnerability, also know as _Mad Gadget_\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\n- Google\n\n\n## References\n- [OSS Security](http://seclists.org/oss-sec/2016/q3/48)\n- [0ang3el Blog](https://0ang3el.blogspot.co.il/2016/07/beware-of-ws-xmlrpc-library-in-your.html)\n",
        "disclosureTime": "2016-07-13T04:54:03.321000Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "3.1.4"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-ORGAPACHEXMLRPC-31033",
        "identifiers": {
          "CVE": [
            "CVE-2016-5003"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "xmlrpc",
          "groupId": "org.apache.xmlrpc"
        },
        "modificationTime": "2020-01-20T09:40:34.715234Z",
        "moduleName": "org.apache.xmlrpc:xmlrpc",
        "packageManager": "maven",
        "packageName": "org.apache.xmlrpc:xmlrpc",
        "patches": [],
        "publicationTime": "2016-07-13T04:54:03.321000Z",
        "references": [
          {
            "title": "0ang3el Blog",
            "url": "https://0ang3el.blogspot.co.il/2016/07/beware-of-ws-xmlrpc-library-in-your.html"
          },
          {
            "title": "Oss-Sec Mailing List",
            "url": "http://seclists.org/oss-sec/2016/q3/48"
          }
        ],
        "semver": {
          "vulnerable": [
            "[3.0,3.1.4)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "gradle-simple@0.0.0",
          "org.apache.xmlrpc:xmlrpc@3.1"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "org.apache.xmlrpc:xmlrpc",
        "version": "3.1"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2017-02-22T07:28:27.435000Z",
        "credit": [
          "0ang3el"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n[`org.apache.xmlrpc:xmlrpc`](https://ws.apache.org/xmlrpc/) is a Java implementation of XML-RPC, a popular protocol that uses XML over HTTP to implement remote procedure calls.\n\nAffected versions of the package are vulnerable to Denial of Service (DoS). By default `ws-xmlrpc` supports `Content-Encoding` HTTP header. When sending `Content-Encoding: gzip` header, the body is not gzipped, and an error returns. An attacker may create a specially crafted compressed file and cause a Denial of Service attack, also known as `decompression bomb` attack.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## References\n- [OSS Security](http://seclists.org/oss-sec/2016/q3/48)\n- [0ang3el Blog](https://0ang3el.blogspot.co.il/2016/07/beware-of-ws-xmlrpc-library-in-your.html)\n",
        "disclosureTime": "2016-07-13T05:00:54.109000Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "3.1.4"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-ORGAPACHEXMLRPC-31034",
        "identifiers": {
          "CVE": [
            "CVE-2016-5004"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "xmlrpc",
          "groupId": "org.apache.xmlrpc"
        },
        "modificationTime": "2020-01-20T09:40:34.721067Z",
        "moduleName": "org.apache.xmlrpc:xmlrpc",
        "packageManager": "maven",
        "packageName": "org.apache.xmlrpc:xmlrpc",
        "patches": [],
        "publicationTime": "2016-07-13T05:00:54.109000Z",
        "references": [
          {
            "title": "0ang3el Blog",
            "url": "https://0ang3el.blogspot.co.il/2016/07/beware-of-ws-xmlrpc-library-in-your.html"
          },
          {
            "title": "Oss-Sec Mailing List",
            "url": "http://seclists.org/oss-sec/2016/q3/48"
          }
        ],
        "semver": {
          "vulnerable": [
            "[3.0,3.1.4)"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "gradle-simple@0.0.0",
          "org.apache.xmlrpc:xmlrpc@3.1"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "org.apache.xmlrpc:xmlrpc",
        "version": "3.1"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2020-01-20T09:38:53.230488Z",
        "credit": [
          "Guillaume Teissier (Orange)"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\n\n[org.apache.xmlrpc:xmlrpc](https://ws.apache.org/xmlrpc/) is a Java implementation of XML-RPC, a popular protocol that uses XML over HTTP to implement remote procedure calls. Compared to SOAP, or JAX-RPC, it is stable, much simpler and easier to handle. Version 3 of Apache XML-RPC introduces several important vendor extensions over the original XML-RPC specification.\n\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\nA flaw was discovered where the XMLRPC client implementation performed deserialization of the server-side exception serialized in the `faultCause` attribute of XMLRPC error response messages. A malicious or compromised XMLRPC server could possibly use this flaw to execute arbitrary code with the privileges of an application using the Apache XMLRPC client library.\n\n## Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\n\n## Remediation\n\nThere is no fixed version for `org.apache.xmlrpc:xmlrpc`.\n\n\n## References\n\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=1775193)\n\n- [SVN Revision Introducing Vulnerability](http://svn.apache.org/viewvc?view=revision&revision=442177)\n",
        "disclosureTime": "2020-01-16T00:00:00Z",
        "exploit": "Not Defined",
        "fixedIn": [],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-ORGAPACHEXMLRPC-542689",
        "identifiers": {
          "CVE": [
            "CVE-2019-17570"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "xmlrpc",
          "groupId": "org.apache.xmlrpc"
        },
        "modificationTime": "2020-01-20T10:31:35.152098Z",
        "moduleName": "org.apache.xmlrpc:xmlrpc",
        "packageManager": "maven",
        "packageName": "org.apache.xmlrpc:xmlrpc",
        "patches": [],
        "publicationTime": "2020-01-20T09:49:09Z",
        "references": [
          {
            "title": "RedHat Bugzilla Bug",
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1775193"
          },
          {
            "title": "SVN Revision Introducing Vulnerability",
            "url": "http://svn.apache.org/viewvc?view=revision&revision=442177"
          }
        ],
        "semver": {
          "vulnerable": [
            "[3.1,)"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "gradle-simple@0.0.0",
          "org.apache.xmlrpc:xmlrpc@3.1"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "org.apache.xmlrpc:xmlrpc",
        "version": "3.1"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
        "alternativeIds": [],
        "creationTime": "2019-11-19T11:44:30.225935Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 5.9,
        "description": "## Overview\n\n[org.codehaus.jackson:jackson-mapper-asl](https://mvnrepository.com/artifact/org.codehaus.jackson/jackson-mapper-asl) is a high-performance data binding package built on Jackson JSON processor.\n\n\nAffected versions of this package are vulnerable to XML External Entity (XXE) Injection.\nMultiple classes including  `XmlMapper` was found to be vulnerabiltiy to XXE, which might allow attackers to have unspecified impact via unknown vectors.\n\n## Details\nXXE Injection is a type of attack against an application that parses XML input.\r\nXML is a markup language that defines a set of rules for encoding documents in a format that is both human-readable and machine-readable. By default, many XML processors allow specification of an external entity, a URI that is dereferenced and evaluated during XML processing. When an XML document is being parsed, the parser can make a request and include the content at the specified URI inside of the XML document.\r\n\r\nAttacks can include disclosing local files, which may contain sensitive data such as passwords or private user data, using file: schemes or relative paths in the system identifier.\r\n\r\nFor example, below is a sample XML document, containing an XML element- username.\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\r\n   <username>John</username>\r\n</xml>\r\n```\r\n\r\nAn external XML entity - `xxe`, is defined using a system identifier and present within a DOCTYPE header. These entities can access local or remote content. For example the below code contains an external XML entity that would fetch the content of  `/etc/passwd` and display it to the user rendered by `username`.\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\r\n<!DOCTYPE foo [\r\n   <!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]>\r\n   <username>&xxe;</username>\r\n</xml>\r\n```\r\n\r\nOther XXE Injection attacks can access local resources that may not stop returning data, possibly impacting application availability and leading to Denial of Service.\n\n\n## Remediation\n\nThere is no fixed version for `org.codehaus.jackson:jackson-mapper-asl`.\n\n\n## References\n\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=1715075)\n",
        "disclosureTime": "2019-11-18T00:00:00Z",
        "exploit": "Not Defined",
        "fixedIn": [],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-ORGCODEHAUSJACKSON-534878",
        "identifiers": {
          "CVE": [
            "CVE-2019-10172"
          ],
          "CWE": [
            "CWE-611"
          ],
          "GHSA": [
            "GHSA-r6j9-8759-g62w"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jackson-mapper-asl",
          "groupId": "org.codehaus.jackson"
        },
        "modificationTime": "2019-12-02T14:45:32.742563Z",
        "moduleName": "org.codehaus.jackson:jackson-mapper-asl",
        "packageManager": "maven",
        "packageName": "org.codehaus.jackson:jackson-mapper-asl",
        "patches": [],
        "publicationTime": "2019-11-19T11:56:32Z",
        "references": [
          {
            "title": "RedHat Bugzilla Bug",
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1715075"
          }
        ],
        "semver": {
          "vulnerable": [
            "[0,]"
          ]
        },
        "severity": "medium",
        "title": "XML External Entity (XXE) Injection",
        "from": [
          "gradle-simple@0.0.0",
          "org.codehaus.jackson:jackson-mapper-asl@1.9.13"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "org.codehaus.jackson:jackson-mapper-asl",
        "version": "1.9.13"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2019-05-01T12:52:12.717603Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n\n[org.eclipse.jetty:jetty-server](https://mvnrepository.com/artifact/org.eclipse.jetty/jetty-server) is a lightweight highly scalable java based web server and servlet engine.\n\n\nAffected versions of this package are vulnerable to Information Exposure.\nThe configuration of a Jetty server may be leaked as part of a HTTP 404 response. This is due to the `DefaultHandler` class producing an error page during an exception.\n\n## Remediation\n\nUpgrade `org.eclipse.jetty:jetty-server` to version 9.2.28.v20190418, 9.3.27.v20190418, 9.4.17.v20190418 or higher.\n\n\n## References\n\n- [Eclipse Report](https://bugs.eclipse.org/bugs/show_bug.cgi?id=546577)\n\n- [GitHub Commit](https://github.com/eclipse/jetty.project/commit/04c994712c0b29824633598cfe0bf709f3b96f09)\n\n- [GitHub Issue](https://github.com/eclipse/jetty.project/issues/3555)\n",
        "disclosureTime": "2019-04-22T21:08:57Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "9.2.28.v20190418",
          "9.3.27.v20190418",
          "9.4.17.v20190418"
        ],
        "functions": [
          {
            "functionId": {
              "className": "DefaultHandler",
              "filePath": "org/eclipse/jetty/server/handler/DefaultHandler.java",
              "functionName": "handle"
            },
            "version": [
              "[7.0.0.M0,9.2.28.v20190418)",
              "[9.3.0.M0,9.3.27.v20190418)",
              "[9.4.0.M0,9.4.17.v20190418)"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "className": "org.eclipse.jetty.server.handler.DefaultHandler",
              "functionName": "handle"
            },
            "version": [
              "[7.0.0.M0,9.2.28.v20190418)",
              "[9.3.0.M0,9.3.27.v20190418)",
              "[9.4.0.M0,9.4.17.v20190418)"
            ]
          }
        ],
        "id": "SNYK-JAVA-ORGECLIPSEJETTY-174560",
        "identifiers": {
          "CVE": [
            "CVE-2019-10247"
          ],
          "CWE": [
            "CWE-213"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jetty-server",
          "groupId": "org.eclipse.jetty"
        },
        "modificationTime": "2019-05-01T15:37:25.679372Z",
        "moduleName": "org.eclipse.jetty:jetty-server",
        "packageManager": "maven",
        "packageName": "org.eclipse.jetty:jetty-server",
        "patches": [],
        "publicationTime": "2019-04-22T21:08:57Z",
        "references": [
          {
            "title": "Eclipse Report",
            "url": "https://bugs.eclipse.org/bugs/show_bug.cgi?id=546577"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/eclipse/jetty.project/commit/04c994712c0b29824633598cfe0bf709f3b96f09"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/eclipse/jetty.project/issues/3555"
          }
        ],
        "semver": {
          "vulnerable": [
            "[7.0.0.M0,9.2.28.v20190418)",
            "[9.3.0.M0,9.3.27.v20190418)",
            "[9.4.0.M0,9.4.17.v20190418)"
          ]
        },
        "severity": "medium",
        "title": "Information Exposure",
        "from": [
          "gradle-simple@0.0.0",
          "com.googlecode.gwtupload:gwtupload-samples@0.6.6",
          "org.eclipse.jetty:jetty-server@9.4.12.v20180830"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "org.eclipse.jetty:jetty-server",
        "version": "9.4.12.v20180830"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2019-05-01T12:52:12.717603Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n\n[org.eclipse.jetty:jetty-server](https://mvnrepository.com/artifact/org.eclipse.jetty/jetty-server) is a lightweight highly scalable java based web server and servlet engine.\n\n\nAffected versions of this package are vulnerable to Information Exposure.\nThe configuration of a Jetty server may be leaked as part of a HTTP 404 response. This is due to the `DefaultHandler` class producing an error page during an exception.\n\n## Remediation\n\nUpgrade `org.eclipse.jetty:jetty-server` to version 9.2.28.v20190418, 9.3.27.v20190418, 9.4.17.v20190418 or higher.\n\n\n## References\n\n- [Eclipse Report](https://bugs.eclipse.org/bugs/show_bug.cgi?id=546577)\n\n- [GitHub Commit](https://github.com/eclipse/jetty.project/commit/04c994712c0b29824633598cfe0bf709f3b96f09)\n\n- [GitHub Issue](https://github.com/eclipse/jetty.project/issues/3555)\n",
        "disclosureTime": "2019-04-22T21:08:57Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "9.2.28.v20190418",
          "9.3.27.v20190418",
          "9.4.17.v20190418"
        ],
        "functions": [
          {
            "functionId": {
              "className": "DefaultHandler",
              "filePath": "org/eclipse/jetty/server/handler/DefaultHandler.java",
              "functionName": "handle"
            },
            "version": [
              "[7.0.0.M0,9.2.28.v20190418)",
              "[9.3.0.M0,9.3.27.v20190418)",
              "[9.4.0.M0,9.4.17.v20190418)"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "className": "org.eclipse.jetty.server.handler.DefaultHandler",
              "functionName": "handle"
            },
            "version": [
              "[7.0.0.M0,9.2.28.v20190418)",
              "[9.3.0.M0,9.3.27.v20190418)",
              "[9.4.0.M0,9.4.17.v20190418)"
            ]
          }
        ],
        "id": "SNYK-JAVA-ORGECLIPSEJETTY-174560",
        "identifiers": {
          "CVE": [
            "CVE-2019-10247"
          ],
          "CWE": [
            "CWE-213"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jetty-server",
          "groupId": "org.eclipse.jetty"
        },
        "modificationTime": "2019-05-01T15:37:25.679372Z",
        "moduleName": "org.eclipse.jetty:jetty-server",
        "packageManager": "maven",
        "packageName": "org.eclipse.jetty:jetty-server",
        "patches": [],
        "publicationTime": "2019-04-22T21:08:57Z",
        "references": [
          {
            "title": "Eclipse Report",
            "url": "https://bugs.eclipse.org/bugs/show_bug.cgi?id=546577"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/eclipse/jetty.project/commit/04c994712c0b29824633598cfe0bf709f3b96f09"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/eclipse/jetty.project/issues/3555"
          }
        ],
        "semver": {
          "vulnerable": [
            "[7.0.0.M0,9.2.28.v20190418)",
            "[9.3.0.M0,9.3.27.v20190418)",
            "[9.4.0.M0,9.4.17.v20190418)"
          ]
        },
        "severity": "medium",
        "title": "Information Exposure",
        "from": [
          "gradle-simple@0.0.0",
          "org.apache.geode:geode-core@1.10.0",
          "org.eclipse.jetty:jetty-server@9.4.12.v20180830"
        ],
        "upgradePath": [
          false,
          "org.apache.geode:geode-core@1.10.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "org.eclipse.jetty:jetty-server",
        "version": "9.4.12.v20180830"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2019-05-01T12:52:12.717603Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n\n[org.eclipse.jetty:jetty-server](https://mvnrepository.com/artifact/org.eclipse.jetty/jetty-server) is a lightweight highly scalable java based web server and servlet engine.\n\n\nAffected versions of this package are vulnerable to Information Exposure.\nThe configuration of a Jetty server may be leaked as part of a HTTP 404 response. This is due to the `DefaultHandler` class producing an error page during an exception.\n\n## Remediation\n\nUpgrade `org.eclipse.jetty:jetty-server` to version 9.2.28.v20190418, 9.3.27.v20190418, 9.4.17.v20190418 or higher.\n\n\n## References\n\n- [Eclipse Report](https://bugs.eclipse.org/bugs/show_bug.cgi?id=546577)\n\n- [GitHub Commit](https://github.com/eclipse/jetty.project/commit/04c994712c0b29824633598cfe0bf709f3b96f09)\n\n- [GitHub Issue](https://github.com/eclipse/jetty.project/issues/3555)\n",
        "disclosureTime": "2019-04-22T21:08:57Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "9.2.28.v20190418",
          "9.3.27.v20190418",
          "9.4.17.v20190418"
        ],
        "functions": [
          {
            "functionId": {
              "className": "DefaultHandler",
              "filePath": "org/eclipse/jetty/server/handler/DefaultHandler.java",
              "functionName": "handle"
            },
            "version": [
              "[7.0.0.M0,9.2.28.v20190418)",
              "[9.3.0.M0,9.3.27.v20190418)",
              "[9.4.0.M0,9.4.17.v20190418)"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "className": "org.eclipse.jetty.server.handler.DefaultHandler",
              "functionName": "handle"
            },
            "version": [
              "[7.0.0.M0,9.2.28.v20190418)",
              "[9.3.0.M0,9.3.27.v20190418)",
              "[9.4.0.M0,9.4.17.v20190418)"
            ]
          }
        ],
        "id": "SNYK-JAVA-ORGECLIPSEJETTY-174560",
        "identifiers": {
          "CVE": [
            "CVE-2019-10247"
          ],
          "CWE": [
            "CWE-213"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jetty-server",
          "groupId": "org.eclipse.jetty"
        },
        "modificationTime": "2019-05-01T15:37:25.679372Z",
        "moduleName": "org.eclipse.jetty:jetty-server",
        "packageManager": "maven",
        "packageName": "org.eclipse.jetty:jetty-server",
        "patches": [],
        "publicationTime": "2019-04-22T21:08:57Z",
        "references": [
          {
            "title": "Eclipse Report",
            "url": "https://bugs.eclipse.org/bugs/show_bug.cgi?id=546577"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/eclipse/jetty.project/commit/04c994712c0b29824633598cfe0bf709f3b96f09"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/eclipse/jetty.project/issues/3555"
          }
        ],
        "semver": {
          "vulnerable": [
            "[7.0.0.M0,9.2.28.v20190418)",
            "[9.3.0.M0,9.3.27.v20190418)",
            "[9.4.0.M0,9.4.17.v20190418)"
          ]
        },
        "severity": "medium",
        "title": "Information Exposure",
        "from": [
          "gradle-simple@0.0.0",
          "com.googlecode.gwtupload:gwtupload-samples@0.6.6",
          "org.eclipse.jetty:jetty-webapp@7.3.0.v20110203",
          "org.eclipse.jetty:jetty-servlet@7.3.0.v20110203",
          "org.eclipse.jetty:jetty-security@7.3.0.v20110203",
          "org.eclipse.jetty:jetty-server@9.4.12.v20180830"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "org.eclipse.jetty:jetty-server",
        "version": "9.4.12.v20180830"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:L",
        "alternativeIds": [],
        "creationTime": "2017-02-22T07:28:29.930000Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 6.3,
        "description": "## Overview\n[`org.jolokia:jolokia-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22jolokia-core%22)\nCross-site request forgery (CSRF) vulnerability in Jolokia before 1.2.1 allows remote attackers to hijack the authentication of users for requests that execute MBeans methods via a crafted web page.\n\n## References\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0168)",
        "disclosureTime": "2014-10-06T14:55:00Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "1.2.1"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-ORGJOLOKIA-31213",
        "identifiers": {
          "CVE": [
            "CVE-2014-0168"
          ],
          "CWE": [
            "CWE-352"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jolokia-core",
          "groupId": "org.jolokia"
        },
        "modificationTime": "2019-06-02T10:22:42.460006Z",
        "moduleName": "org.jolokia:jolokia-core",
        "packageManager": "maven",
        "packageName": "org.jolokia:jolokia-core",
        "patches": [],
        "publicationTime": "2015-02-10T22:45:52Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/rhuss/jolokia/commit/2d9b168cfbbf5a6d16fa6e8a5b34503e3dc42364"
          },
          {
            "title": "NVD",
            "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0168"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,1.2.1)"
          ]
        },
        "severity": "medium",
        "title": "Cross-site Request Forgery (CSRF)",
        "from": [
          "gradle-simple@0.0.0",
          "org.jolokia:jolokia-core@1.2.0"
        ],
        "upgradePath": [
          false,
          "org.jolokia:jolokia-core@1.2.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "org.jolokia:jolokia-core",
        "version": "1.2.0"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
        "alternativeIds": [],
        "creationTime": "2018-03-14T13:11:08.033000Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 6.1,
        "description": "## Overview\n[org.jolokia:jolokia-core](https://github.com/rhuss/jolokia) is a fresh way to access JMX MBeans remotely.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) in the HTTP servlet. It allows an attacker to execute malicious javascript in the victim's browser.\n\n## Details\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\r\n\r\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \r\n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n\n## Remediation\nUpgrade `org.jolokia:jolokia-core` to version 1.5.0 or higher.\n\n## References\n- [Jolokia Security Advisory](https://jolokia.org/#Security_fixes_with_1.5.0)\n- [GitHub Commit](https://github.com/rhuss/jolokia/commit/5895d5c137c335e6b473e9dcb9baf748851bbc5f#diff-f19898247eddb55de6400489bff748ad)\n",
        "disclosureTime": "2018-01-24T13:11:08.033000Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "1.5.0"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-ORGJOLOKIA-32136",
        "identifiers": {
          "CVE": [
            "CVE-2018-1000129"
          ],
          "CWE": [
            "CWE-79"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jolokia-core",
          "groupId": "org.jolokia"
        },
        "modificationTime": "2019-06-02T10:29:35.775263Z",
        "moduleName": "org.jolokia:jolokia-core",
        "packageManager": "maven",
        "packageName": "org.jolokia:jolokia-core",
        "patches": [],
        "publicationTime": "2018-03-21T09:26:19.073000Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/rhuss/jolokia/commit/5895d5c137c335e6b473e9dcb9baf748851bbc5f%23diff-f19898247eddb55de6400489bff748ad"
          },
          {
            "title": "Jolokia Security Advisory",
            "url": "https://jolokia.org/%23Security_fixes_with_1.5.0"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,1.5.0)"
          ]
        },
        "severity": "medium",
        "title": "Cross-site Scripting (XSS)",
        "from": [
          "gradle-simple@0.0.0",
          "org.jolokia:jolokia-core@1.2.0"
        ],
        "upgradePath": [
          false,
          "org.jolokia:jolokia-core@1.5.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "org.jolokia:jolokia-core",
        "version": "1.2.0"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2018-03-14T13:11:08.035000Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 8.1,
        "description": "## Overview\n[org.jolokia:jolokia-core](https://github.com/rhuss/jolokia) is a fresh way to access JMX MBeans remotely.\n\nAffected versions oft his package are vulnerable to Arbitrary Code Execution in the proxy mode. It allows a remote attacker to run arbitrary Java code on the server.\n\n## Remediation\nUpgrade `org.jolokia:jolokia-core` to version 1.5.0 or higher.\n\n## References\n- [Jolokia Security Advisory](https://jolokia.org/#Security_fixes_with_1.5.0)\n",
        "disclosureTime": "2018-01-23T13:11:08.035000Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "1.5.0"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-ORGJOLOKIA-32137",
        "identifiers": {
          "CVE": [
            "CVE-2018-1000130"
          ],
          "CWE": [
            "CWE-94"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jolokia-core",
          "groupId": "org.jolokia"
        },
        "modificationTime": "2019-06-02T10:29:36.487328Z",
        "moduleName": "org.jolokia:jolokia-core",
        "packageManager": "maven",
        "packageName": "org.jolokia:jolokia-core",
        "patches": [],
        "publicationTime": "2018-03-21T09:26:19.130000Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/rhuss/jolokia/commit/1b360b8889f0ed51165a8d1ac55dd8e0aa2dfd4"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/rhuss/jolokia/commit/fd7b93da30c61a45bac10d8b311f1b79a74910f"
          },
          {
            "title": "Jolokia Security Advisory",
            "url": "https://jolokia.org/%23Security_fixes_with_1.5.0"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,1.5.0)"
          ]
        },
        "severity": "high",
        "title": "Arbitrary Code Execution",
        "from": [
          "gradle-simple@0.0.0",
          "org.jolokia:jolokia-core@1.2.0"
        ],
        "upgradePath": [
          false,
          "org.jolokia:jolokia-core@1.5.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "org.jolokia:jolokia-core",
        "version": "1.2.0"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2020-01-03T10:46:58.366609Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 8.8,
        "description": "## Overview\n\n[org.jolokia:jolokia-core](https://mvnrepository.com/artifact/org.jolokia/jolokia-core) is a jar file containing servlet and helper classes.\n\n\nAffected versions of this package are vulnerable to Cross-Site Request Forgery (CSRF)\ndue to a lack of CORS hardening. This holds true for properly configured instances with strict checking for origin and referrer headers. This could result in a Remote Code Execution attack.\n\n## Remediation\n\nUpgrade `org.jolokia:jolokia-core` to version 1.6.1 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/rhuss/jolokia/commit/ec1cebda618e68d12c9b1906820564408cf950e1)\n\n- [Jolokia Release Log](https://jolokia.org/#Minor_updates_coming_with_1.6.1)\n",
        "disclosureTime": "2019-01-08T06:23:02Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "1.6.1"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-ORGJOLOKIA-540501",
        "identifiers": {
          "CVE": [
            "CVE-2018-10899"
          ],
          "CWE": [
            "CWE-352"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jolokia-core",
          "groupId": "org.jolokia"
        },
        "modificationTime": "2020-01-03T15:19:21.123601Z",
        "moduleName": "org.jolokia:jolokia-core",
        "packageManager": "maven",
        "packageName": "org.jolokia:jolokia-core",
        "patches": [],
        "publicationTime": "2020-01-02T14:36:34Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/rhuss/jolokia/commit/ec1cebda618e68d12c9b1906820564408cf950e1"
          },
          {
            "title": "Jolokia Release Log",
            "url": "https://jolokia.org/%23Minor_updates_coming_with_1.6.1"
          }
        ],
        "semver": {
          "vulnerable": [
            "[1.2.0,1.6.1)"
          ]
        },
        "severity": "high",
        "title": "Cross-Site Request Forgery (CSRF)",
        "from": [
          "gradle-simple@0.0.0",
          "org.jolokia:jolokia-core@1.2.0"
        ],
        "upgradePath": [
          false,
          "org.jolokia:jolokia-core@1.6.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "org.jolokia:jolokia-core",
        "version": "1.2.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:L/E:P/RL:U/RC:R",
        "alternativeIds": [],
        "creationTime": "2020-02-20T11:22:37.008016Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 8.6,
        "description": "## Overview\n\n[org.jyaml:jyaml](http://jyaml.sourceforge.net/) is a Java library for working with the Yaml file format.\n\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\nJYaml allows code execution during deserialization of data through the `load()` function.\n\n## Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\n\n## Remediation\n\nThere is no fixed version for `org.jyaml:jyaml`.\n\n\n## References\n\n- [JYaml Bug Tracker](https://sourceforge.net/p/jyaml/bugs/)\n\n- [Marshalsec Whitepaper](https://github.com/mbechler/marshalsec/blob/master/marshalsec.pdf)\n\n- [Proof Of Concept](https://gist.github.com/j0lt-github/f5141abcacae63d434ecae211422153a)\n",
        "disclosureTime": "2020-02-19T18:01:25Z",
        "exploit": "Proof of Concept",
        "fixedIn": [],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-ORGJYAML-550161",
        "identifiers": {
          "CVE": [
            "CVE-2020-8441"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "jyaml",
          "groupId": "org.jyaml"
        },
        "modificationTime": "2020-02-20T15:23:02.817041Z",
        "moduleName": "org.jyaml:jyaml",
        "packageManager": "maven",
        "packageName": "org.jyaml:jyaml",
        "patches": [],
        "publicationTime": "2020-02-19T18:01:25Z",
        "references": [
          {
            "title": "JYaml Bug Tracker",
            "url": "https://sourceforge.net/p/jyaml/bugs/"
          },
          {
            "title": "Marshalsec Whitepaper",
            "url": "https://github.com/mbechler/marshalsec/blob/master/marshalsec.pdf"
          },
          {
            "title": "Proof Of Concept",
            "url": "https://gist.github.com/j0lt-github/f5141abcacae63d434ecae211422153a"
          }
        ],
        "semver": {
          "vulnerable": [
            "[0,]"
          ]
        },
        "severity": "high",
        "title": "Deserialization of Untrusted Data",
        "from": [
          "gradle-simple@0.0.0",
          "org.jyaml:jyaml@1.2"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "org.jyaml:jyaml",
        "version": "1.2"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
        "alternativeIds": [],
        "creationTime": "2020-01-22T13:34:40.486430Z",
        "credit": [
          "Eric Zimanyi"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n\n[org.springframework:spring-webmvc](https://mvnrepository.com/artifact/org.springframework/spring-webmvc) is a package that provides Model-View-Controller (MVC) architecture and ready components that can be used to develop flexible and loosely coupled web applications.\n\n\nAffected versions of this package are vulnerable to Cross-Site Request Forgery (CSRF)\nthrough CORS preflight requests that target Spring MVC (`spring-webmvc` module) or Spring WebFlux (`spring-webflux` module) endpoints. Only non-authenticated endpoints are vulnerable because preflight requests should not include credentials and therefore requests should fail authentication. However a notable exception to this are Chrome based browsers when using client certificates for authentication since Chrome sends TLS client certificates in CORS preflight requests in violation of spec requirements. No HTTP body can be sent or received as a result of this attack.\n\n## Remediation\n\nUpgrade `org.springframework:spring-webmvc` to version 5.2.3 or higher.\n\n\n## References\n\n- [Pivotal Vulnerability Report](https://pivotal.io/security/cve-2020-5397)\n",
        "disclosureTime": "2020-01-16T13:32:22Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "5.2.3"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-ORGSPRINGFRAMEWORK-542933",
        "identifiers": {
          "CVE": [
            "CVE-2020-5397"
          ],
          "CWE": [
            "CWE-352"
          ],
          "GHSA": [
            "GHSA-7pm4-g2qj-j85x"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "spring-webmvc",
          "groupId": "org.springframework"
        },
        "modificationTime": "2020-01-22T20:21:03.665552Z",
        "moduleName": "org.springframework:spring-webmvc",
        "packageManager": "maven",
        "packageName": "org.springframework:spring-webmvc",
        "patches": [],
        "publicationTime": "2020-01-22T13:32:21Z",
        "references": [
          {
            "title": "Pivotal Vulnerability Report",
            "url": "https://pivotal.io/security/cve-2020-5397"
          }
        ],
        "semver": {
          "vulnerable": [
            "[5.2.0, 5.2.3)"
          ]
        },
        "severity": "medium",
        "title": "Cross-Site Request Forgery (CSRF)",
        "from": [
          "gradle-simple@0.0.0",
          "org.springframework.cloud:spring-cloud-config-server@2.2.0.RELEASE",
          "org.springframework.boot:spring-boot-starter-web@2.2.1.RELEASE",
          "org.springframework:spring-webmvc@5.2.1.RELEASE"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "org.springframework:spring-webmvc",
        "version": "5.2.1.RELEASE"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:L/UI:R/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2020-03-05T15:02:31.577470Z",
        "credit": [
          "Roman Shalymov"
        ],
        "cvssScore": 8,
        "description": "## Overview\n\n[org.springframework:spring-web](https://github.com/spring-projects/spring-framework) is a package that provides a comprehensive programming and configuration model for modern Java-based enterprise applications - on any kind of deployment platform.\n\n\nAffected versions of this package are vulnerable to Reflected File Download (RFD).\nA reflected file download attack is possible when the filename attribute of the `Content-Disposition` header is derived from user-supplied input.\n\n## Remediation\n\nUpgrade `org.springframework:spring-web` to version 5.2.3, 5.1.13, 5.0.16 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/spring-projects/spring-framework/commit/41f40c6c229d3b4f768718f1ec229d8f0ad76d76)\n\n- [GitHub Issue](https://github.com/spring-projects/spring-framework/issues/24220)\n\n- [Pivotal Vulnerability Report](https://pivotal.io/security/cve-2020-5398)\n",
        "disclosureTime": "2020-01-16T13:47:43Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "5.2.3",
          "5.1.13",
          "5.0.16"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-ORGSPRINGFRAMEWORK-559346",
        "identifiers": {
          "CVE": [
            "CVE-2020-5398"
          ],
          "CWE": [
            "CWE-494"
          ],
          "GHSA": [
            "GHSA-8wx2-9q48-vm9r"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "spring-web",
          "groupId": "org.springframework"
        },
        "modificationTime": "2020-03-05T15:22:25.100741Z",
        "moduleName": "org.springframework:spring-web",
        "packageManager": "maven",
        "packageName": "org.springframework:spring-web",
        "patches": [],
        "publicationTime": "2020-01-22T13:47:42Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/spring-projects/spring-framework/commit/41f40c6c229d3b4f768718f1ec229d8f0ad76d76"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/spring-projects/spring-framework/issues/24220"
          },
          {
            "title": "Pivotal Vulnerability Report",
            "url": "https://pivotal.io/security/cve-2020-5398"
          }
        ],
        "semver": {
          "vulnerable": [
            "[5.2.0, 5.2.3)",
            "[5.1.0, 5.1.13)",
            "[5.0.0, 5.0.16)"
          ]
        },
        "severity": "high",
        "title": "Reflected File Download (RFD)",
        "from": [
          "gradle-simple@0.0.0",
          "org.apache.geode:geode-core@1.10.0",
          "org.apache.geode:geode-management@1.10.0",
          "org.springframework:spring-web@5.2.1.RELEASE"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "org.springframework:spring-web",
        "version": "5.2.1.RELEASE"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:L/UI:R/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2020-03-05T15:02:31.577470Z",
        "credit": [
          "Roman Shalymov"
        ],
        "cvssScore": 8,
        "description": "## Overview\n\n[org.springframework:spring-web](https://github.com/spring-projects/spring-framework) is a package that provides a comprehensive programming and configuration model for modern Java-based enterprise applications - on any kind of deployment platform.\n\n\nAffected versions of this package are vulnerable to Reflected File Download (RFD).\nA reflected file download attack is possible when the filename attribute of the `Content-Disposition` header is derived from user-supplied input.\n\n## Remediation\n\nUpgrade `org.springframework:spring-web` to version 5.2.3, 5.1.13, 5.0.16 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/spring-projects/spring-framework/commit/41f40c6c229d3b4f768718f1ec229d8f0ad76d76)\n\n- [GitHub Issue](https://github.com/spring-projects/spring-framework/issues/24220)\n\n- [Pivotal Vulnerability Report](https://pivotal.io/security/cve-2020-5398)\n",
        "disclosureTime": "2020-01-16T13:47:43Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "5.2.3",
          "5.1.13",
          "5.0.16"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-ORGSPRINGFRAMEWORK-559346",
        "identifiers": {
          "CVE": [
            "CVE-2020-5398"
          ],
          "CWE": [
            "CWE-494"
          ],
          "GHSA": [
            "GHSA-8wx2-9q48-vm9r"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "spring-web",
          "groupId": "org.springframework"
        },
        "modificationTime": "2020-03-05T15:22:25.100741Z",
        "moduleName": "org.springframework:spring-web",
        "packageManager": "maven",
        "packageName": "org.springframework:spring-web",
        "patches": [],
        "publicationTime": "2020-01-22T13:47:42Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/spring-projects/spring-framework/commit/41f40c6c229d3b4f768718f1ec229d8f0ad76d76"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/spring-projects/spring-framework/issues/24220"
          },
          {
            "title": "Pivotal Vulnerability Report",
            "url": "https://pivotal.io/security/cve-2020-5398"
          }
        ],
        "semver": {
          "vulnerable": [
            "[5.2.0, 5.2.3)",
            "[5.1.0, 5.1.13)",
            "[5.0.0, 5.0.16)"
          ]
        },
        "severity": "high",
        "title": "Reflected File Download (RFD)",
        "from": [
          "gradle-simple@0.0.0",
          "org.springframework.cloud:spring-cloud-config-server@2.2.0.RELEASE",
          "org.springframework.boot:spring-boot-starter-web@2.2.1.RELEASE",
          "org.springframework:spring-web@5.2.1.RELEASE"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "org.springframework:spring-web",
        "version": "5.2.1.RELEASE"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:L/UI:R/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2020-03-05T15:02:31.577470Z",
        "credit": [
          "Roman Shalymov"
        ],
        "cvssScore": 8,
        "description": "## Overview\n\n[org.springframework:spring-web](https://github.com/spring-projects/spring-framework) is a package that provides a comprehensive programming and configuration model for modern Java-based enterprise applications - on any kind of deployment platform.\n\n\nAffected versions of this package are vulnerable to Reflected File Download (RFD).\nA reflected file download attack is possible when the filename attribute of the `Content-Disposition` header is derived from user-supplied input.\n\n## Remediation\n\nUpgrade `org.springframework:spring-web` to version 5.2.3, 5.1.13, 5.0.16 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/spring-projects/spring-framework/commit/41f40c6c229d3b4f768718f1ec229d8f0ad76d76)\n\n- [GitHub Issue](https://github.com/spring-projects/spring-framework/issues/24220)\n\n- [Pivotal Vulnerability Report](https://pivotal.io/security/cve-2020-5398)\n",
        "disclosureTime": "2020-01-16T13:47:43Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "5.2.3",
          "5.1.13",
          "5.0.16"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-ORGSPRINGFRAMEWORK-559346",
        "identifiers": {
          "CVE": [
            "CVE-2020-5398"
          ],
          "CWE": [
            "CWE-494"
          ],
          "GHSA": [
            "GHSA-8wx2-9q48-vm9r"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "spring-web",
          "groupId": "org.springframework"
        },
        "modificationTime": "2020-03-05T15:22:25.100741Z",
        "moduleName": "org.springframework:spring-web",
        "packageManager": "maven",
        "packageName": "org.springframework:spring-web",
        "patches": [],
        "publicationTime": "2020-01-22T13:47:42Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/spring-projects/spring-framework/commit/41f40c6c229d3b4f768718f1ec229d8f0ad76d76"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/spring-projects/spring-framework/issues/24220"
          },
          {
            "title": "Pivotal Vulnerability Report",
            "url": "https://pivotal.io/security/cve-2020-5398"
          }
        ],
        "semver": {
          "vulnerable": [
            "[5.2.0, 5.2.3)",
            "[5.1.0, 5.1.13)",
            "[5.0.0, 5.0.16)"
          ]
        },
        "severity": "high",
        "title": "Reflected File Download (RFD)",
        "from": [
          "gradle-simple@0.0.0",
          "org.springframework.cloud:spring-cloud-config-server@2.2.0.RELEASE",
          "org.springframework.cloud:spring-cloud-config-client@2.2.0.RELEASE",
          "org.springframework:spring-web@5.2.1.RELEASE"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "org.springframework:spring-web",
        "version": "5.2.1.RELEASE"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:L/UI:R/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2020-03-05T15:02:31.577470Z",
        "credit": [
          "Roman Shalymov"
        ],
        "cvssScore": 8,
        "description": "## Overview\n\n[org.springframework:spring-web](https://github.com/spring-projects/spring-framework) is a package that provides a comprehensive programming and configuration model for modern Java-based enterprise applications - on any kind of deployment platform.\n\n\nAffected versions of this package are vulnerable to Reflected File Download (RFD).\nA reflected file download attack is possible when the filename attribute of the `Content-Disposition` header is derived from user-supplied input.\n\n## Remediation\n\nUpgrade `org.springframework:spring-web` to version 5.2.3, 5.1.13, 5.0.16 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/spring-projects/spring-framework/commit/41f40c6c229d3b4f768718f1ec229d8f0ad76d76)\n\n- [GitHub Issue](https://github.com/spring-projects/spring-framework/issues/24220)\n\n- [Pivotal Vulnerability Report](https://pivotal.io/security/cve-2020-5398)\n",
        "disclosureTime": "2020-01-16T13:47:43Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "5.2.3",
          "5.1.13",
          "5.0.16"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-ORGSPRINGFRAMEWORK-559346",
        "identifiers": {
          "CVE": [
            "CVE-2020-5398"
          ],
          "CWE": [
            "CWE-494"
          ],
          "GHSA": [
            "GHSA-8wx2-9q48-vm9r"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "spring-web",
          "groupId": "org.springframework"
        },
        "modificationTime": "2020-03-05T15:22:25.100741Z",
        "moduleName": "org.springframework:spring-web",
        "packageManager": "maven",
        "packageName": "org.springframework:spring-web",
        "patches": [],
        "publicationTime": "2020-01-22T13:47:42Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/spring-projects/spring-framework/commit/41f40c6c229d3b4f768718f1ec229d8f0ad76d76"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/spring-projects/spring-framework/issues/24220"
          },
          {
            "title": "Pivotal Vulnerability Report",
            "url": "https://pivotal.io/security/cve-2020-5398"
          }
        ],
        "semver": {
          "vulnerable": [
            "[5.2.0, 5.2.3)",
            "[5.1.0, 5.1.13)",
            "[5.0.0, 5.0.16)"
          ]
        },
        "severity": "high",
        "title": "Reflected File Download (RFD)",
        "from": [
          "gradle-simple@0.0.0",
          "org.springframework.cloud:spring-cloud-config-server@2.2.0.RELEASE",
          "org.springframework.boot:spring-boot-starter-web@2.2.1.RELEASE",
          "org.springframework.boot:spring-boot-starter-json@2.2.1.RELEASE",
          "org.springframework:spring-web@5.2.1.RELEASE"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "org.springframework:spring-web",
        "version": "5.2.1.RELEASE"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:L/UI:R/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2020-03-05T15:02:31.577470Z",
        "credit": [
          "Roman Shalymov"
        ],
        "cvssScore": 8,
        "description": "## Overview\n\n[org.springframework:spring-web](https://github.com/spring-projects/spring-framework) is a package that provides a comprehensive programming and configuration model for modern Java-based enterprise applications - on any kind of deployment platform.\n\n\nAffected versions of this package are vulnerable to Reflected File Download (RFD).\nA reflected file download attack is possible when the filename attribute of the `Content-Disposition` header is derived from user-supplied input.\n\n## Remediation\n\nUpgrade `org.springframework:spring-web` to version 5.2.3, 5.1.13, 5.0.16 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/spring-projects/spring-framework/commit/41f40c6c229d3b4f768718f1ec229d8f0ad76d76)\n\n- [GitHub Issue](https://github.com/spring-projects/spring-framework/issues/24220)\n\n- [Pivotal Vulnerability Report](https://pivotal.io/security/cve-2020-5398)\n",
        "disclosureTime": "2020-01-16T13:47:43Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "5.2.3",
          "5.1.13",
          "5.0.16"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-ORGSPRINGFRAMEWORK-559346",
        "identifiers": {
          "CVE": [
            "CVE-2020-5398"
          ],
          "CWE": [
            "CWE-494"
          ],
          "GHSA": [
            "GHSA-8wx2-9q48-vm9r"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "spring-web",
          "groupId": "org.springframework"
        },
        "modificationTime": "2020-03-05T15:22:25.100741Z",
        "moduleName": "org.springframework:spring-web",
        "packageManager": "maven",
        "packageName": "org.springframework:spring-web",
        "patches": [],
        "publicationTime": "2020-01-22T13:47:42Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/spring-projects/spring-framework/commit/41f40c6c229d3b4f768718f1ec229d8f0ad76d76"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/spring-projects/spring-framework/issues/24220"
          },
          {
            "title": "Pivotal Vulnerability Report",
            "url": "https://pivotal.io/security/cve-2020-5398"
          }
        ],
        "semver": {
          "vulnerable": [
            "[5.2.0, 5.2.3)",
            "[5.1.0, 5.1.13)",
            "[5.0.0, 5.0.16)"
          ]
        },
        "severity": "high",
        "title": "Reflected File Download (RFD)",
        "from": [
          "gradle-simple@0.0.0",
          "org.springframework.cloud:spring-cloud-config-server@2.2.0.RELEASE",
          "org.springframework.boot:spring-boot-starter-web@2.2.1.RELEASE",
          "org.springframework:spring-webmvc@5.2.1.RELEASE",
          "org.springframework:spring-web@5.2.1.RELEASE"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "org.springframework:spring-web",
        "version": "5.2.1.RELEASE"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:H/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-03-06T15:21:22.897104Z",
        "credit": [
          "Yiming Xiang"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n\n[org.springframework.cloud:spring-cloud-config-server](https://spring.io) is a library that provides an HTTP resource-based API for external configuration.\n\n\nAffected versions of this package are vulnerable to Directory Traversal.\nIt allows applications to serve arbitrary configuration files through the spring-cloud-config-server module. A malicious user, or attacker, can send a request using a specially crafted URL that can lead a directory traversal attack.\n\n## Remediation\n\nUpgrade `org.springframework.cloud:spring-cloud-config-server` to version 2.2.2.RELEASE, 2.1.7.RELEASE or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/spring-cloud/spring-cloud-config/commit/4c7b8dfc7edaacb76a77e0c6ef9a5cfc200e3d02)\n\n- [Pivotal Security Advisory](https://pivotal.io/security/cve-2020-5405)\n",
        "disclosureTime": "2020-03-05T19:46:53Z",
        "exploit": "High",
        "fixedIn": [
          "2.2.2.RELEASE",
          "2.1.7.RELEASE"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-ORGSPRINGFRAMEWORKCLOUD-559426",
        "identifiers": {
          "CVE": [
            "CVE-2020-5405"
          ],
          "CWE": [
            "CWE-22"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "spring-cloud-config-server",
          "groupId": "org.springframework.cloud"
        },
        "modificationTime": "2020-03-06T15:25:38.363953Z",
        "moduleName": "org.springframework.cloud:spring-cloud-config-server",
        "packageManager": "maven",
        "packageName": "org.springframework.cloud:spring-cloud-config-server",
        "patches": [],
        "publicationTime": "2020-03-06T19:46:53Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/spring-cloud/spring-cloud-config/commit/4c7b8dfc7edaacb76a77e0c6ef9a5cfc200e3d02"
          },
          {
            "title": "Pivotal Security Advisory",
            "url": "https://pivotal.io/security/cve-2020-5405"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.2.0.RELEASE, 2.2.2.RELEASE)",
            "[2.1.0.RELEASE, 2.1.7.RELEASE)"
          ]
        },
        "severity": "high",
        "title": "Directory Traversal",
        "from": [
          "gradle-simple@0.0.0",
          "org.springframework.cloud:spring-cloud-config-server@2.2.0.RELEASE"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "org.springframework.cloud:spring-cloud-config-server",
        "version": "2.2.0.RELEASE"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:A/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N/E:U/RL:T/RC:U",
        "alternativeIds": [],
        "creationTime": "2019-12-12T13:08:53.753033Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 4.3,
        "description": "## Overview\n\n[org.yaml:snakeyaml](https://code.google.com/p/snakeyaml/source/browse/) is a YAML 1.1 parser and emitter for Java.\n\n\nAffected versions of this package are vulnerable to Denial of Service (DoS).\nThe Alias feature in SnakeYAML 1.18 allows entity expansion during a load operation, a related issue to CVE-2003-1564.\r\n\r\n*Note* While the Maintainer acknowledges the existence of the issue, they believe it should be solved by sanitizing the `inputStream` to the parser\n\n## Remediation\n\nUpgrade `org.yaml:snakeyaml` to version 1.26 or higher.\n\n\n## References\n\n- [Bitbucket Issue](https://bitbucket.org/asomov/snakeyaml/issues/377/allow-configuration-for-preventing-billion)\n\n- [GitHub Commit](https://bitbucket.org/asomov/snakeyaml/commits/da11ddbd91c1f8392ea932b37fa48110fa54ed8c)\n\n- [Maintainer Report](https://bitbucket.org/asomov/snakeyaml/wiki/Billion%20laughs%20attack)\n\n- [Proof Of Concept](https://bitbucket.org/asomov/snakeyaml/commits/04378d05777d21d114a9cdc24976ad49c8919222)\n",
        "disclosureTime": "2019-12-12T03:28:21Z",
        "exploit": "Unproven",
        "fixedIn": [
          "1.26"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-ORGYAML-537645",
        "identifiers": {
          "CVE": [
            "CVE-2017-18640"
          ],
          "CWE": [
            "CWE-189"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "snakeyaml",
          "groupId": "org.yaml"
        },
        "modificationTime": "2020-03-13T14:26:38.285502Z",
        "moduleName": "org.yaml:snakeyaml",
        "packageManager": "maven",
        "packageName": "org.yaml:snakeyaml",
        "patches": [],
        "publicationTime": "2019-12-19T03:28:21Z",
        "references": [
          {
            "title": "Bitbucket Issue",
            "url": "https://bitbucket.org/asomov/snakeyaml/issues/377/allow-configuration-for-preventing-billion"
          },
          {
            "title": "GitHub Commit",
            "url": "https://bitbucket.org/asomov/snakeyaml/commits/da11ddbd91c1f8392ea932b37fa48110fa54ed8c"
          },
          {
            "title": "Maintainer Report",
            "url": "https://bitbucket.org/asomov/snakeyaml/wiki/Billion%20laughs%20attack"
          },
          {
            "title": "Proof Of Concept",
            "url": "https://bitbucket.org/asomov/snakeyaml/commits/04378d05777d21d114a9cdc24976ad49c8919222"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,1.26)"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "gradle-simple@0.0.0",
          "org.springframework.cloud:spring-cloud-config-server@2.2.0.RELEASE",
          "org.yaml:snakeyaml@1.25"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "org.yaml:snakeyaml",
        "version": "1.25"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:A/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N/E:U/RL:T/RC:U",
        "alternativeIds": [],
        "creationTime": "2019-12-12T13:08:53.753033Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 4.3,
        "description": "## Overview\n\n[org.yaml:snakeyaml](https://code.google.com/p/snakeyaml/source/browse/) is a YAML 1.1 parser and emitter for Java.\n\n\nAffected versions of this package are vulnerable to Denial of Service (DoS).\nThe Alias feature in SnakeYAML 1.18 allows entity expansion during a load operation, a related issue to CVE-2003-1564.\r\n\r\n*Note* While the Maintainer acknowledges the existence of the issue, they believe it should be solved by sanitizing the `inputStream` to the parser\n\n## Remediation\n\nUpgrade `org.yaml:snakeyaml` to version 1.26 or higher.\n\n\n## References\n\n- [Bitbucket Issue](https://bitbucket.org/asomov/snakeyaml/issues/377/allow-configuration-for-preventing-billion)\n\n- [GitHub Commit](https://bitbucket.org/asomov/snakeyaml/commits/da11ddbd91c1f8392ea932b37fa48110fa54ed8c)\n\n- [Maintainer Report](https://bitbucket.org/asomov/snakeyaml/wiki/Billion%20laughs%20attack)\n\n- [Proof Of Concept](https://bitbucket.org/asomov/snakeyaml/commits/04378d05777d21d114a9cdc24976ad49c8919222)\n",
        "disclosureTime": "2019-12-12T03:28:21Z",
        "exploit": "Unproven",
        "fixedIn": [
          "1.26"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-ORGYAML-537645",
        "identifiers": {
          "CVE": [
            "CVE-2017-18640"
          ],
          "CWE": [
            "CWE-189"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "snakeyaml",
          "groupId": "org.yaml"
        },
        "modificationTime": "2020-03-13T14:26:38.285502Z",
        "moduleName": "org.yaml:snakeyaml",
        "packageManager": "maven",
        "packageName": "org.yaml:snakeyaml",
        "patches": [],
        "publicationTime": "2019-12-19T03:28:21Z",
        "references": [
          {
            "title": "Bitbucket Issue",
            "url": "https://bitbucket.org/asomov/snakeyaml/issues/377/allow-configuration-for-preventing-billion"
          },
          {
            "title": "GitHub Commit",
            "url": "https://bitbucket.org/asomov/snakeyaml/commits/da11ddbd91c1f8392ea932b37fa48110fa54ed8c"
          },
          {
            "title": "Maintainer Report",
            "url": "https://bitbucket.org/asomov/snakeyaml/wiki/Billion%20laughs%20attack"
          },
          {
            "title": "Proof Of Concept",
            "url": "https://bitbucket.org/asomov/snakeyaml/commits/04378d05777d21d114a9cdc24976ad49c8919222"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,1.26)"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "gradle-simple@0.0.0",
          "org.springframework.cloud:spring-cloud-config-server@2.2.0.RELEASE",
          "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml@2.10.0",
          "org.yaml:snakeyaml@1.25"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "org.yaml:snakeyaml",
        "version": "1.25"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:A/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N/E:U/RL:T/RC:U",
        "alternativeIds": [],
        "creationTime": "2019-12-12T13:08:53.753033Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 4.3,
        "description": "## Overview\n\n[org.yaml:snakeyaml](https://code.google.com/p/snakeyaml/source/browse/) is a YAML 1.1 parser and emitter for Java.\n\n\nAffected versions of this package are vulnerable to Denial of Service (DoS).\nThe Alias feature in SnakeYAML 1.18 allows entity expansion during a load operation, a related issue to CVE-2003-1564.\r\n\r\n*Note* While the Maintainer acknowledges the existence of the issue, they believe it should be solved by sanitizing the `inputStream` to the parser\n\n## Remediation\n\nUpgrade `org.yaml:snakeyaml` to version 1.26 or higher.\n\n\n## References\n\n- [Bitbucket Issue](https://bitbucket.org/asomov/snakeyaml/issues/377/allow-configuration-for-preventing-billion)\n\n- [GitHub Commit](https://bitbucket.org/asomov/snakeyaml/commits/da11ddbd91c1f8392ea932b37fa48110fa54ed8c)\n\n- [Maintainer Report](https://bitbucket.org/asomov/snakeyaml/wiki/Billion%20laughs%20attack)\n\n- [Proof Of Concept](https://bitbucket.org/asomov/snakeyaml/commits/04378d05777d21d114a9cdc24976ad49c8919222)\n",
        "disclosureTime": "2019-12-12T03:28:21Z",
        "exploit": "Unproven",
        "fixedIn": [
          "1.26"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-ORGYAML-537645",
        "identifiers": {
          "CVE": [
            "CVE-2017-18640"
          ],
          "CWE": [
            "CWE-189"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "snakeyaml",
          "groupId": "org.yaml"
        },
        "modificationTime": "2020-03-13T14:26:38.285502Z",
        "moduleName": "org.yaml:snakeyaml",
        "packageManager": "maven",
        "packageName": "org.yaml:snakeyaml",
        "patches": [],
        "publicationTime": "2019-12-19T03:28:21Z",
        "references": [
          {
            "title": "Bitbucket Issue",
            "url": "https://bitbucket.org/asomov/snakeyaml/issues/377/allow-configuration-for-preventing-billion"
          },
          {
            "title": "GitHub Commit",
            "url": "https://bitbucket.org/asomov/snakeyaml/commits/da11ddbd91c1f8392ea932b37fa48110fa54ed8c"
          },
          {
            "title": "Maintainer Report",
            "url": "https://bitbucket.org/asomov/snakeyaml/wiki/Billion%20laughs%20attack"
          },
          {
            "title": "Proof Of Concept",
            "url": "https://bitbucket.org/asomov/snakeyaml/commits/04378d05777d21d114a9cdc24976ad49c8919222"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,1.26)"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "gradle-simple@0.0.0",
          "org.springframework.cloud:spring-cloud-config-server@2.2.0.RELEASE",
          "org.springframework.boot:spring-boot-starter-actuator@2.2.1.RELEASE",
          "org.springframework.boot:spring-boot-starter@2.2.1.RELEASE",
          "org.yaml:snakeyaml@1.25"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "org.yaml:snakeyaml",
        "version": "1.25"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:A/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N/E:U/RL:T/RC:U",
        "alternativeIds": [],
        "creationTime": "2019-12-12T13:08:53.753033Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 4.3,
        "description": "## Overview\n\n[org.yaml:snakeyaml](https://code.google.com/p/snakeyaml/source/browse/) is a YAML 1.1 parser and emitter for Java.\n\n\nAffected versions of this package are vulnerable to Denial of Service (DoS).\nThe Alias feature in SnakeYAML 1.18 allows entity expansion during a load operation, a related issue to CVE-2003-1564.\r\n\r\n*Note* While the Maintainer acknowledges the existence of the issue, they believe it should be solved by sanitizing the `inputStream` to the parser\n\n## Remediation\n\nUpgrade `org.yaml:snakeyaml` to version 1.26 or higher.\n\n\n## References\n\n- [Bitbucket Issue](https://bitbucket.org/asomov/snakeyaml/issues/377/allow-configuration-for-preventing-billion)\n\n- [GitHub Commit](https://bitbucket.org/asomov/snakeyaml/commits/da11ddbd91c1f8392ea932b37fa48110fa54ed8c)\n\n- [Maintainer Report](https://bitbucket.org/asomov/snakeyaml/wiki/Billion%20laughs%20attack)\n\n- [Proof Of Concept](https://bitbucket.org/asomov/snakeyaml/commits/04378d05777d21d114a9cdc24976ad49c8919222)\n",
        "disclosureTime": "2019-12-12T03:28:21Z",
        "exploit": "Unproven",
        "fixedIn": [
          "1.26"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-ORGYAML-537645",
        "identifiers": {
          "CVE": [
            "CVE-2017-18640"
          ],
          "CWE": [
            "CWE-189"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "snakeyaml",
          "groupId": "org.yaml"
        },
        "modificationTime": "2020-03-13T14:26:38.285502Z",
        "moduleName": "org.yaml:snakeyaml",
        "packageManager": "maven",
        "packageName": "org.yaml:snakeyaml",
        "patches": [],
        "publicationTime": "2019-12-19T03:28:21Z",
        "references": [
          {
            "title": "Bitbucket Issue",
            "url": "https://bitbucket.org/asomov/snakeyaml/issues/377/allow-configuration-for-preventing-billion"
          },
          {
            "title": "GitHub Commit",
            "url": "https://bitbucket.org/asomov/snakeyaml/commits/da11ddbd91c1f8392ea932b37fa48110fa54ed8c"
          },
          {
            "title": "Maintainer Report",
            "url": "https://bitbucket.org/asomov/snakeyaml/wiki/Billion%20laughs%20attack"
          },
          {
            "title": "Proof Of Concept",
            "url": "https://bitbucket.org/asomov/snakeyaml/commits/04378d05777d21d114a9cdc24976ad49c8919222"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,1.26)"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "gradle-simple@0.0.0",
          "org.springframework.cloud:spring-cloud-config-server@2.2.0.RELEASE",
          "org.springframework.boot:spring-boot-starter-web@2.2.1.RELEASE",
          "org.springframework.boot:spring-boot-starter@2.2.1.RELEASE",
          "org.yaml:snakeyaml@1.25"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "org.yaml:snakeyaml",
        "version": "1.25"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:A/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N/E:U/RL:T/RC:U",
        "alternativeIds": [],
        "creationTime": "2019-12-12T13:08:53.753033Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 4.3,
        "description": "## Overview\n\n[org.yaml:snakeyaml](https://code.google.com/p/snakeyaml/source/browse/) is a YAML 1.1 parser and emitter for Java.\n\n\nAffected versions of this package are vulnerable to Denial of Service (DoS).\nThe Alias feature in SnakeYAML 1.18 allows entity expansion during a load operation, a related issue to CVE-2003-1564.\r\n\r\n*Note* While the Maintainer acknowledges the existence of the issue, they believe it should be solved by sanitizing the `inputStream` to the parser\n\n## Remediation\n\nUpgrade `org.yaml:snakeyaml` to version 1.26 or higher.\n\n\n## References\n\n- [Bitbucket Issue](https://bitbucket.org/asomov/snakeyaml/issues/377/allow-configuration-for-preventing-billion)\n\n- [GitHub Commit](https://bitbucket.org/asomov/snakeyaml/commits/da11ddbd91c1f8392ea932b37fa48110fa54ed8c)\n\n- [Maintainer Report](https://bitbucket.org/asomov/snakeyaml/wiki/Billion%20laughs%20attack)\n\n- [Proof Of Concept](https://bitbucket.org/asomov/snakeyaml/commits/04378d05777d21d114a9cdc24976ad49c8919222)\n",
        "disclosureTime": "2019-12-12T03:28:21Z",
        "exploit": "Unproven",
        "fixedIn": [
          "1.26"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-ORGYAML-537645",
        "identifiers": {
          "CVE": [
            "CVE-2017-18640"
          ],
          "CWE": [
            "CWE-189"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "snakeyaml",
          "groupId": "org.yaml"
        },
        "modificationTime": "2020-03-13T14:26:38.285502Z",
        "moduleName": "org.yaml:snakeyaml",
        "packageManager": "maven",
        "packageName": "org.yaml:snakeyaml",
        "patches": [],
        "publicationTime": "2019-12-19T03:28:21Z",
        "references": [
          {
            "title": "Bitbucket Issue",
            "url": "https://bitbucket.org/asomov/snakeyaml/issues/377/allow-configuration-for-preventing-billion"
          },
          {
            "title": "GitHub Commit",
            "url": "https://bitbucket.org/asomov/snakeyaml/commits/da11ddbd91c1f8392ea932b37fa48110fa54ed8c"
          },
          {
            "title": "Maintainer Report",
            "url": "https://bitbucket.org/asomov/snakeyaml/wiki/Billion%20laughs%20attack"
          },
          {
            "title": "Proof Of Concept",
            "url": "https://bitbucket.org/asomov/snakeyaml/commits/04378d05777d21d114a9cdc24976ad49c8919222"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,1.26)"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "gradle-simple@0.0.0",
          "org.springframework.cloud:spring-cloud-config-server@2.2.0.RELEASE",
          "org.springframework.boot:spring-boot-starter-web@2.2.1.RELEASE",
          "org.springframework.boot:spring-boot-starter-json@2.2.1.RELEASE",
          "org.springframework.boot:spring-boot-starter@2.2.1.RELEASE",
          "org.yaml:snakeyaml@1.25"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "org.yaml:snakeyaml",
        "version": "1.25"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:A/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N/E:U/RL:T/RC:U",
        "alternativeIds": [],
        "creationTime": "2019-12-12T13:08:53.753033Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 4.3,
        "description": "## Overview\n\n[org.yaml:snakeyaml](https://code.google.com/p/snakeyaml/source/browse/) is a YAML 1.1 parser and emitter for Java.\n\n\nAffected versions of this package are vulnerable to Denial of Service (DoS).\nThe Alias feature in SnakeYAML 1.18 allows entity expansion during a load operation, a related issue to CVE-2003-1564.\r\n\r\n*Note* While the Maintainer acknowledges the existence of the issue, they believe it should be solved by sanitizing the `inputStream` to the parser\n\n## Remediation\n\nUpgrade `org.yaml:snakeyaml` to version 1.26 or higher.\n\n\n## References\n\n- [Bitbucket Issue](https://bitbucket.org/asomov/snakeyaml/issues/377/allow-configuration-for-preventing-billion)\n\n- [GitHub Commit](https://bitbucket.org/asomov/snakeyaml/commits/da11ddbd91c1f8392ea932b37fa48110fa54ed8c)\n\n- [Maintainer Report](https://bitbucket.org/asomov/snakeyaml/wiki/Billion%20laughs%20attack)\n\n- [Proof Of Concept](https://bitbucket.org/asomov/snakeyaml/commits/04378d05777d21d114a9cdc24976ad49c8919222)\n",
        "disclosureTime": "2019-12-12T03:28:21Z",
        "exploit": "Unproven",
        "fixedIn": [
          "1.26"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-ORGYAML-537645",
        "identifiers": {
          "CVE": [
            "CVE-2017-18640"
          ],
          "CWE": [
            "CWE-189"
          ]
        },
        "language": "java",
        "mavenModuleName": {
          "artifactId": "snakeyaml",
          "groupId": "org.yaml"
        },
        "modificationTime": "2020-03-13T14:26:38.285502Z",
        "moduleName": "org.yaml:snakeyaml",
        "packageManager": "maven",
        "packageName": "org.yaml:snakeyaml",
        "patches": [],
        "publicationTime": "2019-12-19T03:28:21Z",
        "references": [
          {
            "title": "Bitbucket Issue",
            "url": "https://bitbucket.org/asomov/snakeyaml/issues/377/allow-configuration-for-preventing-billion"
          },
          {
            "title": "GitHub Commit",
            "url": "https://bitbucket.org/asomov/snakeyaml/commits/da11ddbd91c1f8392ea932b37fa48110fa54ed8c"
          },
          {
            "title": "Maintainer Report",
            "url": "https://bitbucket.org/asomov/snakeyaml/wiki/Billion%20laughs%20attack"
          },
          {
            "title": "Proof Of Concept",
            "url": "https://bitbucket.org/asomov/snakeyaml/commits/04378d05777d21d114a9cdc24976ad49c8919222"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,1.26)"
          ]
        },
        "severity": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "gradle-simple@0.0.0",
          "org.springframework.cloud:spring-cloud-config-server@2.2.0.RELEASE",
          "org.springframework.boot:spring-boot-starter-web@2.2.1.RELEASE",
          "org.springframework.boot:spring-boot-starter-validation@2.2.1.RELEASE",
          "org.springframework.boot:spring-boot-starter@2.2.1.RELEASE",
          "org.yaml:snakeyaml@1.25"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "org.yaml:snakeyaml",
        "version": "1.25"
      }
    ],
    "ok": false,
    "dependencyCount": 139,
    "org": "aldanchenko",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.14.1\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {}
    },
    "packageManager": "gradle",
    "ignoreSettings": null,
    "summary": "53 vulnerable dependency paths",
    "remediation": {
      "unresolved": [
        {
          "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
          "alternativeIds": [],
          "creationTime": "2020-03-01T08:57:39.302078Z",
          "credit": [
            "Alikhan Uzakov"
          ],
          "cvssScore": 6.5,
          "description": "## Overview\n\n[com.googlecode.gwtupload:gwtupload-samples](https://search.maven.org/artifact/com.googlecode.gwtupload/gwtupload-samples) is a library for uploading files to web servers, showing a progress bar with real information about the process.\n\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS)\nvia a crafted filename.\n\n## Details\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\r\n\r\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \r\n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\n\nThere is no fixed version for `com.googlecode.gwtupload:gwtupload-samples`.\n\n\n## References\n\n- [GitHub Issue](https://github.com/manolo/gwtupload/issues/32)\n",
          "disclosureTime": "2020-02-28T17:41:07Z",
          "exploit": "Not Defined",
          "fixedIn": [],
          "functions": [],
          "functions_new": [],
          "id": "SNYK-JAVA-COMGOOGLECODEGWTUPLOAD-559059",
          "identifiers": {
            "CVE": [
              "CVE-2020-9447"
            ],
            "CWE": [
              "CWE-79"
            ]
          },
          "language": "java",
          "mavenModuleName": {
            "artifactId": "gwtupload-samples",
            "groupId": "com.googlecode.gwtupload"
          },
          "modificationTime": "2020-03-01T15:26:37.729738Z",
          "moduleName": "com.googlecode.gwtupload:gwtupload-samples",
          "packageManager": "maven",
          "packageName": "com.googlecode.gwtupload:gwtupload-samples",
          "patches": [],
          "publicationTime": "2020-02-28T17:41:07Z",
          "references": [
            {
              "title": "GitHub Issue",
              "url": "https://github.com/manolo/gwtupload/issues/32"
            }
          ],
          "semver": {
            "vulnerable": [
              "[0,]"
            ]
          },
          "severity": "medium",
          "title": "Cross-site Scripting (XSS)",
          "from": [
            "gradle-simple@0.0.0",
            "com.googlecode.gwtupload:gwtupload-samples@0.6.6"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "name": "com.googlecode.gwtupload:gwtupload-samples",
          "version": "0.6.6"
        },
        {
          "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:H",
          "alternativeIds": [],
          "creationTime": "2019-08-21T16:11:11.406094Z",
          "credit": [
            "Rob Tompkins"
          ],
          "cvssScore": 7,
          "description": "## Overview\n\n[commons-beanutils:commons-beanutils](https://mvnrepository.com/artifact/commons-beanutils/commons-beanutils) is a provides an easy-to-use but flexible wrapper around reflection and introspection.\n\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\nIn Apache Commons Beanutils 1.9.2, a special `BeanIntrospector` class was added which allows suppressing the ability for an attacker to access the `classloader` via the `class` property available on all Java objects. This was not enabled by default and was therefore an incomplete fix for [CVE-2014-0114](https://snyk.io/vuln/SNYK-JAVA-COMMONSBEANUTILS-30077).\n\n## Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\n\n\n## Remediation\n\nUpgrade `commons-beanutils:commons-beanutils` to version 1.9.4 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/apache/commons-beanutils/commit/62e82ad92cf4818709d6044aaf257b73d42659a4)\n\n- [Mail Archives (Apache.org)](http://mail-archives.apache.org/mod_mbox/www-announce/201908.mbox/%3cC628798F-315D-4428-8CB1-4ED1ECC958E4@apache.org%3e)\n",
          "disclosureTime": "2019-08-20T22:18:37Z",
          "exploit": "Not Defined",
          "fixedIn": [
            "1.9.4"
          ],
          "functions": [],
          "functions_new": [],
          "id": "SNYK-JAVA-COMMONSBEANUTILS-460111",
          "identifiers": {
            "CVE": [
              "CVE-2019-10086"
            ],
            "CWE": [
              "CWE-502"
            ]
          },
          "language": "java",
          "mavenModuleName": {
            "artifactId": "commons-beanutils",
            "groupId": "commons-beanutils"
          },
          "modificationTime": "2019-08-21T16:11:31.495703Z",
          "moduleName": "commons-beanutils:commons-beanutils",
          "packageManager": "maven",
          "packageName": "commons-beanutils:commons-beanutils",
          "patches": [],
          "publicationTime": "2019-08-20T22:18:37Z",
          "references": [
            {
              "title": "GitHub Commit",
              "url": "https://github.com/apache/commons-beanutils/commit/62e82ad92cf4818709d6044aaf257b73d42659a4"
            },
            {
              "title": "Mail Archives (Apache.org)",
              "url": "http://mail-archives.apache.org/mod_mbox/www-announce/201908.mbox/%3cC628798F-315D-4428-8CB1-4ED1ECC958E4@apache.org%3e"
            }
          ],
          "semver": {
            "vulnerable": [
              "[1.9.2,1.9.4)"
            ]
          },
          "severity": "high",
          "title": "Deserialization of Untrusted Data",
          "from": [
            "gradle-simple@0.0.0",
            "org.apache.geode:geode-core@1.10.0",
            "org.apache.shiro:shiro-core@1.4.0",
            "org.apache.shiro:shiro-config-ogdl@1.4.0",
            "commons-beanutils:commons-beanutils@1.9.3"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "name": "commons-beanutils:commons-beanutils",
          "version": "1.9.3"
        },
        {
          "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
          "alternativeIds": [],
          "creationTime": "2017-02-22T07:28:18.753000Z",
          "credit": [
            "Unknown"
          ],
          "cvssScore": 9.8,
          "description": "## Overview\n[`commons-fileupload:commons-fileupload`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22commons-fileupload%22)\nThe Apache Commons FileUpload library contains a Java Object that, upon deserialization, can be manipulated to write or copy files in arbitrary locations. If integrated with [`ysoserial`](https://github.com/frohoff/ysoserial), it is possible to upload and execute binaries in a single deserialization call.\n\n# Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n- Apache Blog\n\n## Remediation\nUpgrade `commons-fileupload` to version 1.3.3 or higher.\n\n\n## References\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-1000031)\n- [Tenable Security](http://www.tenable.com/security/research/tra-2016-12)\n- [Github ChangeLog](https://github.com/apache/commons-fileupload/blob/master/src/changes/changes.xml#L65)\n- [Github Commit](https://github.com/apache/commons-fileupload/commit/388e824518697c2c8f9f83fd964621d9c2f8fc4c)\n",
          "disclosureTime": "2016-10-25T14:29:00Z",
          "exploit": "Not Defined",
          "fixedIn": [
            "1.3.3"
          ],
          "functions": [
            {
              "functionId": {
                "className": "DiskFileItem",
                "filePath": "org/apache/commons/fileupload/disk/DiskFileItem.java",
                "functionName": "readObject"
              },
              "version": [
                "[1.1,1.3.3)"
              ]
            }
          ],
          "functions_new": [
            {
              "functionId": {
                "className": "org.apache.commons.fileupload.disk.DiskFileItem",
                "functionName": "readObject"
              },
              "version": [
                "[1.1,1.3.3)"
              ]
            }
          ],
          "id": "SNYK-JAVA-COMMONSFILEUPLOAD-30401",
          "identifiers": {
            "CVE": [
              "CVE-2016-1000031"
            ],
            "CWE": [
              "CWE-284"
            ]
          },
          "language": "java",
          "mavenModuleName": {
            "artifactId": "commons-fileupload",
            "groupId": "commons-fileupload"
          },
          "modificationTime": "2019-06-02T07:36:59.369724Z",
          "moduleName": "commons-fileupload:commons-fileupload",
          "packageManager": "maven",
          "packageName": "commons-fileupload:commons-fileupload",
          "patches": [],
          "publicationTime": "2016-10-26T03:04:11.895000Z",
          "references": [
            {
              "title": "Github ChangeLog",
              "url": "https://github.com/apache/commons-fileupload/blob/master/src/changes/changes.xml%23L65"
            },
            {
              "title": "GitHub Commit",
              "url": "https://github.com/apache/commons-fileupload/commit/388e824518697c2c8f9f83fd964621d9c2f8fc4c"
            },
            {
              "title": "NVD",
              "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-1000031"
            },
            {
              "title": "Tenable Security",
              "url": "http://www.tenable.com/security/research/tra-2016-12"
            }
          ],
          "semver": {
            "vulnerable": [
              "[1.1,1.3.3)"
            ]
          },
          "severity": "high",
          "title": "Arbitrary Code Execution",
          "from": [
            "gradle-simple@0.0.0",
            "com.googlecode.gwtupload:gwtupload-samples@0.6.6",
            "com.googlecode.gwtupload:gwtupload@0.6.6",
            "commons-fileupload:commons-fileupload@1.2.1"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "name": "commons-fileupload:commons-fileupload",
          "version": "1.2.1"
        },
        {
          "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N",
          "alternativeIds": [],
          "creationTime": "2017-10-01T08:05:48.497000Z",
          "credit": [
            "Unknown"
          ],
          "cvssScore": 6.5,
          "description": "## Overview\n[`commons-fileupload:commons-fileupload`](https://commons.apache.org/proper/commons-fileupload/) provides a simple yet flexible means of adding support for multipart file upload functionality to servlets and web applications.\n\nAffected versions of the package are vulnerable to Information Disclosure because the `InputStream` is not closed on exception.\n\n## Remediation\nUpgrade `commons-fileupload` to version 1.3.2 or higher.\n\n## References\n- [Github ChangeLog](https://github.com/apache/commons-fileupload/blob/master/src/changes/changes.xml#L56)\n- [Github Commit](https://github.com/apache/commons-fileupload/commit/5b4881d7f75f439326f54fa554a9ca7de6d60814)\n",
          "disclosureTime": "2014-02-17T22:00:00Z",
          "exploit": "Not Defined",
          "fixedIn": [
            "1.3.2"
          ],
          "functions": [
            {
              "functionId": {
                "className": "FileUploadBase$FileItemIteratorImpl",
                "filePath": "org/apache/commons/fileupload/FileUploadBase$FileItemIteratorImpl.java",
                "functionName": "<init>"
              },
              "version": [
                "[1.2.0 ,1.3.2)"
              ]
            }
          ],
          "functions_new": [
            {
              "functionId": {
                "className": "org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl",
                "functionName": "<init>"
              },
              "version": [
                "[1.2.0 ,1.3.2)"
              ]
            }
          ],
          "id": "SNYK-JAVA-COMMONSFILEUPLOAD-31540",
          "identifiers": {
            "CVE": [],
            "CWE": [
              "CWE-200"
            ]
          },
          "language": "java",
          "mavenModuleName": {
            "artifactId": "commons-fileupload",
            "groupId": "commons-fileupload"
          },
          "modificationTime": "2019-03-20T14:28:31.441873Z",
          "moduleName": "commons-fileupload:commons-fileupload",
          "packageManager": "maven",
          "packageName": "commons-fileupload:commons-fileupload",
          "patches": [],
          "publicationTime": "2017-02-17T08:05:48.497000Z",
          "references": [
            {
              "title": "Github ChangeLog",
              "url": "https://github.com/apache/commons-fileupload/blob/master/src/changes/changes.xml%23L56"
            },
            {
              "title": "GitHub Commit",
              "url": "https://github.com/apache/commons-fileupload/commit/5b4881d7f75f439326f54fa554a9ca7de6d60814"
            }
          ],
          "semver": {
            "vulnerable": [
              "[,1.3.2)"
            ]
          },
          "severity": "medium",
          "title": "Information Exposure",
          "from": [
            "gradle-simple@0.0.0",
            "com.googlecode.gwtupload:gwtupload-samples@0.6.6",
            "com.googlecode.gwtupload:gwtupload@0.6.6",
            "commons-fileupload:commons-fileupload@1.2.1"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "name": "commons-fileupload:commons-fileupload",
          "version": "1.2.1"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:H",
          "alternativeIds": [],
          "creationTime": "2020-03-15T12:43:32.698718Z",
          "credit": [
            "Unknown"
          ],
          "cvssScore": 7.5,
          "description": "## Overview\n\n[org.apache.commons:commons-configuration2](https://mvnrepository.com/artifact/org.apache.commons/commons-configuration2/2.0) is a group of tools to assist in the reading of configuration/preferences files in various formats.\n\n\nAffected versions of this package are vulnerable to Remote Code Execution (RCE).\nIt uses a third-party library to parse YAML files (`org.yaml:snakeyaml`) which by default allows the instantiation of classes if the YAML includes special statements. Apache Commons Configuration did not change the default settings of this library. Therefore if a YAML file was loaded from an untrusted source, it could therefore load and execute code out of the control of the host application.\n\n## Remediation\n\nUpgrade `org.apache.commons:commons-configuration2` to version 2.7 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/apache/commons-configuration/commit/add7375cf37fd316d4838c6c56b054fc293b4641)\n",
          "disclosureTime": "2020-03-13T16:31:48Z",
          "exploit": "Not Defined",
          "fixedIn": [
            "2.7"
          ],
          "functions": [],
          "functions_new": [],
          "id": "SNYK-JAVA-ORGAPACHECOMMONS-560326",
          "identifiers": {
            "CVE": [
              "CVE-2020-1953"
            ],
            "CWE": [
              "CWE-94"
            ]
          },
          "language": "java",
          "mavenModuleName": {
            "artifactId": "commons-configuration2",
            "groupId": "org.apache.commons"
          },
          "modificationTime": "2020-03-15T15:43:45.271601Z",
          "moduleName": "org.apache.commons:commons-configuration2",
          "packageManager": "maven",
          "packageName": "org.apache.commons:commons-configuration2",
          "patches": [],
          "publicationTime": "2020-03-15T15:43:45.538586Z",
          "references": [
            {
              "title": "GitHub Commit",
              "url": "https://github.com/apache/commons-configuration/commit/add7375cf37fd316d4838c6c56b054fc293b4641"
            }
          ],
          "semver": {
            "vulnerable": [
              "[2.2, 2.7)"
            ]
          },
          "severity": "high",
          "title": "Remote Code Execution (RCE)",
          "from": [
            "gradle-simple@0.0.0",
            "org.apache.commons:commons-configuration2@2.2"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "name": "org.apache.commons:commons-configuration2",
          "version": "2.2"
        },
        {
          "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
          "alternativeIds": [],
          "creationTime": "2019-11-19T15:37:05.511963Z",
          "credit": [
            "Unknown"
          ],
          "cvssScore": 3.7,
          "description": "## Overview\n\n[org.apache.shiro:shiro-crypto-cipher](https://shiro.apache.org/index.html) is a cipher component for Apache Shiro security framework.\n\n\nAffected versions of this package are vulnerable to Cryptographic Issues.\nWhen using the default \"remember me\" configuration, cookies are susceptible to a padding attack.\n\n## Remediation\n\nUpgrade `org.apache.shiro:shiro-crypto-cipher` to version 1.4.2 or higher.\n\n\n## References\n\n- [Apache Security Advisory](https://lists.apache.org/thread.html/c9db14cfebfb8e74205884ed2bf2e2b30790ce24b7dde9191c82572c@%3Cdev.shiro.apache.org%3E)\n\n- [GitHub Commit](https://github.com/apache/shiro/commit/a8018783373ff5e5210225069c9919e071597d5e)\n\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=1774726)\n",
          "disclosureTime": "2019-11-18T00:03:46Z",
          "exploit": "Not Defined",
          "fixedIn": [
            "1.4.2"
          ],
          "functions": [],
          "functions_new": [],
          "id": "SNYK-JAVA-ORGAPACHESHIRO-534886",
          "identifiers": {
            "CVE": [
              "CVE-2019-12422"
            ],
            "CWE": [
              "CWE-310"
            ],
            "GHSA": [
              "GHSA-r679-m633-g7wc"
            ]
          },
          "language": "java",
          "mavenModuleName": {
            "artifactId": "shiro-crypto-cipher",
            "groupId": "org.apache.shiro"
          },
          "modificationTime": "2019-12-02T14:45:35.720383Z",
          "moduleName": "org.apache.shiro:shiro-crypto-cipher",
          "packageManager": "maven",
          "packageName": "org.apache.shiro:shiro-crypto-cipher",
          "patches": [],
          "publicationTime": "2019-11-19T00:03:46Z",
          "references": [
            {
              "title": "Apache Security Advisory",
              "url": "https://lists.apache.org/thread.html/c9db14cfebfb8e74205884ed2bf2e2b30790ce24b7dde9191c82572c@%3Cdev.shiro.apache.org%3E"
            },
            {
              "title": "GitHub Commit",
              "url": "https://github.com/apache/shiro/commit/a8018783373ff5e5210225069c9919e071597d5e"
            },
            {
              "title": "RedHat Bugzilla Bug",
              "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1774726"
            }
          ],
          "semver": {
            "vulnerable": [
              "[,1.4.2)"
            ]
          },
          "severity": "low",
          "title": "Cryptographic Issues",
          "from": [
            "gradle-simple@0.0.0",
            "org.apache.geode:geode-core@1.10.0",
            "org.apache.shiro:shiro-core@1.4.0",
            "org.apache.shiro:shiro-crypto-cipher@1.4.0"
          ],
          "upgradePath": [
            false,
            "org.apache.geode:geode-core@1.10.0"
          ],
          "isUpgradable": true,
          "isPatchable": false,
          "isPinnable": false,
          "name": "org.apache.shiro:shiro-crypto-cipher",
          "version": "1.4.0"
        },
        {
          "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:N/A:N",
          "alternativeIds": [],
          "creationTime": "2019-12-20T15:26:08.265027Z",
          "credit": [
            "William Marlow (IBM)"
          ],
          "cvssScore": 3.1,
          "description": "## Overview\n\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\n\nAffected versions of this package are vulnerable to Session Fixation.\nWhen using FORM authentication there was a narrow window where an attacker could perform a session fixation attack. The window was considered too narrow for an exploit to be practical but, erring on the side of caution, this issue has been treated as a security vulnerability.\n\n## Remediation\n\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 9.0.30, 8.5.50, 7.0.99 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/apache/tomcat/commit/e19a202)\n\n- [Tomcat Security Advisory 7](https://tomcat.apache.org/security-7.html)\n\n- [Tomcat Security Advisory 8](https://tomcat.apache.org/security-8.html)\n\n- [Tomcat Security Advisory 9](https://tomcat.apache.org/security-9.html)\n",
          "disclosureTime": "2019-12-18T15:13:41Z",
          "exploit": "Not Defined",
          "fixedIn": [
            "9.0.30",
            "8.5.50",
            "7.0.99"
          ],
          "functions": [],
          "functions_new": [],
          "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-538488",
          "identifiers": {
            "CVE": [
              "CVE-2019-17563"
            ],
            "CWE": [
              "CWE-384"
            ]
          },
          "language": "java",
          "mavenModuleName": {
            "artifactId": "tomcat-embed-core",
            "groupId": "org.apache.tomcat.embed"
          },
          "modificationTime": "2019-12-20T18:07:37.644224Z",
          "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
          "packageManager": "maven",
          "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
          "patches": [],
          "publicationTime": "2019-12-20T15:13:36Z",
          "references": [
            {
              "title": "GitHub Commit",
              "url": "https://github.com/apache/tomcat/commit/e19a202"
            },
            {
              "title": "Tomcat Security Advisory 7",
              "url": "https://tomcat.apache.org/security-7.html"
            },
            {
              "title": "Tomcat Security Advisory 8",
              "url": "https://tomcat.apache.org/security-8.html"
            },
            {
              "title": "Tomcat Security Advisory 9",
              "url": "https://tomcat.apache.org/security-9.html"
            }
          ],
          "semver": {
            "vulnerable": [
              "[9.0.0.M1, 9.0.30)",
              "[8.5.0,8.5.50)",
              "[,7.0.99)"
            ]
          },
          "severity": "low",
          "title": "Session Fixation",
          "from": [
            "gradle-simple@0.0.0",
            "org.springframework.cloud:spring-cloud-config-server@2.2.0.RELEASE",
            "org.springframework.boot:spring-boot-starter-web@2.2.1.RELEASE",
            "org.springframework.boot:spring-boot-starter-tomcat@2.2.1.RELEASE",
            "org.apache.tomcat.embed:tomcat-embed-websocket@9.0.27",
            "org.apache.tomcat.embed:tomcat-embed-core@9.0.27"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "name": "org.apache.tomcat.embed:tomcat-embed-core",
          "version": "9.0.27"
        },
        {
          "CVSSv3": "CVSS:3.0/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
          "alternativeIds": [],
          "creationTime": "2017-02-22T07:28:27.408000Z",
          "credit": [
            "0ang3el"
          ],
          "cvssScore": 7.8,
          "description": "## Overview\n[`org.apache.xmlrpc:xmlrpc`](https://ws.apache.org/xmlrpc/) is a Java implementation of XML-RPC, a popular protocol that uses XML over HTTP to implement remote procedure calls.\n\nAffected versions of the package are vulnerable to Server Side Request Forgery (SSRF). Sending an XML with a `DOCTYPE` declaration that loads an external DTD, a malicious user can send a GET request to the host on behalf of a vulnerable `xml-rpc` endpoint.\n\n## References\n- [OSS Security](http://seclists.org/oss-sec/2016/q3/48)\n- [0ang3el Blog](https://0ang3el.blogspot.co.il/2016/07/beware-of-ws-xmlrpc-library-in-your.html)\n",
          "disclosureTime": "2016-07-13T03:34:55.265000Z",
          "exploit": "Not Defined",
          "fixedIn": [
            "3.1.4"
          ],
          "functions": [],
          "functions_new": [],
          "id": "SNYK-JAVA-ORGAPACHEXMLRPC-31032",
          "identifiers": {
            "CVE": [
              "CVE-2016-5002"
            ],
            "CWE": [
              "CWE-918"
            ]
          },
          "language": "java",
          "mavenModuleName": {
            "artifactId": "xmlrpc",
            "groupId": "org.apache.xmlrpc"
          },
          "modificationTime": "2020-01-20T09:40:34.708611Z",
          "moduleName": "org.apache.xmlrpc:xmlrpc",
          "packageManager": "maven",
          "packageName": "org.apache.xmlrpc:xmlrpc",
          "patches": [],
          "publicationTime": "2016-07-13T03:34:55.265000Z",
          "references": [
            {
              "title": "0ang3el Blog",
              "url": "https://0ang3el.blogspot.co.il/2016/07/beware-of-ws-xmlrpc-library-in-your.html"
            },
            {
              "title": "Oss-Sec Mailing List",
              "url": "http://seclists.org/oss-sec/2016/q3/48"
            }
          ],
          "semver": {
            "vulnerable": [
              "[3.0,3.1.4)"
            ]
          },
          "severity": "high",
          "title": "Server-side Request Forgery (SSRF)",
          "from": [
            "gradle-simple@0.0.0",
            "org.apache.xmlrpc:xmlrpc@3.1"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "name": "org.apache.xmlrpc:xmlrpc",
          "version": "3.1"
        },
        {
          "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
          "alternativeIds": [],
          "creationTime": "2017-02-22T07:28:27.421000Z",
          "credit": [
            "0ang3el"
          ],
          "cvssScore": 9.8,
          "description": "## Overview\n[`org.apache.xmlrpc:xmlrpc`](https://ws.apache.org/xmlrpc/) is a Java implementation of XML-RPC, a popular protocol that uses XML over HTTP to implement remote procedure calls.\n\nAffected versions of the package are vulnerable to Deserialization of Untrusted Data. By default `ws-xmlrpc` supports `java.io.Serializable` data types through `<ex:serializable>` element. An attacker can leverage this to call a method and pass a serialized Java object in that element. `ws-xmlrpc` will deserialize the malicious object without validation.\n\n## Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n- Apache Blog\n\nThe vulnerability, also know as _Mad Gadget_\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\n- Google\n\n\n## References\n- [OSS Security](http://seclists.org/oss-sec/2016/q3/48)\n- [0ang3el Blog](https://0ang3el.blogspot.co.il/2016/07/beware-of-ws-xmlrpc-library-in-your.html)\n",
          "disclosureTime": "2016-07-13T04:54:03.321000Z",
          "exploit": "Not Defined",
          "fixedIn": [
            "3.1.4"
          ],
          "functions": [],
          "functions_new": [],
          "id": "SNYK-JAVA-ORGAPACHEXMLRPC-31033",
          "identifiers": {
            "CVE": [
              "CVE-2016-5003"
            ],
            "CWE": [
              "CWE-502"
            ]
          },
          "language": "java",
          "mavenModuleName": {
            "artifactId": "xmlrpc",
            "groupId": "org.apache.xmlrpc"
          },
          "modificationTime": "2020-01-20T09:40:34.715234Z",
          "moduleName": "org.apache.xmlrpc:xmlrpc",
          "packageManager": "maven",
          "packageName": "org.apache.xmlrpc:xmlrpc",
          "patches": [],
          "publicationTime": "2016-07-13T04:54:03.321000Z",
          "references": [
            {
              "title": "0ang3el Blog",
              "url": "https://0ang3el.blogspot.co.il/2016/07/beware-of-ws-xmlrpc-library-in-your.html"
            },
            {
              "title": "Oss-Sec Mailing List",
              "url": "http://seclists.org/oss-sec/2016/q3/48"
            }
          ],
          "semver": {
            "vulnerable": [
              "[3.0,3.1.4)"
            ]
          },
          "severity": "high",
          "title": "Deserialization of Untrusted Data",
          "from": [
            "gradle-simple@0.0.0",
            "org.apache.xmlrpc:xmlrpc@3.1"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "name": "org.apache.xmlrpc:xmlrpc",
          "version": "3.1"
        },
        {
          "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
          "alternativeIds": [],
          "creationTime": "2017-02-22T07:28:27.435000Z",
          "credit": [
            "0ang3el"
          ],
          "cvssScore": 6.5,
          "description": "## Overview\n[`org.apache.xmlrpc:xmlrpc`](https://ws.apache.org/xmlrpc/) is a Java implementation of XML-RPC, a popular protocol that uses XML over HTTP to implement remote procedure calls.\n\nAffected versions of the package are vulnerable to Denial of Service (DoS). By default `ws-xmlrpc` supports `Content-Encoding` HTTP header. When sending `Content-Encoding: gzip` header, the body is not gzipped, and an error returns. An attacker may create a specially crafted compressed file and cause a Denial of Service attack, also known as `decompression bomb` attack.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## References\n- [OSS Security](http://seclists.org/oss-sec/2016/q3/48)\n- [0ang3el Blog](https://0ang3el.blogspot.co.il/2016/07/beware-of-ws-xmlrpc-library-in-your.html)\n",
          "disclosureTime": "2016-07-13T05:00:54.109000Z",
          "exploit": "Not Defined",
          "fixedIn": [
            "3.1.4"
          ],
          "functions": [],
          "functions_new": [],
          "id": "SNYK-JAVA-ORGAPACHEXMLRPC-31034",
          "identifiers": {
            "CVE": [
              "CVE-2016-5004"
            ],
            "CWE": [
              "CWE-400"
            ]
          },
          "language": "java",
          "mavenModuleName": {
            "artifactId": "xmlrpc",
            "groupId": "org.apache.xmlrpc"
          },
          "modificationTime": "2020-01-20T09:40:34.721067Z",
          "moduleName": "org.apache.xmlrpc:xmlrpc",
          "packageManager": "maven",
          "packageName": "org.apache.xmlrpc:xmlrpc",
          "patches": [],
          "publicationTime": "2016-07-13T05:00:54.109000Z",
          "references": [
            {
              "title": "0ang3el Blog",
              "url": "https://0ang3el.blogspot.co.il/2016/07/beware-of-ws-xmlrpc-library-in-your.html"
            },
            {
              "title": "Oss-Sec Mailing List",
              "url": "http://seclists.org/oss-sec/2016/q3/48"
            }
          ],
          "semver": {
            "vulnerable": [
              "[3.0,3.1.4)"
            ]
          },
          "severity": "medium",
          "title": "Denial of Service (DoS)",
          "from": [
            "gradle-simple@0.0.0",
            "org.apache.xmlrpc:xmlrpc@3.1"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "name": "org.apache.xmlrpc:xmlrpc",
          "version": "3.1"
        },
        {
          "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
          "alternativeIds": [],
          "creationTime": "2020-01-20T09:38:53.230488Z",
          "credit": [
            "Guillaume Teissier (Orange)"
          ],
          "cvssScore": 9.8,
          "description": "## Overview\n\n[org.apache.xmlrpc:xmlrpc](https://ws.apache.org/xmlrpc/) is a Java implementation of XML-RPC, a popular protocol that uses XML over HTTP to implement remote procedure calls. Compared to SOAP, or JAX-RPC, it is stable, much simpler and easier to handle. Version 3 of Apache XML-RPC introduces several important vendor extensions over the original XML-RPC specification.\n\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\nA flaw was discovered where the XMLRPC client implementation performed deserialization of the server-side exception serialized in the `faultCause` attribute of XMLRPC error response messages. A malicious or compromised XMLRPC server could possibly use this flaw to execute arbitrary code with the privileges of an application using the Apache XMLRPC client library.\n\n## Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\n\n## Remediation\n\nThere is no fixed version for `org.apache.xmlrpc:xmlrpc`.\n\n\n## References\n\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=1775193)\n\n- [SVN Revision Introducing Vulnerability](http://svn.apache.org/viewvc?view=revision&revision=442177)\n",
          "disclosureTime": "2020-01-16T00:00:00Z",
          "exploit": "Not Defined",
          "fixedIn": [],
          "functions": [],
          "functions_new": [],
          "id": "SNYK-JAVA-ORGAPACHEXMLRPC-542689",
          "identifiers": {
            "CVE": [
              "CVE-2019-17570"
            ],
            "CWE": [
              "CWE-502"
            ]
          },
          "language": "java",
          "mavenModuleName": {
            "artifactId": "xmlrpc",
            "groupId": "org.apache.xmlrpc"
          },
          "modificationTime": "2020-01-20T10:31:35.152098Z",
          "moduleName": "org.apache.xmlrpc:xmlrpc",
          "packageManager": "maven",
          "packageName": "org.apache.xmlrpc:xmlrpc",
          "patches": [],
          "publicationTime": "2020-01-20T09:49:09Z",
          "references": [
            {
              "title": "RedHat Bugzilla Bug",
              "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1775193"
            },
            {
              "title": "SVN Revision Introducing Vulnerability",
              "url": "http://svn.apache.org/viewvc?view=revision&revision=442177"
            }
          ],
          "semver": {
            "vulnerable": [
              "[3.1,)"
            ]
          },
          "severity": "high",
          "title": "Deserialization of Untrusted Data",
          "from": [
            "gradle-simple@0.0.0",
            "org.apache.xmlrpc:xmlrpc@3.1"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "name": "org.apache.xmlrpc:xmlrpc",
          "version": "3.1"
        },
        {
          "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
          "alternativeIds": [],
          "creationTime": "2019-11-19T11:44:30.225935Z",
          "credit": [
            "Unknown"
          ],
          "cvssScore": 5.9,
          "description": "## Overview\n\n[org.codehaus.jackson:jackson-mapper-asl](https://mvnrepository.com/artifact/org.codehaus.jackson/jackson-mapper-asl) is a high-performance data binding package built on Jackson JSON processor.\n\n\nAffected versions of this package are vulnerable to XML External Entity (XXE) Injection.\nMultiple classes including  `XmlMapper` was found to be vulnerabiltiy to XXE, which might allow attackers to have unspecified impact via unknown vectors.\n\n## Details\nXXE Injection is a type of attack against an application that parses XML input.\r\nXML is a markup language that defines a set of rules for encoding documents in a format that is both human-readable and machine-readable. By default, many XML processors allow specification of an external entity, a URI that is dereferenced and evaluated during XML processing. When an XML document is being parsed, the parser can make a request and include the content at the specified URI inside of the XML document.\r\n\r\nAttacks can include disclosing local files, which may contain sensitive data such as passwords or private user data, using file: schemes or relative paths in the system identifier.\r\n\r\nFor example, below is a sample XML document, containing an XML element- username.\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\r\n   <username>John</username>\r\n</xml>\r\n```\r\n\r\nAn external XML entity - `xxe`, is defined using a system identifier and present within a DOCTYPE header. These entities can access local or remote content. For example the below code contains an external XML entity that would fetch the content of  `/etc/passwd` and display it to the user rendered by `username`.\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\r\n<!DOCTYPE foo [\r\n   <!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]>\r\n   <username>&xxe;</username>\r\n</xml>\r\n```\r\n\r\nOther XXE Injection attacks can access local resources that may not stop returning data, possibly impacting application availability and leading to Denial of Service.\n\n\n## Remediation\n\nThere is no fixed version for `org.codehaus.jackson:jackson-mapper-asl`.\n\n\n## References\n\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=1715075)\n",
          "disclosureTime": "2019-11-18T00:00:00Z",
          "exploit": "Not Defined",
          "fixedIn": [],
          "functions": [],
          "functions_new": [],
          "id": "SNYK-JAVA-ORGCODEHAUSJACKSON-534878",
          "identifiers": {
            "CVE": [
              "CVE-2019-10172"
            ],
            "CWE": [
              "CWE-611"
            ],
            "GHSA": [
              "GHSA-r6j9-8759-g62w"
            ]
          },
          "language": "java",
          "mavenModuleName": {
            "artifactId": "jackson-mapper-asl",
            "groupId": "org.codehaus.jackson"
          },
          "modificationTime": "2019-12-02T14:45:32.742563Z",
          "moduleName": "org.codehaus.jackson:jackson-mapper-asl",
          "packageManager": "maven",
          "packageName": "org.codehaus.jackson:jackson-mapper-asl",
          "patches": [],
          "publicationTime": "2019-11-19T11:56:32Z",
          "references": [
            {
              "title": "RedHat Bugzilla Bug",
              "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1715075"
            }
          ],
          "semver": {
            "vulnerable": [
              "[0,]"
            ]
          },
          "severity": "medium",
          "title": "XML External Entity (XXE) Injection",
          "from": [
            "gradle-simple@0.0.0",
            "org.codehaus.jackson:jackson-mapper-asl@1.9.13"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "name": "org.codehaus.jackson:jackson-mapper-asl",
          "version": "1.9.13"
        },
        {
          "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
          "alternativeIds": [],
          "creationTime": "2019-05-01T12:52:12.717603Z",
          "credit": [
            "Unknown"
          ],
          "cvssScore": 5.3,
          "description": "## Overview\n\n[org.eclipse.jetty:jetty-server](https://mvnrepository.com/artifact/org.eclipse.jetty/jetty-server) is a lightweight highly scalable java based web server and servlet engine.\n\n\nAffected versions of this package are vulnerable to Information Exposure.\nThe configuration of a Jetty server may be leaked as part of a HTTP 404 response. This is due to the `DefaultHandler` class producing an error page during an exception.\n\n## Remediation\n\nUpgrade `org.eclipse.jetty:jetty-server` to version 9.2.28.v20190418, 9.3.27.v20190418, 9.4.17.v20190418 or higher.\n\n\n## References\n\n- [Eclipse Report](https://bugs.eclipse.org/bugs/show_bug.cgi?id=546577)\n\n- [GitHub Commit](https://github.com/eclipse/jetty.project/commit/04c994712c0b29824633598cfe0bf709f3b96f09)\n\n- [GitHub Issue](https://github.com/eclipse/jetty.project/issues/3555)\n",
          "disclosureTime": "2019-04-22T21:08:57Z",
          "exploit": "Not Defined",
          "fixedIn": [
            "9.2.28.v20190418",
            "9.3.27.v20190418",
            "9.4.17.v20190418"
          ],
          "functions": [
            {
              "functionId": {
                "className": "DefaultHandler",
                "filePath": "org/eclipse/jetty/server/handler/DefaultHandler.java",
                "functionName": "handle"
              },
              "version": [
                "[7.0.0.M0,9.2.28.v20190418)",
                "[9.3.0.M0,9.3.27.v20190418)",
                "[9.4.0.M0,9.4.17.v20190418)"
              ]
            }
          ],
          "functions_new": [
            {
              "functionId": {
                "className": "org.eclipse.jetty.server.handler.DefaultHandler",
                "functionName": "handle"
              },
              "version": [
                "[7.0.0.M0,9.2.28.v20190418)",
                "[9.3.0.M0,9.3.27.v20190418)",
                "[9.4.0.M0,9.4.17.v20190418)"
              ]
            }
          ],
          "id": "SNYK-JAVA-ORGECLIPSEJETTY-174560",
          "identifiers": {
            "CVE": [
              "CVE-2019-10247"
            ],
            "CWE": [
              "CWE-213"
            ]
          },
          "language": "java",
          "mavenModuleName": {
            "artifactId": "jetty-server",
            "groupId": "org.eclipse.jetty"
          },
          "modificationTime": "2019-05-01T15:37:25.679372Z",
          "moduleName": "org.eclipse.jetty:jetty-server",
          "packageManager": "maven",
          "packageName": "org.eclipse.jetty:jetty-server",
          "patches": [],
          "publicationTime": "2019-04-22T21:08:57Z",
          "references": [
            {
              "title": "Eclipse Report",
              "url": "https://bugs.eclipse.org/bugs/show_bug.cgi?id=546577"
            },
            {
              "title": "GitHub Commit",
              "url": "https://github.com/eclipse/jetty.project/commit/04c994712c0b29824633598cfe0bf709f3b96f09"
            },
            {
              "title": "GitHub Issue",
              "url": "https://github.com/eclipse/jetty.project/issues/3555"
            }
          ],
          "semver": {
            "vulnerable": [
              "[7.0.0.M0,9.2.28.v20190418)",
              "[9.3.0.M0,9.3.27.v20190418)",
              "[9.4.0.M0,9.4.17.v20190418)"
            ]
          },
          "severity": "medium",
          "title": "Information Exposure",
          "from": [
            "gradle-simple@0.0.0",
            "com.googlecode.gwtupload:gwtupload-samples@0.6.6",
            "org.eclipse.jetty:jetty-webapp@7.3.0.v20110203",
            "org.eclipse.jetty:jetty-servlet@7.3.0.v20110203",
            "org.eclipse.jetty:jetty-security@7.3.0.v20110203",
            "org.eclipse.jetty:jetty-server@9.4.12.v20180830"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "name": "org.eclipse.jetty:jetty-server",
          "version": "9.4.12.v20180830"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:L/E:P/RL:U/RC:R",
          "alternativeIds": [],
          "creationTime": "2020-02-20T11:22:37.008016Z",
          "credit": [
            "Unknown"
          ],
          "cvssScore": 8.6,
          "description": "## Overview\n\n[org.jyaml:jyaml](http://jyaml.sourceforge.net/) is a Java library for working with the Yaml file format.\n\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\nJYaml allows code execution during deserialization of data through the `load()` function.\n\n## Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\n\n## Remediation\n\nThere is no fixed version for `org.jyaml:jyaml`.\n\n\n## References\n\n- [JYaml Bug Tracker](https://sourceforge.net/p/jyaml/bugs/)\n\n- [Marshalsec Whitepaper](https://github.com/mbechler/marshalsec/blob/master/marshalsec.pdf)\n\n- [Proof Of Concept](https://gist.github.com/j0lt-github/f5141abcacae63d434ecae211422153a)\n",
          "disclosureTime": "2020-02-19T18:01:25Z",
          "exploit": "Proof of Concept",
          "fixedIn": [],
          "functions": [],
          "functions_new": [],
          "id": "SNYK-JAVA-ORGJYAML-550161",
          "identifiers": {
            "CVE": [
              "CVE-2020-8441"
            ],
            "CWE": [
              "CWE-502"
            ]
          },
          "language": "java",
          "mavenModuleName": {
            "artifactId": "jyaml",
            "groupId": "org.jyaml"
          },
          "modificationTime": "2020-02-20T15:23:02.817041Z",
          "moduleName": "org.jyaml:jyaml",
          "packageManager": "maven",
          "packageName": "org.jyaml:jyaml",
          "patches": [],
          "publicationTime": "2020-02-19T18:01:25Z",
          "references": [
            {
              "title": "JYaml Bug Tracker",
              "url": "https://sourceforge.net/p/jyaml/bugs/"
            },
            {
              "title": "Marshalsec Whitepaper",
              "url": "https://github.com/mbechler/marshalsec/blob/master/marshalsec.pdf"
            },
            {
              "title": "Proof Of Concept",
              "url": "https://gist.github.com/j0lt-github/f5141abcacae63d434ecae211422153a"
            }
          ],
          "semver": {
            "vulnerable": [
              "[0,]"
            ]
          },
          "severity": "high",
          "title": "Deserialization of Untrusted Data",
          "from": [
            "gradle-simple@0.0.0",
            "org.jyaml:jyaml@1.2"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "name": "org.jyaml:jyaml",
          "version": "1.2"
        },
        {
          "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "alternativeIds": [],
          "creationTime": "2020-01-22T13:34:40.486430Z",
          "credit": [
            "Eric Zimanyi"
          ],
          "cvssScore": 5.3,
          "description": "## Overview\n\n[org.springframework:spring-webmvc](https://mvnrepository.com/artifact/org.springframework/spring-webmvc) is a package that provides Model-View-Controller (MVC) architecture and ready components that can be used to develop flexible and loosely coupled web applications.\n\n\nAffected versions of this package are vulnerable to Cross-Site Request Forgery (CSRF)\nthrough CORS preflight requests that target Spring MVC (`spring-webmvc` module) or Spring WebFlux (`spring-webflux` module) endpoints. Only non-authenticated endpoints are vulnerable because preflight requests should not include credentials and therefore requests should fail authentication. However a notable exception to this are Chrome based browsers when using client certificates for authentication since Chrome sends TLS client certificates in CORS preflight requests in violation of spec requirements. No HTTP body can be sent or received as a result of this attack.\n\n## Remediation\n\nUpgrade `org.springframework:spring-webmvc` to version 5.2.3 or higher.\n\n\n## References\n\n- [Pivotal Vulnerability Report](https://pivotal.io/security/cve-2020-5397)\n",
          "disclosureTime": "2020-01-16T13:32:22Z",
          "exploit": "Not Defined",
          "fixedIn": [
            "5.2.3"
          ],
          "functions": [],
          "functions_new": [],
          "id": "SNYK-JAVA-ORGSPRINGFRAMEWORK-542933",
          "identifiers": {
            "CVE": [
              "CVE-2020-5397"
            ],
            "CWE": [
              "CWE-352"
            ],
            "GHSA": [
              "GHSA-7pm4-g2qj-j85x"
            ]
          },
          "language": "java",
          "mavenModuleName": {
            "artifactId": "spring-webmvc",
            "groupId": "org.springframework"
          },
          "modificationTime": "2020-01-22T20:21:03.665552Z",
          "moduleName": "org.springframework:spring-webmvc",
          "packageManager": "maven",
          "packageName": "org.springframework:spring-webmvc",
          "patches": [],
          "publicationTime": "2020-01-22T13:32:21Z",
          "references": [
            {
              "title": "Pivotal Vulnerability Report",
              "url": "https://pivotal.io/security/cve-2020-5397"
            }
          ],
          "semver": {
            "vulnerable": [
              "[5.2.0, 5.2.3)"
            ]
          },
          "severity": "medium",
          "title": "Cross-Site Request Forgery (CSRF)",
          "from": [
            "gradle-simple@0.0.0",
            "org.springframework.cloud:spring-cloud-config-server@2.2.0.RELEASE",
            "org.springframework.boot:spring-boot-starter-web@2.2.1.RELEASE",
            "org.springframework:spring-webmvc@5.2.1.RELEASE"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "name": "org.springframework:spring-webmvc",
          "version": "5.2.1.RELEASE"
        },
        {
          "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:L/UI:R/S:C/C:H/I:H/A:H",
          "alternativeIds": [],
          "creationTime": "2020-03-05T15:02:31.577470Z",
          "credit": [
            "Roman Shalymov"
          ],
          "cvssScore": 8,
          "description": "## Overview\n\n[org.springframework:spring-web](https://github.com/spring-projects/spring-framework) is a package that provides a comprehensive programming and configuration model for modern Java-based enterprise applications - on any kind of deployment platform.\n\n\nAffected versions of this package are vulnerable to Reflected File Download (RFD).\nA reflected file download attack is possible when the filename attribute of the `Content-Disposition` header is derived from user-supplied input.\n\n## Remediation\n\nUpgrade `org.springframework:spring-web` to version 5.2.3, 5.1.13, 5.0.16 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/spring-projects/spring-framework/commit/41f40c6c229d3b4f768718f1ec229d8f0ad76d76)\n\n- [GitHub Issue](https://github.com/spring-projects/spring-framework/issues/24220)\n\n- [Pivotal Vulnerability Report](https://pivotal.io/security/cve-2020-5398)\n",
          "disclosureTime": "2020-01-16T13:47:43Z",
          "exploit": "Not Defined",
          "fixedIn": [
            "5.2.3",
            "5.1.13",
            "5.0.16"
          ],
          "functions": [],
          "functions_new": [],
          "id": "SNYK-JAVA-ORGSPRINGFRAMEWORK-559346",
          "identifiers": {
            "CVE": [
              "CVE-2020-5398"
            ],
            "CWE": [
              "CWE-494"
            ],
            "GHSA": [
              "GHSA-8wx2-9q48-vm9r"
            ]
          },
          "language": "java",
          "mavenModuleName": {
            "artifactId": "spring-web",
            "groupId": "org.springframework"
          },
          "modificationTime": "2020-03-05T15:22:25.100741Z",
          "moduleName": "org.springframework:spring-web",
          "packageManager": "maven",
          "packageName": "org.springframework:spring-web",
          "patches": [],
          "publicationTime": "2020-01-22T13:47:42Z",
          "references": [
            {
              "title": "GitHub Commit",
              "url": "https://github.com/spring-projects/spring-framework/commit/41f40c6c229d3b4f768718f1ec229d8f0ad76d76"
            },
            {
              "title": "GitHub Issue",
              "url": "https://github.com/spring-projects/spring-framework/issues/24220"
            },
            {
              "title": "Pivotal Vulnerability Report",
              "url": "https://pivotal.io/security/cve-2020-5398"
            }
          ],
          "semver": {
            "vulnerable": [
              "[5.2.0, 5.2.3)",
              "[5.1.0, 5.1.13)",
              "[5.0.0, 5.0.16)"
            ]
          },
          "severity": "high",
          "title": "Reflected File Download (RFD)",
          "from": [
            "gradle-simple@0.0.0",
            "org.springframework.cloud:spring-cloud-config-server@2.2.0.RELEASE",
            "org.springframework.boot:spring-boot-starter-web@2.2.1.RELEASE",
            "org.springframework:spring-webmvc@5.2.1.RELEASE",
            "org.springframework:spring-web@5.2.1.RELEASE"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "name": "org.springframework:spring-web",
          "version": "5.2.1.RELEASE"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:H/RL:O/RC:C",
          "alternativeIds": [],
          "creationTime": "2020-03-06T15:21:22.897104Z",
          "credit": [
            "Yiming Xiang"
          ],
          "cvssScore": 7.3,
          "description": "## Overview\n\n[org.springframework.cloud:spring-cloud-config-server](https://spring.io) is a library that provides an HTTP resource-based API for external configuration.\n\n\nAffected versions of this package are vulnerable to Directory Traversal.\nIt allows applications to serve arbitrary configuration files through the spring-cloud-config-server module. A malicious user, or attacker, can send a request using a specially crafted URL that can lead a directory traversal attack.\n\n## Remediation\n\nUpgrade `org.springframework.cloud:spring-cloud-config-server` to version 2.2.2.RELEASE, 2.1.7.RELEASE or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/spring-cloud/spring-cloud-config/commit/4c7b8dfc7edaacb76a77e0c6ef9a5cfc200e3d02)\n\n- [Pivotal Security Advisory](https://pivotal.io/security/cve-2020-5405)\n",
          "disclosureTime": "2020-03-05T19:46:53Z",
          "exploit": "High",
          "fixedIn": [
            "2.2.2.RELEASE",
            "2.1.7.RELEASE"
          ],
          "functions": [],
          "functions_new": [],
          "id": "SNYK-JAVA-ORGSPRINGFRAMEWORKCLOUD-559426",
          "identifiers": {
            "CVE": [
              "CVE-2020-5405"
            ],
            "CWE": [
              "CWE-22"
            ]
          },
          "language": "java",
          "mavenModuleName": {
            "artifactId": "spring-cloud-config-server",
            "groupId": "org.springframework.cloud"
          },
          "modificationTime": "2020-03-06T15:25:38.363953Z",
          "moduleName": "org.springframework.cloud:spring-cloud-config-server",
          "packageManager": "maven",
          "packageName": "org.springframework.cloud:spring-cloud-config-server",
          "patches": [],
          "publicationTime": "2020-03-06T19:46:53Z",
          "references": [
            {
              "title": "GitHub Commit",
              "url": "https://github.com/spring-cloud/spring-cloud-config/commit/4c7b8dfc7edaacb76a77e0c6ef9a5cfc200e3d02"
            },
            {
              "title": "Pivotal Security Advisory",
              "url": "https://pivotal.io/security/cve-2020-5405"
            }
          ],
          "semver": {
            "vulnerable": [
              "[2.2.0.RELEASE, 2.2.2.RELEASE)",
              "[2.1.0.RELEASE, 2.1.7.RELEASE)"
            ]
          },
          "severity": "high",
          "title": "Directory Traversal",
          "from": [
            "gradle-simple@0.0.0",
            "org.springframework.cloud:spring-cloud-config-server@2.2.0.RELEASE"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "name": "org.springframework.cloud:spring-cloud-config-server",
          "version": "2.2.0.RELEASE"
        },
        {
          "CVSSv3": "CVSS:3.0/AV:A/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N/E:U/RL:T/RC:U",
          "alternativeIds": [],
          "creationTime": "2019-12-12T13:08:53.753033Z",
          "credit": [
            "Unknown"
          ],
          "cvssScore": 4.3,
          "description": "## Overview\n\n[org.yaml:snakeyaml](https://code.google.com/p/snakeyaml/source/browse/) is a YAML 1.1 parser and emitter for Java.\n\n\nAffected versions of this package are vulnerable to Denial of Service (DoS).\nThe Alias feature in SnakeYAML 1.18 allows entity expansion during a load operation, a related issue to CVE-2003-1564.\r\n\r\n*Note* While the Maintainer acknowledges the existence of the issue, they believe it should be solved by sanitizing the `inputStream` to the parser\n\n## Remediation\n\nUpgrade `org.yaml:snakeyaml` to version 1.26 or higher.\n\n\n## References\n\n- [Bitbucket Issue](https://bitbucket.org/asomov/snakeyaml/issues/377/allow-configuration-for-preventing-billion)\n\n- [GitHub Commit](https://bitbucket.org/asomov/snakeyaml/commits/da11ddbd91c1f8392ea932b37fa48110fa54ed8c)\n\n- [Maintainer Report](https://bitbucket.org/asomov/snakeyaml/wiki/Billion%20laughs%20attack)\n\n- [Proof Of Concept](https://bitbucket.org/asomov/snakeyaml/commits/04378d05777d21d114a9cdc24976ad49c8919222)\n",
          "disclosureTime": "2019-12-12T03:28:21Z",
          "exploit": "Unproven",
          "fixedIn": [
            "1.26"
          ],
          "functions": [],
          "functions_new": [],
          "id": "SNYK-JAVA-ORGYAML-537645",
          "identifiers": {
            "CVE": [
              "CVE-2017-18640"
            ],
            "CWE": [
              "CWE-189"
            ]
          },
          "language": "java",
          "mavenModuleName": {
            "artifactId": "snakeyaml",
            "groupId": "org.yaml"
          },
          "modificationTime": "2020-03-13T14:26:38.285502Z",
          "moduleName": "org.yaml:snakeyaml",
          "packageManager": "maven",
          "packageName": "org.yaml:snakeyaml",
          "patches": [],
          "publicationTime": "2019-12-19T03:28:21Z",
          "references": [
            {
              "title": "Bitbucket Issue",
              "url": "https://bitbucket.org/asomov/snakeyaml/issues/377/allow-configuration-for-preventing-billion"
            },
            {
              "title": "GitHub Commit",
              "url": "https://bitbucket.org/asomov/snakeyaml/commits/da11ddbd91c1f8392ea932b37fa48110fa54ed8c"
            },
            {
              "title": "Maintainer Report",
              "url": "https://bitbucket.org/asomov/snakeyaml/wiki/Billion%20laughs%20attack"
            },
            {
              "title": "Proof Of Concept",
              "url": "https://bitbucket.org/asomov/snakeyaml/commits/04378d05777d21d114a9cdc24976ad49c8919222"
            }
          ],
          "semver": {
            "vulnerable": [
              "[,1.26)"
            ]
          },
          "severity": "medium",
          "title": "Denial of Service (DoS)",
          "from": [
            "gradle-simple@0.0.0",
            "org.springframework.cloud:spring-cloud-config-server@2.2.0.RELEASE",
            "org.springframework.boot:spring-boot-starter-web@2.2.1.RELEASE",
            "org.springframework.boot:spring-boot-starter-validation@2.2.1.RELEASE",
            "org.springframework.boot:spring-boot-starter@2.2.1.RELEASE",
            "org.yaml:snakeyaml@1.25"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "name": "org.yaml:snakeyaml",
          "version": "1.25"
        }
      ],
      "upgrade": {
        "com.googlecode.gwtupload:gwtupload-samples@0.6.6": {
          "upgradeTo": "com.googlecode.gwtupload:gwtupload-samples@1.0.1",
          "upgrades": [
            "commons-fileupload:commons-fileupload@1.2.1",
            "commons-fileupload:commons-fileupload@1.2.1",
            "commons-fileupload:commons-fileupload@1.2.1"
          ],
          "vulns": [
            "SNYK-JAVA-COMMONSFILEUPLOAD-30079",
            "SNYK-JAVA-COMMONSFILEUPLOAD-30080",
            "SNYK-JAVA-COMMONSFILEUPLOAD-30081"
          ]
        },
        "com.itextpdf:sign@7.1.5": {
          "upgradeTo": "com.itextpdf:sign@7.1.7",
          "upgrades": [
            "com.itextpdf:kernel@7.1.5"
          ],
          "vulns": [
            "SNYK-JAVA-COMITEXTPDF-541282"
          ]
        },
        "org.apache.poi:poi-ooxml@3.15": {
          "upgradeTo": "org.apache.poi:poi-ooxml@4.1.0",
          "upgrades": [
            "org.apache.poi:poi-ooxml@3.15",
            "org.apache.poi:poi@3.15",
            "org.apache.poi:poi@3.15"
          ],
          "vulns": [
            "SNYK-JAVA-ORGAPACHEPOI-548686",
            "SNYK-JAVA-ORGAPACHEPOI-32049",
            "SNYK-JAVA-ORGAPACHEPOI-30698"
          ]
        },
        "org.jolokia:jolokia-core@1.2.0": {
          "upgradeTo": "org.jolokia:jolokia-core@1.6.1",
          "upgrades": [
            "org.jolokia:jolokia-core@1.2.0",
            "org.jolokia:jolokia-core@1.2.0",
            "org.jolokia:jolokia-core@1.2.0",
            "org.jolokia:jolokia-core@1.2.0"
          ],
          "vulns": [
            "SNYK-JAVA-ORGJOLOKIA-540501",
            "SNYK-JAVA-ORGJOLOKIA-32136",
            "SNYK-JAVA-ORGJOLOKIA-32137",
            "SNYK-JAVA-ORGJOLOKIA-31213"
          ]
        },
        "org.springframework.cloud:spring-cloud-config-server@2.2.0.RELEASE": {
          "upgradeTo": "org.springframework.cloud:spring-cloud-config-server@2.2.1.RELEASE",
          "upgrades": [
            "org.apache.tomcat.embed:tomcat-embed-core@9.0.27"
          ],
          "vulns": [
            "SNYK-JAVA-ORGAPACHETOMCATEMBED-538490"
          ]
        }
      },
      "patch": {},
      "ignore": {},
      "pin": {}
    },
    "filesystemPolicy": false,
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 30,
    "projectName": "gradle-simple",
    "displayTargetFile": "build.gradle",
    "path": "/Users/aleksandr/Desktop/gradle-simple"
  }

]