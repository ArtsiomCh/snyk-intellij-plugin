package io.snyk.plugin

import io.circe.parser.decode
import io.snyk.plugin.datamodel.SnykVulnResponse.JsonCodecs._
import io.snyk.plugin.datamodel.{LicenseVuln, SnykVulnResponse}
import org.junit.Test
import org.junit.Assert.assertTrue

import scala.io.{Codec, Source}

class LicenseVulnerabilityTest {

  @Test
  def testDecodeLicenseVulnerabilityWithEmptyLicenseTemplateUrl() = {
    val inputJsonStr = Source
      .fromResource("sample-response-for-license-with-empty-template-url.json", getClass.getClassLoader)(Codec.UTF8).mkString
    val vulnResponseSeq = decode[Seq[SnykVulnResponse]](inputJsonStr).toTry

    assertTrue(vulnResponseSeq.isSuccess)
    assertTrue(vulnResponseSeq.get.head.vulnerabilities.get(7).asInstanceOf[LicenseVuln].licenseTemplateUrl.isEmpty)
  }
}
