package io.snyk.plugin

import io.circe.parser.decode
import io.snyk.plugin.datamodel.{MiniVuln, SnykVulnResponse}
import io.snyk.plugin.datamodel.SnykVulnResponse.JsonCodecs._
import org.junit.Test
import org.junit.Assert._

import scala.io.{Codec, Source}

class MiniVulnerabilityTest {

  @Test
  def testMiniVulnerabilities(): Unit = {
    val inputJsonStr = Source.fromResource("sample-response-3.json", getClass.getClassLoader)(Codec.UTF8).mkString
    val tryOutput = decode[SnykVulnResponse](inputJsonStr)

    assertTrue(tryOutput.isRight)

    val snykVulnResponse = tryOutput.right.get

    val securityVulnerabilities = snykVulnResponse.securityVulns

    assertNotNull(securityVulnerabilities)

    val miniVulnerabilities = securityVulnerabilities
      .map(securityVuln => MiniVuln.from(securityVuln, Option.empty, Option.empty))

    assertNotNull(miniVulnerabilities)

    val mergedMiniVulnerabilities = MiniVuln.merge(miniVulnerabilities)

    assertEquals(1, miniVulnerabilities.size)
    assertEquals(1, mergedMiniVulnerabilities.size)

    mergedMiniVulnerabilities.map(_.derivations) foreach { derivation =>
      assertNotNull(derivation)

      derivation foreach { miniTree =>
        assertNotNull(miniTree.content)
      }
    }
  }
}
